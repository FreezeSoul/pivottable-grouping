{"version":3,"sources":["pivot.coffee","pivot.min.js"],"names":["callWithJQuery","indexOf","item","i","l","this","length","slice","bind","fn","me","apply","arguments","hasProp","hasOwnProperty","extend","child","parent","ctor","constructor","key","call","prototype","__super__","pivotModule","exports","module","require","define","amd","jQuery","$","GroupingPivotData","PivotData","addSeparators","aggregatorTemplates","aggregators","childIndex","childKeysIndices","colGetter","dayNamesEn","derivers","expandAll","expandRowCol","expandRowsGroupAfter","expandWithSpan","getAxis","getExpandAllHandler","getExpandHandler","getHeader","getSort","levelKeysIndices","locales","mthNamesEn","naturalSort","numberFormat","parentKeysIndices","pivotTableRenderer","rd","renderers","rowGetter","rx","rz","showHide","sortAs","usFmt","usFmtInt","usFmtPct","zeroPad","nStr","thousandsSep","decimalSep","rgx","x","x1","x2","split","test","replace","opts","defaults","digitsAfterDecimal","scaler","prefix","suffix","result","isNaN","isFinite","toFixed","count","formatter","data","rowKey","colKey","push","value","format","uniques","arg","attr","uniq","record","ref","numInputs","sum","parseFloat","extremes","mode","val","sorter","sorters","ref1","ref2","Math","quantile","q","vals","sort","a","b","floor","ceil","runningStat","ddof","n","m","s","m_new","sqrt","sumOverSum","denom","num","sumNum","sumDenom","sumOverSumBound80","upper","sign","fractionOf","wrapped","type","selector","total","row","col","inner","getAggregator","countUnique","f","listUnique","join","max","min","first","last","median","average","stdev","tpl","Count","Count Unique Values","List Unique Values","Sum","Integer Sum","Average","Median","Sample Variance","Sample Standard Deviation","Minimum","Maximum","First","Last","Sum over Sum","80% Upper Bound","80% Lower Bound","Sum as Fraction of Total","Sum as Fraction of Rows","Sum as Fraction of Columns","Count as Fraction of Total","Count as Fraction of Rows","Count as Fraction of Columns","Table","Table Barchart","barchart","Heatmap","heatmap","Row Heatmap","Col Heatmap","en","localeStrings","renderError","computeError","uiRenderError","selectAll","selectNone","tooMany","filterResults","cancel","totals","vs","by","number","substr","bin","binWidth","dateFormat","formatString","utcOutput","mthNames","dayNames","utc","date","Date","parse","p","_this","as","bs","nulls_first","a1","b1","nas","nbs","nf","String","match","shift","order","l_mapping","mapping","toLowerCase","isFunction","input","ref10","ref11","ref12","ref3","ref4","ref5","ref6","ref7","ref8","ref9","getRowKeys","getColKeys","sortKeys","arrSort","aggregator","aggregatorName","colAttrs","cols","rowAttrs","rows","valAttrs","rowOrder","colOrder","derivedAttributes","filter","tree","rowKeys","colKeys","rowTotals","colTotals","allTotal","sorted","grouping","rowGroupBefore","colGroupBefore","forEachRecord","processRecord","addRecord","compactRecord","j","k","len1","o","results","results1","tblCols","isEmptyObject","v","isArray","each","text","Error","forEachMatchingRecord","criteria","callback","attrs","sortersArr","comparison","r","c","all_keys","subarrays","concat","map","d","flatColKey","flatRowKey","len2","t","fromCharCode","agg","superClass","pivotUtilities","el","Array","parentNode","children","keys","len","up","level","console","log","table","find","getter","nth","show","hide","hasClass","cell","initIndex","insertPoint","parentIndex","closest","_old","prepend","rowSpan","change","span","_span","toggleClass","pivotData","expand","levels","removeClass","addClass","trigger","handler","ev","target","className","colsExpandHandler","compactLayout","getClickHandler","rowExpandHandler","rowGap","rowsExpandHandler","spanSize","tbody","td","th","thead","totalAggregator","tr","txt","clickCallback","rowValues","colValues","filters","e","document","createElement","arr","noDraw","stop","parseInt","setAttribute","appendChild","textContent","onclick","innerHTML","colSpan","style","paddingLeft","pivot","inputOpts","locale","localeDefaults","dataClass","renderer","rendererOptions","error","stack","html","hasChildNodes","removeChild","lastChild","append","pivotUI","overwrite","attrLength","attrValues","colOrderArrow","existingOpts","fn1","initialRender","len3","materializedInput","ordering","pivotTable","recordsProcessed","refresh","refreshDelayed","rendererControl","rowOrderArrow","shownAttributes","shownInAggregators","shownInDragDrop","tr1","tr2","u","uiTable","unused","unusedAttrsVerticalAutoCutoff","unusedAttrsVerticalAutoOverride","hiddenAttributes","hiddenFromAggregators","hiddenFromDragDrop","menuLimit","exclusions","inclusions","unusedAttrsVertical","autoSortUnusedAttrs","onRefresh","showUI","base","class","appendTo","attrElem","checkContainer","closeFilterBox","controls","filterItem","filterItemExcluded","finalButtons","hasExcludedItem","placeholder","triangleLink","valueCount","valueList","values","accept","accept_gen","trim","accepted","real_filter","substring","prop","left","top","currentTarget","position","css","key_a_to_z","rowSymbol","colSymbol","next","value_a_to_z","value_z_to_a","role","inArray","rendererName","len4","newDropdown","numInputsToProcess","pivotUIOptions","pvtVals","subopts","unusedAttrsContainer","w","y","remove","not","excludedItems","inclusionsInfo","setTimeout","sortable","update","ui","sender","connectWith","items","scope","colorScaleGenerator","heatmapper","numCols","numRows","nonRed","round","colorScale","forEachCell","elem","barcharter","range","bBase","bgColor","wrapper","height","bottom","right","background-color","padding-left","padding-right","padding","padding-top","text-align"],"mappings":"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","file":"pivot.min.js","sourcesContent":["callWithJQuery = (pivotModule) ->\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\n        pivotModule require(\"jquery\")\n    else if typeof define is \"function\" and define.amd # AMD\n        define [\"jquery\"], pivotModule\n    # Plain browser env\n    else\n        pivotModule jQuery\n\ncallWithJQuery ($) ->\n\n    ###\n    Utilities\n    ###\n\n    addSeparators = (nStr, thousandsSep, decimalSep) ->\n        nStr += ''\n        x = nStr.split('.')\n        x1 = x[0]\n        x2 = if x.length > 1 then  decimalSep + x[1] else ''\n        rgx = /(\\d+)(\\d{3})/\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2') while rgx.test(x1)\n        return x1 + x2\n\n    numberFormat = (opts) ->\n        defaults =\n            digitsAfterDecimal: 2, scaler: 1,\n            thousandsSep: \",\", decimalSep: \".\"\n            prefix: \"\", suffix: \"\"\n        opts = $.extend({}, defaults, opts)\n        (x) ->\n            return \"\" if isNaN(x) or not isFinite(x)\n            result = addSeparators (opts.scaler*x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep\n            return \"\"+opts.prefix+result+opts.suffix\n\n    #aggregator templates default to US number formatting but this is overrideable\n    usFmt = numberFormat()\n    usFmtInt = numberFormat(digitsAfterDecimal: 0)\n    usFmtPct = numberFormat(digitsAfterDecimal:1, scaler: 100, suffix: \"%\")\n\n    aggregatorTemplates =\n        count: (formatter=usFmtInt) -> () -> (data, rowKey, colKey) ->\n            count: 0\n            push:  -> @count++\n            value: -> @count\n            format: formatter\n\n        uniques: (fn, formatter=usFmtInt) -> ([attr]) -> (data, rowKey, colKey) ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> fn(@uniq)\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        sum: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            push: (record) -> @sum += parseFloat(record[attr]) if not isNaN parseFloat(record[attr])\n            value: -> @sum\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        extremes: (mode, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            sorter: getSort(data?.sorters, attr)\n            push: (record) ->\n                x = record[attr]\n                if mode in [\"min\", \"max\"]\n                    x = parseFloat(x)\n                    if not isNaN x then @val = Math[mode](x, @val ? x)\n                if mode == \"first\" then @val = x if @sorter(x, @val ? x) <= 0\n                if mode == \"last\"  then @val = x if @sorter(x, @val ? x) >= 0\n            value: -> @val\n            format: (x) -> if isNaN(x) then x else formatter(x)\n            numInputs: if attr? then 0 else 1\n\n        quantile: (q, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            vals: []\n            push: (record) ->\n                x = parseFloat(record[attr])\n                @vals.push(x) if not isNaN(x)\n            value: ->\n                return null if @vals.length == 0\n                @vals.sort((a,b) -> a-b)\n                i = (@vals.length-1)*q\n                return (@vals[Math.floor(i)] + @vals[Math.ceil(i)])/2.0\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        runningStat: (mode=\"mean\", ddof=1, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            n: 0.0, m: 0.0, s: 0.0\n            push: (record) ->\n                x = parseFloat(record[attr])\n                return if isNaN(x)\n                @n += 1.0\n                if @n == 1.0\n                    @m = x\n                else\n                    m_new = @m + (x - @m)/@n\n                    @s = @s + (x - @m)*(x - m_new)\n                    @m = m_new\n            value: ->\n                if mode == \"mean\"\n                    return if @n == 0 then 0/0 else @m\n                return 0 if @n <= ddof\n                switch mode\n                    when \"var\"   then @s/(@n-ddof)\n                    when \"stdev\" then Math.sqrt(@s/(@n-ddof))\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        sumOverSum: (formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: -> @sumNum/@sumDenom\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        sumOverSumBound80: (upper=true, formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: ->\n                sign = if upper then 1 else -1\n                (0.821187207574908/@sumDenom + @sumNum/@sumDenom + 1.2815515655446004*sign*\n                    Math.sqrt(0.410593603787454/ (@sumDenom*@sumDenom) + (@sumNum*(1 - @sumNum/ @sumDenom))/ (@sumDenom*@sumDenom)))/\n                    (1 + 1.642374415149816/@sumDenom)\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        fractionOf: (wrapped, type=\"total\", formatter=usFmtPct) -> (x...) -> (data, rowKey, colKey) ->\n            selector: {total:[[],[]],row:[rowKey,[]],col:[[],colKey]}[type]\n            inner: wrapped(x...)(data, rowKey, colKey)\n            push: (record) -> @inner.push record\n            format: formatter\n            value: -> @inner.value() / data.getAggregator(@selector...).inner.value()\n            numInputs: wrapped(x...)().numInputs\n\n    aggregatorTemplates.countUnique = (f) -> aggregatorTemplates.uniques(((x) -> x.length), f)\n    aggregatorTemplates.listUnique =  (s) -> aggregatorTemplates.uniques(((x) -> x.sort(naturalSort).join(s)), ((x)->x))\n    aggregatorTemplates.max =         (f) -> aggregatorTemplates.extremes('max', f)\n    aggregatorTemplates.min =         (f) -> aggregatorTemplates.extremes('min', f)\n    aggregatorTemplates.first =       (f) -> aggregatorTemplates.extremes('first', f)\n    aggregatorTemplates.last =        (f) -> aggregatorTemplates.extremes('last', f)\n    aggregatorTemplates.median =      (f) -> aggregatorTemplates.quantile(0.5, f)\n    aggregatorTemplates.average =     (f) -> aggregatorTemplates.runningStat(\"mean\", 1, f)\n    aggregatorTemplates.var =         (ddof, f) -> aggregatorTemplates.runningStat(\"var\", ddof, f)\n    aggregatorTemplates.stdev =       (ddof, f) -> aggregatorTemplates.runningStat(\"stdev\", ddof, f)\n\n    #default aggregators & renderers use US naming and number formatting\n    aggregators = do (tpl = aggregatorTemplates) ->\n        \"Count\":                tpl.count(usFmtInt)\n        \"Count Unique Values\":  tpl.countUnique(usFmtInt)\n        \"List Unique Values\":   tpl.listUnique(\", \")\n        \"Sum\":                  tpl.sum(usFmt)\n        \"Integer Sum\":          tpl.sum(usFmtInt)\n        \"Average\":              tpl.average(usFmt)\n        \"Median\":               tpl.median(usFmt)\n        \"Sample Variance\":      tpl.var(1, usFmt)\n        \"Sample Standard Deviation\": tpl.stdev(1, usFmt)\n        \"Minimum\":              tpl.min(usFmt)\n        \"Maximum\":              tpl.max(usFmt)\n        \"First\":                tpl.first(usFmt)\n        \"Last\":                 tpl.last(usFmt)\n        \"Sum over Sum\":         tpl.sumOverSum(usFmt)\n        \"80% Upper Bound\":      tpl.sumOverSumBound80(true, usFmt)\n        \"80% Lower Bound\":      tpl.sumOverSumBound80(false, usFmt)\n        \"Sum as Fraction of Total\":     tpl.fractionOf(tpl.sum(),   \"total\", usFmtPct)\n        \"Sum as Fraction of Rows\":      tpl.fractionOf(tpl.sum(),   \"row\",   usFmtPct)\n        \"Sum as Fraction of Columns\":   tpl.fractionOf(tpl.sum(),   \"col\",   usFmtPct)\n        \"Count as Fraction of Total\":   tpl.fractionOf(tpl.count(), \"total\", usFmtPct)\n        \"Count as Fraction of Rows\":    tpl.fractionOf(tpl.count(), \"row\",   usFmtPct)\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\",   usFmtPct)\n\n    renderers =\n        \"Table\":          (data, opts) ->   pivotTableRenderer(data, opts)\n        \"Table Barchart\": (data, opts) -> $(pivotTableRenderer(data, opts)).barchart()\n        \"Heatmap\":        (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\",    opts)\n        \"Row Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts)\n        \"Col Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts)\n\n    locales =\n        en:\n            aggregators: aggregators\n            renderers: renderers\n            localeStrings:\n                renderError: \"An error occurred rendering the PivotTable results.\"\n                computeError: \"An error occurred computing the PivotTable results.\"\n                uiRenderError: \"An error occurred rendering the PivotTable UI.\"\n                selectAll: \"Select All\"\n                selectNone: \"Select None\"\n                tooMany: \"(too many to list)\"\n                filterResults: \"Filter values\"\n                apply: \"Apply\"\n                cancel: \"Cancel\"\n                totals: \"Totals\" #for table renderer\n                vs: \"vs\" #for gchart renderer\n                by: \"by\" #for gchart renderer\n\n    #dateFormat deriver l10n requires month and day names to be passed in directly\n    mthNamesEn = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\n    dayNamesEn = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\n    zeroPad = (number) -> (\"0\"+number).substr(-2,2)\n\n    derivers =\n        bin: (col, binWidth) -> (record) -> record[col] - record[col] % binWidth\n        dateFormat: (col, formatString, utcOutput=false, mthNames=mthNamesEn, dayNames=dayNamesEn) ->\n            utc = if utcOutput then \"UTC\" else \"\"\n            (record) -> #thanks http://stackoverflow.com/a/12213072/112871\n                date = new Date(Date.parse(record[col]))\n                if isNaN(date) then return \"\"\n                formatString.replace /%(.)/g, (m, p) ->\n                    switch p\n                        when \"y\" then date[\"get#{utc}FullYear\"]()\n                        when \"m\" then zeroPad(date[\"get#{utc}Month\"]()+1)\n                        when \"n\" then mthNames[date[\"get#{utc}Month\"]()]\n                        when \"d\" then zeroPad(date[\"get#{utc}Date\"]())\n                        when \"w\" then dayNames[date[\"get#{utc}Day\"]()]\n                        when \"x\" then date[\"get#{utc}Day\"]()\n                        when \"H\" then zeroPad(date[\"get#{utc}Hours\"]())\n                        when \"M\" then zeroPad(date[\"get#{utc}Minutes\"]())\n                        when \"S\" then zeroPad(date[\"get#{utc}Seconds\"]())\n                        else \"%\" + p\n\n    rx = /(\\d+)|(\\D+)/g\n    rd = /\\d/\n    rz = /^0/\n    naturalSort = (as, bs, nulls_first=true) =>\n        #nulls first\n        nf = if nulls_first then 1 else -1\n        return -1*nf if bs? and not as?\n        return  1*nf if as? and not bs?\n\n        #then raw NaNs\n        return -1 if typeof as == \"number\" and isNaN(as)\n        return  1 if typeof bs == \"number\" and isNaN(bs)\n\n        #numbers and numbery strings group together\n        nas = +as\n        nbs = +bs\n        return -1 if nas < nbs\n        return  1 if nas > nbs\n\n        #within that, true numbers before numbery strings\n        return -1 if typeof as == \"number\" and typeof bs != \"number\"\n        return  1 if typeof bs == \"number\" and typeof as != \"number\"\n        return  0 if typeof as == \"number\" and typeof bs == \"number\"\n\n        # 'Infinity' is a textual number, so less than 'A'\n        return -1 if isNaN(nbs) and not isNaN(nas)\n        return  1 if isNaN(nas) and not isNaN(nbs)\n\n        #finally, \"smart\" string sorting per http://stackoverflow.com/a/4373421/112871\n        a = String(as)\n        b = String(bs)\n        return 0 if a == b\n        return (if a > b then 1 else -1) unless rd.test(a) and rd.test(b)\n\n        #special treatment for strings containing digits\n        a = a.match(rx) #create digits vs non-digit chunks and iterate through\n        b = b.match(rx)\n        while a.length and b.length\n            a1 = a.shift()\n            b1 = b.shift()\n            if a1 != b1\n                if rd.test(a1) and rd.test(b1) #both are digit chunks\n                    return a1.replace(rz, \".0\") - b1.replace(rz, \".0\")\n                else\n                    return (if a1 > b1 then 1 else -1)\n        return a.length - b.length\n\n    sortAs = (order) ->\n        mapping = {}\n        l_mapping = {} # sort lowercased keys similarly\n        for i, x of order\n            mapping[x] = i\n            l_mapping[x.toLowerCase()] = i if typeof x == \"string\"\n        (a, b) ->\n            if mapping[a]? and mapping[b]? then mapping[a] - mapping[b]\n            else if mapping[a]? then -1\n            else if mapping[b]? then 1\n            else if l_mapping[a]? and l_mapping[b]? then l_mapping[a] - l_mapping[b]\n            else if l_mapping[a]? then -1\n            else if l_mapping[b]? then 1\n            else naturalSort(a,b)\n\n    getSort = (sorters, attr) ->\n        if sorters?\n            if $.isFunction(sorters)\n                sort = sorters(attr)\n                return sort if $.isFunction(sort)\n            else if sorters[attr]?\n                return sorters[attr]\n        return naturalSort\n\n    ###\n    Data Model class\n    ###\n\n    class PivotData\n        constructor: (input, opts = {}) ->\n            @input = input\n            @aggregator = opts.aggregator ? aggregatorTemplates.count()()\n            @aggregatorName = opts.aggregatorName ? \"Count\"\n            @colAttrs = opts.cols ? []\n            @rowAttrs = opts.rows ? []\n            @valAttrs = opts.vals ? []\n            @sorters = opts.sorters ? {}\n            @rowOrder = opts.rowOrder ? \"key_a_to_z\"\n            @colOrder = opts.colOrder ? \"key_a_to_z\"\n            @derivedAttributes = opts.derivedAttributes ? {}\n            @filter = opts.filter ? (-> true)\n            @tree = {}\n            @rowKeys = []\n            @colKeys = []\n            @rowTotals = {}\n            @colTotals = {}\n            @allTotal = @aggregator(this, [], [])\n            @sorted = false\n            @grouping = opts.grouping ? false\n            @rowGroupBefore = opts.rowGroupBefore ? true\n            @colGroupBefore = opts.colGroupBefore ? false\n\n            # iterate through input, accumulating data for cells\n            PivotData.forEachRecord @input, @derivedAttributes, (record) =>\n                @processRecord(record) if @filter(record)\n\n        #can handle arrays or jQuery selections of tables\n        @forEachRecord = (input, derivedAttributes, f) ->\n            if $.isEmptyObject derivedAttributes\n                addRecord = f\n            else\n                addRecord = (record) ->\n                    record[k] = v(record) ? record[k] for k, v of derivedAttributes\n                    f(record)\n\n            #if it's a function, have it call us back\n            if $.isFunction(input)\n                input(addRecord)\n            else if $.isArray(input)\n                if $.isArray(input[0]) #array of arrays\n                    for own i, compactRecord of input when i > 0\n                        record = {}\n                        record[k] = compactRecord[j] for own j, k of input[0]\n                        addRecord(record)\n                else #array of objects\n                    addRecord(record) for record in input\n            else if input instanceof $\n                tblCols = []\n                $(\"thead > tr > th\", input).each (i) -> tblCols.push $(this).text()\n                $(\"tbody > tr\", input).each (i) ->\n                    record = {}\n                    $(\"td\", this).each (j) -> record[tblCols[j]] = $(this).text()\n                    addRecord(record)\n            else\n                throw new Error(\"unknown input format\")\n\n        forEachMatchingRecord: (criteria, callback) ->\n            PivotData.forEachRecord @input, @derivedAttributes, (record) =>\n                return if not @filter(record)\n                for k, v of criteria\n                    return if v != (record[k] ? \"null\")\n                callback(record)\n\n        arrSort: (attrs, nulls_first) =>\n            sortersArr = (getSort(@sorters, a) for a in attrs)\n            (a,b) ->\n                for own i, sorter of sortersArr\n                    comparison = sorter(a[i], b[i], nulls_first)\n                    return comparison if comparison != 0\n                return 0\n\n        sortKeys: () =>\n            if not @sorted\n                @sorted = true\n                v = (r,c) => @getAggregator(r,c).value()\n                switch @rowOrder\n                    when \"value_a_to_z\"  then @rowKeys.sort (a,b) =>  naturalSort v(a,[]), v(b,[])\n                    when \"value_z_to_a\" then @rowKeys.sort (a,b) => -naturalSort v(a,[]), v(b,[])\n                    else                     @rowKeys.sort @arrSort(@rowAttrs, @rowGroupBefore)\n                switch @colOrder\n                    when \"value_a_to_z\"  then @colKeys.sort (a,b) =>  naturalSort v([],a), v([],b)\n                    when \"value_z_to_a\" then @colKeys.sort (a,b) => -naturalSort v([],a), v([],b)\n                    else                     @colKeys.sort @arrSort(@colAttrs, @colGroupBefore)\n\n        getColKeys: (all_keys=false) =>\n            @sortKeys()\n            l = @colAttrs.length\n            return if all_keys then @colKeys else @colKeys.filter (x) -> x.length == l\n\n        getRowKeys: (all_keys=false) =>\n            @sortKeys()\n            l = @rowAttrs.length\n            return if all_keys then @rowKeys else @rowKeys.filter (x) -> x.length == l\n\n        # subarrays [1,2,3] => [[], [1], [1,2], [1,2,3]]\n        subarrays: (x) -> [[]].concat x.map (d,i) => x.slice(0,i+1)\n        # subarrays: (x) -> x.map (d,i) => x.slice(0,i+1)\n\n        processRecord: (record) -> #this code is called in a tight loop\n            colKeys = []\n            rowKeys = []\n            colKeys.push record[x] ? \"null\" for x in @colAttrs\n            rowKeys.push record[x] ? \"null\" for x in @rowAttrs\n            colKeys = if @grouping then @subarrays colKeys else [ colKeys ]\n            rowKeys = if @grouping then @subarrays rowKeys else [ rowKeys ]\n\n            @allTotal.push record\n\n            for j, rowKey of rowKeys\n                flatRowKey = rowKey.join(String.fromCharCode(0))\n\n                for i, colKey of colKeys\n                    flatColKey = colKey.join(String.fromCharCode(0))\n\n                    if rowKey.length != 0\n                        if not @rowTotals[flatRowKey]\n                            @rowKeys.push rowKey\n                            @rowTotals[flatRowKey] = @aggregator(this, rowKey, [])\n                        @rowTotals[flatRowKey].push record unless @grouping and colKey.length\n\n                    if colKey.length != 0\n                        if not @colTotals[flatColKey]\n                            @colKeys.push colKey\n                            @colTotals[flatColKey] = @aggregator(this, [], colKey)\n                        @colTotals[flatColKey].push record unless @grouping and rowKey.length\n\n                    if colKey.length != 0 and rowKey.length != 0\n                        if not @tree[flatRowKey]\n                            @tree[flatRowKey] = {}\n                        if not @tree[flatRowKey][flatColKey]\n                            @tree[flatRowKey][flatColKey] = @aggregator(this, rowKey, colKey)\n                        @tree[flatRowKey][flatColKey].push record\n\n        getAggregator: (rowKey, colKey) =>\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n            if rowKey.length == 0 and colKey.length == 0\n                agg = @allTotal\n            else if rowKey.length == 0\n                agg = @colTotals[flatColKey]\n            else if colKey.length == 0\n                agg = @rowTotals[flatRowKey]\n            else\n                agg = @tree[flatRowKey][flatColKey]\n            return agg ? {value: (-> null), format: -> \"\"}\n\n    class GroupingPivotData extends PivotData\n        constructor: (input, opts = {}) ->\n            opts.grouping = true\n            super\n\n\n    #expose these to the outside world\n    $.pivotUtilities = {aggregatorTemplates, aggregators, renderers, derivers, locales,\n        naturalSort, numberFormat, sortAs, PivotData, GroupingPivotData}\n\n    childIndex = (el) -> Array.prototype.indexOf.call el.parentNode.children, el\n\n    childKeysIndices = (keys, n) ->\n        up = if keys[0].length == 1 then 1 else -1\n        len = keys[n].length\n        while (n = n+up; key = keys[n]) and key.length > len\n            if key.length == len+1 then n else continue\n\n    levelKeysIndices = (keys, level) ->\n        (keys.filter (d) -> d.length == level).map keys.indexOf.bind(keys)\n\n    parentKeysIndices = (keys, n) ->\n        console.log keys\n        up = if keys[0].length == 1 then 1 else -1\n        while (len = keys[n].length) > 1\n            while (n = n-up; key = keys[n]) and key.length >= len then\n            n\n\n    getAxis = (table, rows, level) ->\n        if rows\n            table.find(\"thead tr:last-child th.pvtAxisLabel:nth-of-type(#{level})\")\n        else\n            table.find(\"thead tr:nth-child(#{level}) th.pvtAxisLabel\")\n\n    getHeader = (table, rows, n) ->\n       table.find(if rows then \"tbody tr th.row#{n}\" else \"thead th.col#{n}\")\n\n    rowGetter = (table) ->\n        rows = table.find('tbody tr')\n        (n) -> $(rows[n])\n\n    colGetter = (table) ->\n        rows = table.find('tr')\n        (n) -> rows.find(\".col#{n}\")\n\n    showHide = (getter, keys, nth, show) ->\n        for i, n of childKeysIndices keys, nth\n            row = getter(n)\n            fn = if show then $.fn.show else $.fn.hide\n            fn.call row\n            if not row.hasClass('collapsed')\n                showHide getter, keys, n, show\n        true\n\n    expandRowsGroupAfter = (cell, rows, keys, nth) ->\n        table = $(cell).closest('table')\n        initIndex = childIndex cell.parentNode\n        getter = rowGetter table\n        row = getter nth\n\n        insertPoint = if row.hasClass('collapsed') then getter cell._old else row\n        cell._old = childIndex cell.parentNode if not row.hasClass('collapsed')\n        insertPoint.prepend cell\n\n        for i, p of parentKeysIndices keys, nth\n            parent = (getHeader table, rows, p)[0]\n            parentIndex = childIndex parent.parentNode\n            parent._old = parent._old ? parentIndex\n            if parent._old == initIndex and parent.rowSpan == 1\n                parent._old -= initIndex - childIndex cell.parentNode\n\n            insertPoint.prepend parent if initIndex == parentIndex\n\n        expandWithSpan cell, rows, keys, nth\n\n    expandWithSpan = (cell, rows, keys, nth) ->\n        table = $(cell).closest('table')\n        span = if rows then 'rowSpan' else 'colSpan'\n\n        [ cell._span, cell[span] ] = [ cell[span], cell._span ? 1 ]\n        change = cell[span] - cell._span\n\n        for i, p of parentKeysIndices keys, nth\n            parent = (getHeader table, rows, p)[0]\n            if parent[span] == 1\n                parent._span += change\n                break\n            parent[span] += change\n\n        expandRowCol cell, rows, keys, nth, parent\n\n    expandRowCol = (cell, rows, keys, nth, parent) ->\n        table = $(cell).closest('table')\n        getter = if rows then rowGetter table else colGetter table\n        span = if rows then 'rowSpan' else 'colSpan'\n\n        showHide getter, keys, nth, getter(nth).hasClass('collapsed') unless parent?[span] == 1\n        getter(nth).toggleClass 'collapsed'\n        $(cell).toggleClass 'open close'\n\n\n    expandAll = (pivotData, table, level, rows, expand) ->\n        if expand and level > 1\n            getAxis(table, rows, level-1).removeClass('close').addClass('open')\n            expandAll pivotData, table, level-1, rows, expand\n\n        levels = (if rows then pivotData.rowAttrs else pivotData.colAttrs).length - 1\n        if not expand and (level < levels)\n            getAxis(table, rows, i).removeClass('open').addClass('close') for i in [level+1..levels]\n\n        keys = if rows then pivotData.rowKeys else pivotData.colKeys\n        for i, n of levelKeysIndices keys, level\n            el = getHeader table, rows, n\n            el.trigger 'click' if expand == el.hasClass('close')\n        null\n\n    getExpandHandler = (keys, rows, handler) ->\n        (ev) ->\n            match = ev.target.className.match if rows then /row(\\d+)/ else /col(\\d+)/\n            handler ev.target, rows, keys, +match[1] if match\n\n    getExpandAllHandler = (pivotData, level, rows) ->\n        (ev) ->\n            expandAll pivotData, $(ev.target).closest('table'), level+1, rows, $(ev.target).hasClass('close')\n            $(ev.target).toggleClass('open close')\n\n    ###\n    Default Renderer for hierarchical table layout\n    ###\n\n    pivotTableRenderer = (pivotData, opts) ->\n\n        defaults =\n            table:\n                clickCallback: null\n                rowTotals: true\n                colTotals: true\n            localeStrings: totals: \"Totals\"\n\n        opts = $.extend(true, {}, defaults, opts)\n\n        colAttrs = pivotData.colAttrs\n        rowAttrs = pivotData.rowAttrs\n        rowKeys = pivotData.getRowKeys(true)\n        colKeys = pivotData.getColKeys(true)\n\n        if opts.table.clickCallback\n            getClickHandler = (value, rowValues, colValues) ->\n                filters = {}\n                filters[attr] = colValues[i] for own i, attr of colAttrs when colValues[i]?\n                filters[attr] = rowValues[i] for own i, attr of rowAttrs when rowValues[i]?\n                return (e) -> opts.table.clickCallback(e, value, filters, pivotData)\n\n        compactLayout = (opts.table.compactLayout ? true) and pivotData.grouping\n        rowExpandHandler = if compactLayout then expandRowCol else if pivotData.rowGroupBefore then expandWithSpan else expandRowsGroupAfter\n\n        rowsExpandHandler = getExpandHandler rowKeys, true,  rowExpandHandler\n        colsExpandHandler = getExpandHandler colKeys, false, expandWithSpan\n\n        #now actually build the output\n        result = document.createElement(\"table\")\n        result.className = \"pvtTable\"\n        result.pivotData = pivotData\n\n        #helper function for setting row/col-span in pivotTableRenderer\n        spanSize = (arr, i, j) ->\n            if i != 0\n                noDraw = true\n                for x in [0..j]\n                    if arr[i-1][x] != arr[i][x]\n                        noDraw = false\n                if noDraw\n                  return -1 #do not draw cell\n            len = 0\n            while i+len < arr.length\n                stop = false\n                for x in [0..j]\n                    stop = true if arr[i][x] != arr[i+len][x]\n                break if stop\n                len++\n            return len\n\n        #the first few rows are for col headers\n        thead = document.createElement(\"thead\")\n        for own j, c of colAttrs\n            tr = document.createElement(\"tr\")\n            if parseInt(j) == 0 and rowAttrs.length != 0\n                th = document.createElement(\"th\")\n                th.setAttribute(\"colspan\", rowAttrs.length)\n                th.setAttribute(\"rowspan\", colAttrs.length)\n                tr.appendChild th\n            th = document.createElement(\"th\")\n            th.className = \"pvtAxisLabel\"\n            th.textContent = c\n            if j < colAttrs.length - 1\n                th.onclick = getExpandAllHandler pivotData, +j, false\n                th.className += \" open level#{j}\"\n            tr.appendChild th\n            for own i, colKey of colKeys\n                x = spanSize(colKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtColLabel\"\n                    th.className += \" col#{if pivotData.colGroupBefore then +i else +i+x-1}\"\n                    th.textContent = colKey[j]\n                    th.setAttribute(\"colspan\", x)\n                    if parseInt(j) == colAttrs.length-1 and rowAttrs.length != 0\n                        th.setAttribute(\"rowspan\", 2)\n                    if j < colAttrs.length - 1 and colKey[j]\n                        th.className += \" pvtSubtotal open\"\n                        th.onclick = colsExpandHandler\n                    tr.appendChild th\n            if parseInt(j) == 0 && opts.table.rowTotals\n                th = document.createElement(\"th\")\n                th.className = \"pvtTotalLabel pvtRowTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                th.setAttribute(\"rowspan\", colAttrs.length + (if rowAttrs.length ==0 then 0 else 1))\n                tr.appendChild th\n            thead.appendChild tr\n\n        #then a row for row header headers\n        if rowAttrs.length !=0\n            tr = document.createElement(\"tr\")\n            for own i, r of rowAttrs\n                th = document.createElement(\"th\")\n                th.className = \"pvtAxisLabel\"\n                th.textContent = r\n                if i < rowAttrs.length - 1\n                    th.className += \" open level#{i}\"\n                    th.onclick = getExpandAllHandler pivotData, +i, true\n                tr.appendChild th\n            th = document.createElement(\"th\")\n            if colAttrs.length ==0\n                th.className = \"pvtTotalLabel pvtRowTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n            tr.appendChild th\n            thead.appendChild tr\n        result.appendChild thead\n\n        #now the actual data rows, with their row headers and totals\n        tbody = document.createElement(\"tbody\")\n        for own i, rowKey of rowKeys\n            tr = document.createElement(\"tr\")\n            rowGap = rowAttrs.length - rowKey.length\n            tr.className = if rowGap then \"pvtSubtotal level#{rowKey.length}\" else \"pvtData\"\n            for own j, txt of rowKey\n                continue if compactLayout and j < rowKey.length - 1\n                x = if compactLayout then 1 else spanSize(rowKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtRowLabel\"\n                    th.className += \" row#{if pivotData.rowGroupBefore then +i else +i+x-1}\"\n                    th.textContent = txt\n                    th.setAttribute(\"rowspan\", x)\n                    if compactLayout\n                        th.colSpan = rowAttrs.length\n                        th.style.paddingLeft = 5 + parseInt(j) * 20 + 'px'\n                    if j < rowAttrs.length - 1\n                        th.className += \" open\"\n                        th.onclick = rowsExpandHandler\n                    tr.appendChild th\n\n            if !compactLayout and rowGap\n                th = document.createElement(\"th\")\n                th.colSpan = rowGap\n                th.textContent = \"Total (#{rowKey[j]})\"\n                tr.appendChild th\n\n            if colAttrs.length\n                th.colSpan++\n\n            for own j, colKey of colKeys #this is the tight loop\n                aggregator = pivotData.getAggregator(rowKey, colKey)\n                val = aggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtVal row#{i} col#{j}\"\n                if colAttrs.length - colKey.length\n                    td.className = \"pvtSubtotal level#{colKey.length} row#{i} col#{j}\"\n                td.textContent = aggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, rowKey, colKey)\n                tr.appendChild td\n\n            if opts.table.rowTotals || colAttrs.length == 0\n                totalAggregator = pivotData.getAggregator(rowKey, [])\n                val = totalAggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtTotal rowTotal\"\n                td.textContent = totalAggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, rowKey, [])\n                td.setAttribute(\"data-for\", \"row\"+i)\n                tr.appendChild td\n            tbody.appendChild tr\n\n        #finally, the row for col totals, and a grand total\n        if opts.table.colTotals || rowAttrs.length == 0\n            tr = document.createElement(\"tr\")\n            if opts.table.colTotals || rowAttrs.length == 0\n                th = document.createElement(\"th\")\n                th.className = \"pvtTotalLabel pvtColTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                th.setAttribute(\"colspan\", rowAttrs.length + (if colAttrs.length == 0 then 0 else 1))\n                tr.appendChild th\n            for own j, colKey of colKeys\n                totalAggregator = pivotData.getAggregator([], colKey)\n                val = totalAggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtTotal colTotal col#{j}\"\n                td.className += \" pvtSubtotal level#{colKey.length}\" if colKey.length != colAttrs.length\n                td.textContent = totalAggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, [], colKey)\n                td.setAttribute(\"data-for\", \"col\"+j)\n                tr.appendChild td\n            if opts.table.rowTotals || colAttrs.length == 0\n                totalAggregator = pivotData.getAggregator([], [])\n                val = totalAggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtGrandTotal\"\n                td.textContent = totalAggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, [], [])\n                tr.appendChild td\n            tbody.appendChild tr\n        result.appendChild tbody\n\n        #squirrel this away for later\n        result.setAttribute(\"data-numrows\", rowKeys.length)\n        result.setAttribute(\"data-numcols\", colKeys.length)\n\n        return result\n\n    ###\n    Pivot Table core: create PivotData object and call Renderer on it\n    ###\n\n    $.fn.pivot = (input, inputOpts, locale=\"en\") ->\n        locale = \"en\" if not locales[locale]?\n        defaults =\n            cols : [], rows: [], vals: []\n            rowOrder: \"key_a_to_z\", colOrder: \"key_a_to_z\"\n            dataClass: PivotData\n            filter: -> true\n            aggregator: aggregatorTemplates.count()()\n            aggregatorName: \"Count\"\n            sorters: {}\n            derivedAttributes: {}\n            renderer: pivotTableRenderer\n\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings)\n        localeDefaults =\n            rendererOptions: {localeStrings}\n            localeStrings: localeStrings\n\n        opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts))\n\n        result = null\n        try\n            pivotData = new opts.dataClass(input, opts)\n            try\n                result = opts.renderer(pivotData, opts.rendererOptions)\n            catch e\n                console.error(e.stack) if console?\n                result = $(\"<span>\").html opts.localeStrings.renderError\n        catch e\n            console.error(e.stack) if console?\n            result = $(\"<span>\").html opts.localeStrings.computeError\n\n        x = this[0]\n        x.removeChild(x.lastChild) while x.hasChildNodes()\n        return @append result\n\n\n    ###\n    Pivot Table UI: calls Pivot Table core above with options set by user\n    ###\n\n    $.fn.pivotUI = (input, inputOpts, overwrite = false, locale=\"en\") ->\n        locale = \"en\" if not locales[locale]?\n        defaults =\n            derivedAttributes: {}\n            aggregators: locales[locale].aggregators\n            renderers: locales[locale].renderers\n            hiddenAttributes: []\n            hiddenFromAggregators: []\n            hiddenFromDragDrop: []\n            menuLimit: 500\n            cols: [], rows: [], vals: []\n            rowOrder: \"key_a_to_z\", colOrder: \"key_a_to_z\"\n            dataClass: PivotData\n            exclusions: {}\n            inclusions: {}\n            unusedAttrsVertical: 85\n            autoSortUnusedAttrs: false\n            onRefresh: null\n            showUI: true\n            filter: -> true\n            sorters: {}\n\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings)\n        localeDefaults =\n            rendererOptions: {localeStrings}\n            localeStrings: localeStrings\n\n        existingOpts = @data \"pivotUIOptions\"\n        if not existingOpts? or overwrite\n            opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts))\n        else\n            opts = existingOpts\n\n        try\n            # do a first pass on the data to cache a materialized copy of any\n            # function-valued inputs and to compute dimension cardinalities\n            attrValues = {}\n            materializedInput = []\n            recordsProcessed = 0\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) ->\n                return unless opts.filter(record)\n                materializedInput.push(record)\n                for own attr of record\n                    if not attrValues[attr]?\n                        attrValues[attr] = {}\n                        if recordsProcessed > 0\n                            attrValues[attr][\"null\"] = recordsProcessed\n                for attr of attrValues\n                    value = record[attr] ? \"null\"\n                    attrValues[attr][value] ?= 0\n                    attrValues[attr][value]++\n                recordsProcessed++\n\n            #start building the output\n            uiTable = $(\"<table>\", \"class\": \"pvtUi\").attr(\"cellpadding\", 5)\n\n            #renderer control\n            rendererControl = $(\"<td>\").addClass(\"pvtUiCell\")\n\n            renderer = $(\"<select>\")\n                .addClass('pvtRenderer')\n                .appendTo(rendererControl)\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.renderers\n                $(\"<option>\").val(x).html(x).appendTo(renderer)\n\n\n            #axis list, including the double-click menu\n            unused = $(\"<td>\").addClass('pvtAxisContainer pvtUnused pvtUiCell')\n            shownAttributes = (a for a of attrValues when a not in opts.hiddenAttributes)\n            shownInAggregators = (c for c in shownAttributes when c not in opts.hiddenFromAggregators)\n            shownInDragDrop = (c for c in shownAttributes when c not in opts.hiddenFromDragDrop)\n\n\n            unusedAttrsVerticalAutoOverride = false\n            if opts.unusedAttrsVertical == \"auto\"\n                unusedAttrsVerticalAutoCutoff = 120 # legacy support\n            else\n                unusedAttrsVerticalAutoCutoff = parseInt opts.unusedAttrsVertical\n\n            if not isNaN(unusedAttrsVerticalAutoCutoff)\n                attrLength = 0\n                attrLength += a.length for a in shownInDragDrop\n                unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff\n\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                unused.addClass('pvtVertList')\n            else\n                unused.addClass('pvtHorizList')\n\n            for own i, attr of shownInDragDrop\n                do (attr) ->\n                    values = (v for v of attrValues[attr])\n                    hasExcludedItem = false\n                    valueList = $(\"<div>\").addClass('pvtFilterBox').hide()\n\n                    valueList.append $(\"<h4>\").append(\n                        $(\"<span>\").text(attr),\n                        $(\"<span>\").addClass(\"count\").text(\"(#{values.length})\"),\n                        )\n                    if values.length > opts.menuLimit\n                        valueList.append $(\"<p>\").html(opts.localeStrings.tooMany)\n                    else\n                        if values.length > 5\n                            controls = $(\"<p>\").appendTo(valueList)\n                            sorter = getSort(opts.sorters, attr)\n                            placeholder = opts.localeStrings.filterResults\n                            $(\"<input>\", {type: \"text\"}).appendTo(controls)\n                                .attr({placeholder: placeholder, class: \"pvtSearch\"})\n                                .bind \"keyup\", ->\n                                    filter = $(this).val().toLowerCase().trim()\n                                    accept_gen = (prefix, accepted) -> (v) ->\n                                        real_filter = filter.substring(prefix.length).trim()\n                                        return true if real_filter.length == 0\n                                        return Math.sign(sorter(v.toLowerCase(), real_filter)) in accepted\n                                    accept =\n                                        if      filter.indexOf(\">=\") == 0 then accept_gen(\">=\", [1,0])\n                                        else if filter.indexOf(\"<=\") == 0 then accept_gen(\"<=\", [-1,0])\n                                        else if filter.indexOf(\">\") == 0  then accept_gen(\">\",  [1])\n                                        else if filter.indexOf(\"<\") == 0  then accept_gen(\"<\",  [-1])\n                                        else if filter.indexOf(\"~\") == 0  then (v) ->\n                                                return true if filter.substring(1).trim().length == 0\n                                                v.toLowerCase().match(filter.substring(1))\n                                        else (v) -> v.toLowerCase().indexOf(filter) != -1\n\n                                    valueList.find('.pvtCheckContainer p label span.value').each ->\n                                        if accept($(this).text())\n                                            $(this).parent().parent().show()\n                                        else\n                                            $(this).parent().parent().hide()\n                            controls.append $(\"<br>\")\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\n                                .html(opts.localeStrings.selectAll)\n                                .bind \"click\", ->\n                                    valueList.find(\"input:visible:not(:checked)\")\n                                        .prop(\"checked\", true).toggleClass(\"changed\")\n                                    return false\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\n                                .html(opts.localeStrings.selectNone)\n                                .bind \"click\", ->\n                                    valueList.find(\"input:visible:checked\")\n                                        .prop(\"checked\", false).toggleClass(\"changed\")\n                                    return false\n\n                        checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList)\n\n                        for value in values.sort(getSort(opts.sorters, attr))\n                             valueCount = attrValues[attr][value]\n                             filterItem = $(\"<label>\")\n                             filterItemExcluded = false\n                             if opts.inclusions[attr]\n                                filterItemExcluded = (value not in opts.inclusions[attr])\n                             else if opts.exclusions[attr]\n                                filterItemExcluded = (value in opts.exclusions[attr])\n                             hasExcludedItem ||= filterItemExcluded\n                             $(\"<input>\")\n                                .attr(\"type\", \"checkbox\").addClass('pvtFilter')\n                                .attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr,value])\n                                .appendTo(filterItem)\n                                .bind \"change\", -> $(this).toggleClass(\"changed\")\n                             filterItem.append $(\"<span>\").addClass(\"value\").text(value)\n                             filterItem.append $(\"<span>\").addClass(\"count\").text(\"(\"+valueCount+\")\")\n                             checkContainer.append $(\"<p>\").append(filterItem)\n\n                    closeFilterBox = ->\n                        if valueList.find(\"[type='checkbox']\").length >\n                               valueList.find(\"[type='checkbox']:checked\").length\n                                attrElem.addClass \"pvtFilteredAttribute\"\n                            else\n                                attrElem.removeClass \"pvtFilteredAttribute\"\n\n                            valueList.find('.pvtSearch').val('')\n                            valueList.find('.pvtCheckContainer p').show()\n                            valueList.hide()\n\n                    finalButtons = $(\"<p>\").appendTo(valueList)\n\n                    if values.length <= opts.menuLimit\n                        $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.apply)\n                            .appendTo(finalButtons).bind \"click\", ->\n                                if valueList.find(\".changed\").removeClass(\"changed\").length\n                                    refresh()\n                                closeFilterBox()\n\n                    $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.cancel)\n                        .appendTo(finalButtons).bind \"click\", ->\n                            valueList.find(\".changed:checked\")\n                                .removeClass(\"changed\").prop(\"checked\", false)\n                            valueList.find(\".changed:not(:checked)\")\n                                .removeClass(\"changed\").prop(\"checked\", true)\n                            closeFilterBox()\n\n                    triangleLink = $(\"<span>\").addClass('pvtTriangle')\n                        .html(\" &#x25BE;\").bind \"click\", (e) ->\n                            {left, top} = $(e.currentTarget).position()\n                            valueList.css(left: left+10, top: top+10).show()\n\n                    attrElem = $(\"<li>\").addClass(\"axis_#{i}\")\n                        .append $(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink)\n\n                    attrElem.addClass('pvtFilteredAttribute') if hasExcludedItem\n                    unused.append(attrElem).append(valueList)\n\n            tr1 = $(\"<tr>\").appendTo(uiTable)\n\n            #aggregator menu and value area\n\n            aggregator = $(\"<select>\").addClass('pvtAggregator')\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.aggregators\n                aggregator.append $(\"<option>\").val(x).html(x)\n\n            ordering =\n                key_a_to_z:   {rowSymbol: \"&varr;\", colSymbol: \"&harr;\", next: \"value_a_to_z\"}\n                value_a_to_z: {rowSymbol: \"&darr;\", colSymbol: \"&rarr;\", next: \"value_z_to_a\"}\n                value_z_to_a: {rowSymbol: \"&uarr;\", colSymbol: \"&larr;\", next: \"key_a_to_z\"}\n\n            rowOrderArrow = $(\"<a>\", role: \"button\").addClass(\"pvtRowOrder\")\n                .data(\"order\", opts.rowOrder).html(ordering[opts.rowOrder].rowSymbol)\n                .bind \"click\", ->\n                    $(this).data(\"order\", ordering[$(this).data(\"order\")].next)\n                    $(this).html(ordering[$(this).data(\"order\")].rowSymbol)\n                    refresh()\n\n            colOrderArrow = $(\"<a>\", role: \"button\").addClass(\"pvtColOrder\")\n                .data(\"order\", opts.colOrder).html(ordering[opts.colOrder].colSymbol)\n                .bind \"click\", ->\n                    $(this).data(\"order\", ordering[$(this).data(\"order\")].next)\n                    $(this).html(ordering[$(this).data(\"order\")].colSymbol)\n                    refresh()\n\n            $(\"<td>\").addClass('pvtVals pvtUiCell')\n              .appendTo(tr1)\n              .append(aggregator)\n              .append(rowOrderArrow)\n              .append(colOrderArrow)\n              .append($(\"<br>\"))\n\n            #column axes\n            $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols pvtUiCell').appendTo(tr1)\n\n            tr2 = $(\"<tr>\").appendTo(uiTable)\n\n            #row axes\n            tr2.append $(\"<td>\").addClass('pvtAxisContainer pvtRows pvtUiCell').attr(\"valign\", \"top\")\n\n            #the actual pivot table container\n            pivotTable = $(\"<td>\")\n                .attr(\"valign\", \"top\")\n                .addClass('pvtRendererArea')\n                .appendTo(tr2)\n\n            #finally the renderer dropdown and unused attribs are inserted at the requested location\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                uiTable.find('tr:nth-child(1)').prepend rendererControl\n                uiTable.find('tr:nth-child(2)').prepend unused\n            else\n                uiTable.prepend $(\"<tr>\").append(rendererControl).append(unused)\n\n            #render the UI in its default state\n            @html uiTable\n\n            #set up the UI initial state as requested by moving elements around\n\n            for x in opts.cols\n                @find(\".pvtCols\").append @find(\".axis_#{$.inArray(x, shownInDragDrop)}\")\n            for x in opts.rows\n                @find(\".pvtRows\").append @find(\".axis_#{$.inArray(x, shownInDragDrop)}\")\n            if opts.aggregatorName?\n                @find(\".pvtAggregator\").val opts.aggregatorName\n            if opts.rendererName?\n                @find(\".pvtRenderer\").val opts.rendererName\n\n            @find(\".pvtUiCell\").hide() unless opts.showUI\n\n            initialRender = true\n\n            #set up for refreshing\n            refreshDelayed = =>\n                subopts =\n                    derivedAttributes: opts.derivedAttributes\n                    localeStrings: opts.localeStrings\n                    rendererOptions: opts.rendererOptions\n                    sorters: opts.sorters\n                    cols: [], rows: []\n                    dataClass: opts.dataClass\n\n                numInputsToProcess = opts.aggregators[aggregator.val()]([])().numInputs ? 0\n                vals = []\n                @find(\".pvtRows li span.pvtAttr\").each -> subopts.rows.push $(this).data(\"attrName\")\n                @find(\".pvtCols li span.pvtAttr\").each -> subopts.cols.push $(this).data(\"attrName\")\n                @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                    if numInputsToProcess == 0\n                        $(this).remove()\n                    else\n                        numInputsToProcess--\n                        vals.push $(this).val() if $(this).val() != \"\"\n\n                if numInputsToProcess != 0\n                    pvtVals = @find(\".pvtVals\")\n                    for x in [0...numInputsToProcess]\n                        newDropdown = $(\"<select>\")\n                            .addClass('pvtAttrDropdown')\n                            .append($(\"<option>\"))\n                            .bind \"change\", -> refresh()\n                        for attr in shownInAggregators\n                            newDropdown.append($(\"<option>\").val(attr).text(attr))\n                        pvtVals.append(newDropdown)\n\n                if initialRender\n                    vals = opts.vals\n                    i = 0\n                    @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                        $(this).val vals[i]\n                        i++\n                    initialRender = false\n\n                subopts.aggregatorName = aggregator.val()\n                subopts.vals = vals\n                subopts.aggregator = opts.aggregators[aggregator.val()](vals)\n                subopts.renderer = opts.renderers[renderer.val()]\n                subopts.rowOrder = rowOrderArrow.data(\"order\")\n                subopts.colOrder = colOrderArrow.data(\"order\")\n                #construct filter here\n                exclusions = {}\n                @find('input.pvtFilter').not(':checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        exclusions[filter[0]].push( filter[1] )\n                    else\n                        exclusions[filter[0]] = [ filter[1] ]\n                #include inclusions when exclusions present\n                inclusions = {}\n                @find('input.pvtFilter:checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        if inclusions[filter[0]]?\n                            inclusions[filter[0]].push( filter[1] )\n                        else\n                            inclusions[filter[0]] = [ filter[1] ]\n\n                subopts.filter = (record) ->\n                    return false if not opts.filter(record)\n                    for k,excludedItems of exclusions\n                        return false if \"\"+(record[k] ? 'null') in excludedItems\n                    return true\n\n                pivotTable.pivot(materializedInput,subopts)\n                pivotUIOptions = $.extend {}, opts,\n                    cols: subopts.cols\n                    rows: subopts.rows\n                    colOrder: subopts.colOrder\n                    rowOrder: subopts.rowOrder\n                    vals: vals\n                    exclusions: exclusions\n                    inclusions: inclusions\n                    inclusionsInfo: inclusions #duplicated for backwards-compatibility\n                    aggregatorName: aggregator.val()\n                    rendererName: renderer.val()\n\n                @data \"pivotUIOptions\", pivotUIOptions\n\n                # if requested make sure unused columns are in alphabetical order\n                if opts.autoSortUnusedAttrs\n                    unusedAttrsContainer = @find(\"td.pvtUnused.pvtAxisContainer\")\n                    $(unusedAttrsContainer).children(\"li\")\n                        .sort((a, b) => naturalSort($(a).text(), $(b).text()))\n                        .appendTo unusedAttrsContainer\n\n                pivotTable.css(\"opacity\", 1)\n                opts.onRefresh(pivotUIOptions) if opts.onRefresh?\n\n            refresh = =>\n                pivotTable.css(\"opacity\", 0.5)\n                setTimeout refreshDelayed, 10\n\n            #the very first refresh will actually display the table\n            refresh()\n\n            @find(\".pvtAxisContainer\").sortable\n                    update: (e, ui) -> refresh() if not ui.sender?\n                    connectWith: @find(\".pvtAxisContainer\")\n                    items: 'li'\n                    placeholder: 'pvtPlaceholder'\n        catch e\n            console.error(e.stack) if console?\n            @html opts.localeStrings.uiRenderError\n        return this\n\n    ###\n    Heatmap post-processing\n    ###\n\n    $.fn.heatmap = (scope = \"heatmap\", opts) ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        # given a series of values\n        # must return a function to map a given value to a CSS color\n        colorScaleGenerator = opts?.heatmap?.colorScaleGenerator\n        colorScaleGenerator ?= (values) ->\n            min = Math.min(values...)\n            max = Math.max(values...)\n            return (x) ->\n                nonRed = 255 - Math.round 255*(x-min)/(max-min)\n                return \"rgb(255,#{nonRed},#{nonRed})\"\n\n        heatmapper = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            colorScale = colorScaleGenerator(values)\n            forEachCell (x, elem) -> elem.css \"background-color\", colorScale(x)\n\n        switch scope\n            when \"heatmap\"    then heatmapper \".pvtVal\"\n            when \"rowheatmap\" then heatmapper \".pvtVal.row#{i}\" for i in [0...numRows]\n            when \"colheatmap\" then heatmapper \".pvtVal.col#{j}\" for j in [0...numCols]\n\n        heatmapper \".pvtTotal.rowTotal\"\n        heatmapper \".pvtTotal.colTotal\"\n\n        return this\n\n    ###\n    Barchart post-processing\n    ###\n\n    $.fn.barchart = (opts) ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        barcharter = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            max = Math.max(values...)\n            if max < 0\n                max = 0\n            range = max;\n            min = Math.min(values...)\n            if min < 0\n                range = max - min\n            scaler = (x) -> 100*x/(1.4*range)\n            forEachCell (x, elem) ->\n                text = elem.text()\n                wrapper = $(\"<div>\").css\n                    \"position\": \"relative\"\n                    \"height\": \"55px\"\n                bgColor = \"gray\"\n                bBase = 0\n                if min < 0\n                    bBase = scaler(-min)\n                if x < 0\n                    bBase += scaler(x)\n                    bgColor = \"darkred\"\n                    x = -x\n                wrapper.append $(\"<div>\").css\n                    \"position\": \"absolute\"\n                    \"bottom\": bBase + \"%\"\n                    \"left\": 0\n                    \"right\": 0\n                    \"height\": scaler(x) + \"%\"\n                    \"background-color\": bgColor\n                wrapper.append $(\"<div>\").text(text).css\n                    \"position\":\"relative\"\n                    \"padding-left\":\"5px\"\n                    \"padding-right\":\"5px\"\n\n                elem.css(\"padding\": 0,\"padding-top\": \"5px\", \"text-align\": \"center\").html wrapper\n\n        barcharter \".pvtVal.row#{i}\" for i in [0...numRows]\n        barcharter \".pvtTotal.colTotal\"\n\n        return this\n","(function() {\n  var callWithJQuery,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n    slice = [].slice,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    hasProp = {}.hasOwnProperty,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  callWithJQuery = function(pivotModule) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return pivotModule(require(\"jquery\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\"], pivotModule);\n    } else {\n      return pivotModule(jQuery);\n    }\n  };\n\n  callWithJQuery(function($) {\n\n    /*\n    Utilities\n     */\n    var GroupingPivotData, PivotData, addSeparators, aggregatorTemplates, aggregators, childIndex, childKeysIndices, colGetter, dayNamesEn, derivers, expandAll, expandRowCol, expandRowsGroupAfter, expandWithSpan, getAxis, getExpandAllHandler, getExpandHandler, getHeader, getSort, levelKeysIndices, locales, mthNamesEn, naturalSort, numberFormat, parentKeysIndices, pivotTableRenderer, rd, renderers, rowGetter, rx, rz, showHide, sortAs, usFmt, usFmtInt, usFmtPct, zeroPad;\n    addSeparators = function(nStr, thousandsSep, decimalSep) {\n      var rgx, x, x1, x2;\n      nStr += '';\n      x = nStr.split('.');\n      x1 = x[0];\n      x2 = x.length > 1 ? decimalSep + x[1] : '';\n      rgx = /(\\d+)(\\d{3})/;\n      while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2');\n      }\n      return x1 + x2;\n    };\n    numberFormat = function(opts) {\n      var defaults;\n      defaults = {\n        digitsAfterDecimal: 2,\n        scaler: 1,\n        thousandsSep: \",\",\n        decimalSep: \".\",\n        prefix: \"\",\n        suffix: \"\"\n      };\n      opts = $.extend({}, defaults, opts);\n      return function(x) {\n        var result;\n        if (isNaN(x) || !isFinite(x)) {\n          return \"\";\n        }\n        result = addSeparators((opts.scaler * x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep);\n        return \"\" + opts.prefix + result + opts.suffix;\n      };\n    };\n    usFmt = numberFormat();\n    usFmtInt = numberFormat({\n      digitsAfterDecimal: 0\n    });\n    usFmtPct = numberFormat({\n      digitsAfterDecimal: 1,\n      scaler: 100,\n      suffix: \"%\"\n    });\n    aggregatorTemplates = {\n      count: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function() {\n          return function(data, rowKey, colKey) {\n            return {\n              count: 0,\n              push: function() {\n                return this.count++;\n              },\n              value: function() {\n                return this.count;\n              },\n              format: formatter\n            };\n          };\n        };\n      },\n      uniques: function(fn, formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return fn(this.uniq);\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  return this.sum += parseFloat(record[attr]);\n                }\n              },\n              value: function() {\n                return this.sum;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      extremes: function(mode, formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              sorter: getSort(data != null ? data.sorters : void 0, attr),\n              push: function(record) {\n                var ref, ref1, ref2, x;\n                x = record[attr];\n                if (mode === \"min\" || mode === \"max\") {\n                  x = parseFloat(x);\n                  if (!isNaN(x)) {\n                    this.val = Math[mode](x, (ref = this.val) != null ? ref : x);\n                  }\n                }\n                if (mode === \"first\") {\n                  if (this.sorter(x, (ref1 = this.val) != null ? ref1 : x) <= 0) {\n                    this.val = x;\n                  }\n                }\n                if (mode === \"last\") {\n                  if (this.sorter(x, (ref2 = this.val) != null ? ref2 : x) >= 0) {\n                    return this.val = x;\n                  }\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: function(x) {\n                if (isNaN(x)) {\n                  return x;\n                } else {\n                  return formatter(x);\n                }\n              },\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      quantile: function(q, formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              vals: [],\n              push: function(record) {\n                var x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.vals.push(x);\n                }\n              },\n              value: function() {\n                var i;\n                if (this.vals.length === 0) {\n                  return null;\n                }\n                this.vals.sort(function(a, b) {\n                  return a - b;\n                });\n                i = (this.vals.length - 1) * q;\n                return (this.vals[Math.floor(i)] + this.vals[Math.ceil(i)]) / 2.0;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      runningStat: function(mode, ddof, formatter) {\n        if (mode == null) {\n          mode = \"mean\";\n        }\n        if (ddof == null) {\n          ddof = 1;\n        }\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              n: 0.0,\n              m: 0.0,\n              s: 0.0,\n              push: function(record) {\n                var m_new, x;\n                x = parseFloat(record[attr]);\n                if (isNaN(x)) {\n                  return;\n                }\n                this.n += 1.0;\n                if (this.n === 1.0) {\n                  return this.m = x;\n                } else {\n                  m_new = this.m + (x - this.m) / this.n;\n                  this.s = this.s + (x - this.m) * (x - m_new);\n                  return this.m = m_new;\n                }\n              },\n              value: function() {\n                if (mode === \"mean\") {\n                  if (this.n === 0) {\n                    return 0 / 0;\n                  } else {\n                    return this.m;\n                  }\n                }\n                if (this.n <= ddof) {\n                  return 0;\n                }\n                switch (mode) {\n                  case \"var\":\n                    return this.s / (this.n - ddof);\n                  case \"stdev\":\n                    return Math.sqrt(this.s / (this.n - ddof));\n                }\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sumOverSum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                return this.sumNum / this.sumDenom;\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      sumOverSumBound80: function(upper, formatter) {\n        if (upper == null) {\n          upper = true;\n        }\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                var sign;\n                sign = upper ? 1 : -1;\n                return (0.821187207574908 / this.sumDenom + this.sumNum / this.sumDenom + 1.2815515655446004 * sign * Math.sqrt(0.410593603787454 / (this.sumDenom * this.sumDenom) + (this.sumNum * (1 - this.sumNum / this.sumDenom)) / (this.sumDenom * this.sumDenom))) / (1 + 1.642374415149816 / this.sumDenom);\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      fractionOf: function(wrapped, type, formatter) {\n        if (type == null) {\n          type = \"total\";\n        }\n        if (formatter == null) {\n          formatter = usFmtPct;\n        }\n        return function() {\n          var x;\n          x = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return function(data, rowKey, colKey) {\n            return {\n              selector: {\n                total: [[], []],\n                row: [rowKey, []],\n                col: [[], colKey]\n              }[type],\n              inner: wrapped.apply(null, x)(data, rowKey, colKey),\n              push: function(record) {\n                return this.inner.push(record);\n              },\n              format: formatter,\n              value: function() {\n                return this.inner.value() / data.getAggregator.apply(data, this.selector).inner.value();\n              },\n              numInputs: wrapped.apply(null, x)().numInputs\n            };\n          };\n        };\n      }\n    };\n    aggregatorTemplates.countUnique = function(f) {\n      return aggregatorTemplates.uniques((function(x) {\n        return x.length;\n      }), f);\n    };\n    aggregatorTemplates.listUnique = function(s) {\n      return aggregatorTemplates.uniques((function(x) {\n        return x.sort(naturalSort).join(s);\n      }), (function(x) {\n        return x;\n      }));\n    };\n    aggregatorTemplates.max = function(f) {\n      return aggregatorTemplates.extremes('max', f);\n    };\n    aggregatorTemplates.min = function(f) {\n      return aggregatorTemplates.extremes('min', f);\n    };\n    aggregatorTemplates.first = function(f) {\n      return aggregatorTemplates.extremes('first', f);\n    };\n    aggregatorTemplates.last = function(f) {\n      return aggregatorTemplates.extremes('last', f);\n    };\n    aggregatorTemplates.median = function(f) {\n      return aggregatorTemplates.quantile(0.5, f);\n    };\n    aggregatorTemplates.average = function(f) {\n      return aggregatorTemplates.runningStat(\"mean\", 1, f);\n    };\n    aggregatorTemplates[\"var\"] = function(ddof, f) {\n      return aggregatorTemplates.runningStat(\"var\", ddof, f);\n    };\n    aggregatorTemplates.stdev = function(ddof, f) {\n      return aggregatorTemplates.runningStat(\"stdev\", ddof, f);\n    };\n    aggregators = (function(tpl) {\n      return {\n        \"Count\": tpl.count(usFmtInt),\n        \"Count Unique Values\": tpl.countUnique(usFmtInt),\n        \"List Unique Values\": tpl.listUnique(\", \"),\n        \"Sum\": tpl.sum(usFmt),\n        \"Integer Sum\": tpl.sum(usFmtInt),\n        \"Average\": tpl.average(usFmt),\n        \"Median\": tpl.median(usFmt),\n        \"Sample Variance\": tpl[\"var\"](1, usFmt),\n        \"Sample Standard Deviation\": tpl.stdev(1, usFmt),\n        \"Minimum\": tpl.min(usFmt),\n        \"Maximum\": tpl.max(usFmt),\n        \"First\": tpl.first(usFmt),\n        \"Last\": tpl.last(usFmt),\n        \"Sum over Sum\": tpl.sumOverSum(usFmt),\n        \"80% Upper Bound\": tpl.sumOverSumBound80(true, usFmt),\n        \"80% Lower Bound\": tpl.sumOverSumBound80(false, usFmt),\n        \"Sum as Fraction of Total\": tpl.fractionOf(tpl.sum(), \"total\", usFmtPct),\n        \"Sum as Fraction of Rows\": tpl.fractionOf(tpl.sum(), \"row\", usFmtPct),\n        \"Sum as Fraction of Columns\": tpl.fractionOf(tpl.sum(), \"col\", usFmtPct),\n        \"Count as Fraction of Total\": tpl.fractionOf(tpl.count(), \"total\", usFmtPct),\n        \"Count as Fraction of Rows\": tpl.fractionOf(tpl.count(), \"row\", usFmtPct),\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\", usFmtPct)\n      };\n    })(aggregatorTemplates);\n    renderers = {\n      \"Table\": function(data, opts) {\n        return pivotTableRenderer(data, opts);\n      },\n      \"Table Barchart\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).barchart();\n      },\n      \"Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\", opts);\n      },\n      \"Row Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts);\n      },\n      \"Col Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts);\n      }\n    };\n    locales = {\n      en: {\n        aggregators: aggregators,\n        renderers: renderers,\n        localeStrings: {\n          renderError: \"An error occurred rendering the PivotTable results.\",\n          computeError: \"An error occurred computing the PivotTable results.\",\n          uiRenderError: \"An error occurred rendering the PivotTable UI.\",\n          selectAll: \"Select All\",\n          selectNone: \"Select None\",\n          tooMany: \"(too many to list)\",\n          filterResults: \"Filter values\",\n          apply: \"Apply\",\n          cancel: \"Cancel\",\n          totals: \"Totals\",\n          vs: \"vs\",\n          by: \"by\"\n        }\n      }\n    };\n    mthNamesEn = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    dayNamesEn = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    zeroPad = function(number) {\n      return (\"0\" + number).substr(-2, 2);\n    };\n    derivers = {\n      bin: function(col, binWidth) {\n        return function(record) {\n          return record[col] - record[col] % binWidth;\n        };\n      },\n      dateFormat: function(col, formatString, utcOutput, mthNames, dayNames) {\n        var utc;\n        if (utcOutput == null) {\n          utcOutput = false;\n        }\n        if (mthNames == null) {\n          mthNames = mthNamesEn;\n        }\n        if (dayNames == null) {\n          dayNames = dayNamesEn;\n        }\n        utc = utcOutput ? \"UTC\" : \"\";\n        return function(record) {\n          var date;\n          date = new Date(Date.parse(record[col]));\n          if (isNaN(date)) {\n            return \"\";\n          }\n          return formatString.replace(/%(.)/g, function(m, p) {\n            switch (p) {\n              case \"y\":\n                return date[\"get\" + utc + \"FullYear\"]();\n              case \"m\":\n                return zeroPad(date[\"get\" + utc + \"Month\"]() + 1);\n              case \"n\":\n                return mthNames[date[\"get\" + utc + \"Month\"]()];\n              case \"d\":\n                return zeroPad(date[\"get\" + utc + \"Date\"]());\n              case \"w\":\n                return dayNames[date[\"get\" + utc + \"Day\"]()];\n              case \"x\":\n                return date[\"get\" + utc + \"Day\"]();\n              case \"H\":\n                return zeroPad(date[\"get\" + utc + \"Hours\"]());\n              case \"M\":\n                return zeroPad(date[\"get\" + utc + \"Minutes\"]());\n              case \"S\":\n                return zeroPad(date[\"get\" + utc + \"Seconds\"]());\n              default:\n                return \"%\" + p;\n            }\n          });\n        };\n      }\n    };\n    rx = /(\\d+)|(\\D+)/g;\n    rd = /\\d/;\n    rz = /^0/;\n    naturalSort = (function(_this) {\n      return function(as, bs, nulls_first) {\n        var a, a1, b, b1, nas, nbs, nf;\n        if (nulls_first == null) {\n          nulls_first = true;\n        }\n        nf = nulls_first ? 1 : -1;\n        if ((bs != null) && (as == null)) {\n          return -1 * nf;\n        }\n        if ((as != null) && (bs == null)) {\n          return 1 * nf;\n        }\n        if (typeof as === \"number\" && isNaN(as)) {\n          return -1;\n        }\n        if (typeof bs === \"number\" && isNaN(bs)) {\n          return 1;\n        }\n        nas = +as;\n        nbs = +bs;\n        if (nas < nbs) {\n          return -1;\n        }\n        if (nas > nbs) {\n          return 1;\n        }\n        if (typeof as === \"number\" && typeof bs !== \"number\") {\n          return -1;\n        }\n        if (typeof bs === \"number\" && typeof as !== \"number\") {\n          return 1;\n        }\n        if (typeof as === \"number\" && typeof bs === \"number\") {\n          return 0;\n        }\n        if (isNaN(nbs) && !isNaN(nas)) {\n          return -1;\n        }\n        if (isNaN(nas) && !isNaN(nbs)) {\n          return 1;\n        }\n        a = String(as);\n        b = String(bs);\n        if (a === b) {\n          return 0;\n        }\n        if (!(rd.test(a) && rd.test(b))) {\n          return (a > b ? 1 : -1);\n        }\n        a = a.match(rx);\n        b = b.match(rx);\n        while (a.length && b.length) {\n          a1 = a.shift();\n          b1 = b.shift();\n          if (a1 !== b1) {\n            if (rd.test(a1) && rd.test(b1)) {\n              return a1.replace(rz, \".0\") - b1.replace(rz, \".0\");\n            } else {\n              return (a1 > b1 ? 1 : -1);\n            }\n          }\n        }\n        return a.length - b.length;\n      };\n    })(this);\n    sortAs = function(order) {\n      var i, l_mapping, mapping, x;\n      mapping = {};\n      l_mapping = {};\n      for (i in order) {\n        x = order[i];\n        mapping[x] = i;\n        if (typeof x === \"string\") {\n          l_mapping[x.toLowerCase()] = i;\n        }\n      }\n      return function(a, b) {\n        if ((mapping[a] != null) && (mapping[b] != null)) {\n          return mapping[a] - mapping[b];\n        } else if (mapping[a] != null) {\n          return -1;\n        } else if (mapping[b] != null) {\n          return 1;\n        } else if ((l_mapping[a] != null) && (l_mapping[b] != null)) {\n          return l_mapping[a] - l_mapping[b];\n        } else if (l_mapping[a] != null) {\n          return -1;\n        } else if (l_mapping[b] != null) {\n          return 1;\n        } else {\n          return naturalSort(a, b);\n        }\n      };\n    };\n    getSort = function(sorters, attr) {\n      var sort;\n      if (sorters != null) {\n        if ($.isFunction(sorters)) {\n          sort = sorters(attr);\n          if ($.isFunction(sort)) {\n            return sort;\n          }\n        } else if (sorters[attr] != null) {\n          return sorters[attr];\n        }\n      }\n      return naturalSort;\n    };\n\n    /*\n    Data Model class\n     */\n    PivotData = (function() {\n      function PivotData(input, opts) {\n        var ref, ref1, ref10, ref11, ref12, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;\n        if (opts == null) {\n          opts = {};\n        }\n        this.getAggregator = bind(this.getAggregator, this);\n        this.getRowKeys = bind(this.getRowKeys, this);\n        this.getColKeys = bind(this.getColKeys, this);\n        this.sortKeys = bind(this.sortKeys, this);\n        this.arrSort = bind(this.arrSort, this);\n        this.input = input;\n        this.aggregator = (ref = opts.aggregator) != null ? ref : aggregatorTemplates.count()();\n        this.aggregatorName = (ref1 = opts.aggregatorName) != null ? ref1 : \"Count\";\n        this.colAttrs = (ref2 = opts.cols) != null ? ref2 : [];\n        this.rowAttrs = (ref3 = opts.rows) != null ? ref3 : [];\n        this.valAttrs = (ref4 = opts.vals) != null ? ref4 : [];\n        this.sorters = (ref5 = opts.sorters) != null ? ref5 : {};\n        this.rowOrder = (ref6 = opts.rowOrder) != null ? ref6 : \"key_a_to_z\";\n        this.colOrder = (ref7 = opts.colOrder) != null ? ref7 : \"key_a_to_z\";\n        this.derivedAttributes = (ref8 = opts.derivedAttributes) != null ? ref8 : {};\n        this.filter = (ref9 = opts.filter) != null ? ref9 : (function() {\n          return true;\n        });\n        this.tree = {};\n        this.rowKeys = [];\n        this.colKeys = [];\n        this.rowTotals = {};\n        this.colTotals = {};\n        this.allTotal = this.aggregator(this, [], []);\n        this.sorted = false;\n        this.grouping = (ref10 = opts.grouping) != null ? ref10 : false;\n        this.rowGroupBefore = (ref11 = opts.rowGroupBefore) != null ? ref11 : true;\n        this.colGroupBefore = (ref12 = opts.colGroupBefore) != null ? ref12 : false;\n        PivotData.forEachRecord(this.input, this.derivedAttributes, (function(_this) {\n          return function(record) {\n            if (_this.filter(record)) {\n              return _this.processRecord(record);\n            }\n          };\n        })(this));\n      }\n\n      PivotData.forEachRecord = function(input, derivedAttributes, f) {\n        var addRecord, compactRecord, i, j, k, len1, o, record, ref, results, results1, tblCols;\n        if ($.isEmptyObject(derivedAttributes)) {\n          addRecord = f;\n        } else {\n          addRecord = function(record) {\n            var k, ref, v;\n            for (k in derivedAttributes) {\n              v = derivedAttributes[k];\n              record[k] = (ref = v(record)) != null ? ref : record[k];\n            }\n            return f(record);\n          };\n        }\n        if ($.isFunction(input)) {\n          return input(addRecord);\n        } else if ($.isArray(input)) {\n          if ($.isArray(input[0])) {\n            results = [];\n            for (i in input) {\n              if (!hasProp.call(input, i)) continue;\n              compactRecord = input[i];\n              if (!(i > 0)) {\n                continue;\n              }\n              record = {};\n              ref = input[0];\n              for (j in ref) {\n                if (!hasProp.call(ref, j)) continue;\n                k = ref[j];\n                record[k] = compactRecord[j];\n              }\n              results.push(addRecord(record));\n            }\n            return results;\n          } else {\n            results1 = [];\n            for (o = 0, len1 = input.length; o < len1; o++) {\n              record = input[o];\n              results1.push(addRecord(record));\n            }\n            return results1;\n          }\n        } else if (input instanceof $) {\n          tblCols = [];\n          $(\"thead > tr > th\", input).each(function(i) {\n            return tblCols.push($(this).text());\n          });\n          return $(\"tbody > tr\", input).each(function(i) {\n            record = {};\n            $(\"td\", this).each(function(j) {\n              return record[tblCols[j]] = $(this).text();\n            });\n            return addRecord(record);\n          });\n        } else {\n          throw new Error(\"unknown input format\");\n        }\n      };\n\n      PivotData.prototype.forEachMatchingRecord = function(criteria, callback) {\n        return PivotData.forEachRecord(this.input, this.derivedAttributes, (function(_this) {\n          return function(record) {\n            var k, ref, v;\n            if (!_this.filter(record)) {\n              return;\n            }\n            for (k in criteria) {\n              v = criteria[k];\n              if (v !== ((ref = record[k]) != null ? ref : \"null\")) {\n                return;\n              }\n            }\n            return callback(record);\n          };\n        })(this));\n      };\n\n      PivotData.prototype.arrSort = function(attrs, nulls_first) {\n        var a, sortersArr;\n        sortersArr = (function() {\n          var len1, o, results;\n          results = [];\n          for (o = 0, len1 = attrs.length; o < len1; o++) {\n            a = attrs[o];\n            results.push(getSort(this.sorters, a));\n          }\n          return results;\n        }).call(this);\n        return function(a, b) {\n          var comparison, i, sorter;\n          for (i in sortersArr) {\n            if (!hasProp.call(sortersArr, i)) continue;\n            sorter = sortersArr[i];\n            comparison = sorter(a[i], b[i], nulls_first);\n            if (comparison !== 0) {\n              return comparison;\n            }\n          }\n          return 0;\n        };\n      };\n\n      PivotData.prototype.sortKeys = function() {\n        var v;\n        if (!this.sorted) {\n          this.sorted = true;\n          v = (function(_this) {\n            return function(r, c) {\n              return _this.getAggregator(r, c).value();\n            };\n          })(this);\n          switch (this.rowOrder) {\n            case \"value_a_to_z\":\n              this.rowKeys.sort((function(_this) {\n                return function(a, b) {\n                  return naturalSort(v(a, []), v(b, []));\n                };\n              })(this));\n              break;\n            case \"value_z_to_a\":\n              this.rowKeys.sort((function(_this) {\n                return function(a, b) {\n                  return -naturalSort(v(a, []), v(b, []));\n                };\n              })(this));\n              break;\n            default:\n              this.rowKeys.sort(this.arrSort(this.rowAttrs, this.rowGroupBefore));\n          }\n          switch (this.colOrder) {\n            case \"value_a_to_z\":\n              return this.colKeys.sort((function(_this) {\n                return function(a, b) {\n                  return naturalSort(v([], a), v([], b));\n                };\n              })(this));\n            case \"value_z_to_a\":\n              return this.colKeys.sort((function(_this) {\n                return function(a, b) {\n                  return -naturalSort(v([], a), v([], b));\n                };\n              })(this));\n            default:\n              return this.colKeys.sort(this.arrSort(this.colAttrs, this.colGroupBefore));\n          }\n        }\n      };\n\n      PivotData.prototype.getColKeys = function(all_keys) {\n        var l;\n        if (all_keys == null) {\n          all_keys = false;\n        }\n        this.sortKeys();\n        l = this.colAttrs.length;\n        if (all_keys) {\n          return this.colKeys;\n        } else {\n          return this.colKeys.filter(function(x) {\n            return x.length === l;\n          });\n        }\n      };\n\n      PivotData.prototype.getRowKeys = function(all_keys) {\n        var l;\n        if (all_keys == null) {\n          all_keys = false;\n        }\n        this.sortKeys();\n        l = this.rowAttrs.length;\n        if (all_keys) {\n          return this.rowKeys;\n        } else {\n          return this.rowKeys.filter(function(x) {\n            return x.length === l;\n          });\n        }\n      };\n\n      PivotData.prototype.subarrays = function(x) {\n        return [[]].concat(x.map((function(_this) {\n          return function(d, i) {\n            return x.slice(0, i + 1);\n          };\n        })(this)));\n      };\n\n      PivotData.prototype.processRecord = function(record) {\n        var colKey, colKeys, flatColKey, flatRowKey, i, j, len1, len2, o, ref, ref1, ref2, ref3, results, rowKey, rowKeys, t, x;\n        colKeys = [];\n        rowKeys = [];\n        ref = this.colAttrs;\n        for (o = 0, len1 = ref.length; o < len1; o++) {\n          x = ref[o];\n          colKeys.push((ref1 = record[x]) != null ? ref1 : \"null\");\n        }\n        ref2 = this.rowAttrs;\n        for (t = 0, len2 = ref2.length; t < len2; t++) {\n          x = ref2[t];\n          rowKeys.push((ref3 = record[x]) != null ? ref3 : \"null\");\n        }\n        colKeys = this.grouping ? this.subarrays(colKeys) : [colKeys];\n        rowKeys = this.grouping ? this.subarrays(rowKeys) : [rowKeys];\n        this.allTotal.push(record);\n        results = [];\n        for (j in rowKeys) {\n          rowKey = rowKeys[j];\n          flatRowKey = rowKey.join(String.fromCharCode(0));\n          results.push((function() {\n            var results1;\n            results1 = [];\n            for (i in colKeys) {\n              colKey = colKeys[i];\n              flatColKey = colKey.join(String.fromCharCode(0));\n              if (rowKey.length !== 0) {\n                if (!this.rowTotals[flatRowKey]) {\n                  this.rowKeys.push(rowKey);\n                  this.rowTotals[flatRowKey] = this.aggregator(this, rowKey, []);\n                }\n                if (!(this.grouping && colKey.length)) {\n                  this.rowTotals[flatRowKey].push(record);\n                }\n              }\n              if (colKey.length !== 0) {\n                if (!this.colTotals[flatColKey]) {\n                  this.colKeys.push(colKey);\n                  this.colTotals[flatColKey] = this.aggregator(this, [], colKey);\n                }\n                if (!(this.grouping && rowKey.length)) {\n                  this.colTotals[flatColKey].push(record);\n                }\n              }\n              if (colKey.length !== 0 && rowKey.length !== 0) {\n                if (!this.tree[flatRowKey]) {\n                  this.tree[flatRowKey] = {};\n                }\n                if (!this.tree[flatRowKey][flatColKey]) {\n                  this.tree[flatRowKey][flatColKey] = this.aggregator(this, rowKey, colKey);\n                }\n                results1.push(this.tree[flatRowKey][flatColKey].push(record));\n              } else {\n                results1.push(void 0);\n              }\n            }\n            return results1;\n          }).call(this));\n        }\n        return results;\n      };\n\n      PivotData.prototype.getAggregator = function(rowKey, colKey) {\n        var agg, flatColKey, flatRowKey;\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        if (rowKey.length === 0 && colKey.length === 0) {\n          agg = this.allTotal;\n        } else if (rowKey.length === 0) {\n          agg = this.colTotals[flatColKey];\n        } else if (colKey.length === 0) {\n          agg = this.rowTotals[flatRowKey];\n        } else {\n          agg = this.tree[flatRowKey][flatColKey];\n        }\n        return agg != null ? agg : {\n          value: (function() {\n            return null;\n          }),\n          format: function() {\n            return \"\";\n          }\n        };\n      };\n\n      return PivotData;\n\n    })();\n    GroupingPivotData = (function(superClass) {\n      extend(GroupingPivotData, superClass);\n\n      function GroupingPivotData(input, opts) {\n        if (opts == null) {\n          opts = {};\n        }\n        opts.grouping = true;\n        GroupingPivotData.__super__.constructor.apply(this, arguments);\n      }\n\n      return GroupingPivotData;\n\n    })(PivotData);\n    $.pivotUtilities = {\n      aggregatorTemplates: aggregatorTemplates,\n      aggregators: aggregators,\n      renderers: renderers,\n      derivers: derivers,\n      locales: locales,\n      naturalSort: naturalSort,\n      numberFormat: numberFormat,\n      sortAs: sortAs,\n      PivotData: PivotData,\n      GroupingPivotData: GroupingPivotData\n    };\n    childIndex = function(el) {\n      return Array.prototype.indexOf.call(el.parentNode.children, el);\n    };\n    childKeysIndices = function(keys, n) {\n      var key, len, results, up;\n      up = keys[0].length === 1 ? 1 : -1;\n      len = keys[n].length;\n      results = [];\n      while ((n = n + up, key = keys[n]) && key.length > len) {\n        if (key.length === len + 1) {\n          results.push(n);\n        } else {\n          continue;\n        }\n      }\n      return results;\n    };\n    levelKeysIndices = function(keys, level) {\n      return (keys.filter(function(d) {\n        return d.length === level;\n      })).map(keys.indexOf.bind(keys));\n    };\n    parentKeysIndices = function(keys, n) {\n      var key, len, results, up;\n      console.log(keys);\n      up = keys[0].length === 1 ? 1 : -1;\n      results = [];\n      while ((len = keys[n].length) > 1) {\n        while ((n = n - up, key = keys[n]) && key.length >= len) {}\n        results.push(n);\n      }\n      return results;\n    };\n    getAxis = function(table, rows, level) {\n      if (rows) {\n        return table.find(\"thead tr:last-child th.pvtAxisLabel:nth-of-type(\" + level + \")\");\n      } else {\n        return table.find(\"thead tr:nth-child(\" + level + \") th.pvtAxisLabel\");\n      }\n    };\n    getHeader = function(table, rows, n) {\n      return table.find(rows ? \"tbody tr th.row\" + n : \"thead th.col\" + n);\n    };\n    rowGetter = function(table) {\n      var rows;\n      rows = table.find('tbody tr');\n      return function(n) {\n        return $(rows[n]);\n      };\n    };\n    colGetter = function(table) {\n      var rows;\n      rows = table.find('tr');\n      return function(n) {\n        return rows.find(\".col\" + n);\n      };\n    };\n    showHide = function(getter, keys, nth, show) {\n      var fn, i, n, ref, row;\n      ref = childKeysIndices(keys, nth);\n      for (i in ref) {\n        n = ref[i];\n        row = getter(n);\n        fn = show ? $.fn.show : $.fn.hide;\n        fn.call(row);\n        if (!row.hasClass('collapsed')) {\n          showHide(getter, keys, n, show);\n        }\n      }\n      return true;\n    };\n    expandRowsGroupAfter = function(cell, rows, keys, nth) {\n      var getter, i, initIndex, insertPoint, p, parent, parentIndex, ref, ref1, row, table;\n      table = $(cell).closest('table');\n      initIndex = childIndex(cell.parentNode);\n      getter = rowGetter(table);\n      row = getter(nth);\n      insertPoint = row.hasClass('collapsed') ? getter(cell._old) : row;\n      if (!row.hasClass('collapsed')) {\n        cell._old = childIndex(cell.parentNode);\n      }\n      insertPoint.prepend(cell);\n      ref = parentKeysIndices(keys, nth);\n      for (i in ref) {\n        p = ref[i];\n        parent = (getHeader(table, rows, p))[0];\n        parentIndex = childIndex(parent.parentNode);\n        parent._old = (ref1 = parent._old) != null ? ref1 : parentIndex;\n        if (parent._old === initIndex && parent.rowSpan === 1) {\n          parent._old -= initIndex - childIndex(cell.parentNode);\n        }\n        if (initIndex === parentIndex) {\n          insertPoint.prepend(parent);\n        }\n      }\n      return expandWithSpan(cell, rows, keys, nth);\n    };\n    expandWithSpan = function(cell, rows, keys, nth) {\n      var change, i, p, parent, ref, ref1, ref2, span, table;\n      table = $(cell).closest('table');\n      span = rows ? 'rowSpan' : 'colSpan';\n      ref1 = [cell[span], (ref = cell._span) != null ? ref : 1], cell._span = ref1[0], cell[span] = ref1[1];\n      change = cell[span] - cell._span;\n      ref2 = parentKeysIndices(keys, nth);\n      for (i in ref2) {\n        p = ref2[i];\n        parent = (getHeader(table, rows, p))[0];\n        if (parent[span] === 1) {\n          parent._span += change;\n          break;\n        }\n        parent[span] += change;\n      }\n      return expandRowCol(cell, rows, keys, nth, parent);\n    };\n    expandRowCol = function(cell, rows, keys, nth, parent) {\n      var getter, span, table;\n      table = $(cell).closest('table');\n      getter = rows ? rowGetter(table) : colGetter(table);\n      span = rows ? 'rowSpan' : 'colSpan';\n      if ((parent != null ? parent[span] : void 0) !== 1) {\n        showHide(getter, keys, nth, getter(nth).hasClass('collapsed'));\n      }\n      getter(nth).toggleClass('collapsed');\n      return $(cell).toggleClass('open close');\n    };\n    expandAll = function(pivotData, table, level, rows, expand) {\n      var el, i, keys, levels, n, o, ref, ref1, ref2;\n      if (expand && level > 1) {\n        getAxis(table, rows, level - 1).removeClass('close').addClass('open');\n        expandAll(pivotData, table, level - 1, rows, expand);\n      }\n      levels = (rows ? pivotData.rowAttrs : pivotData.colAttrs).length - 1;\n      if (!expand && (level < levels)) {\n        for (i = o = ref = level + 1, ref1 = levels; ref <= ref1 ? o <= ref1 : o >= ref1; i = ref <= ref1 ? ++o : --o) {\n          getAxis(table, rows, i).removeClass('open').addClass('close');\n        }\n      }\n      keys = rows ? pivotData.rowKeys : pivotData.colKeys;\n      ref2 = levelKeysIndices(keys, level);\n      for (i in ref2) {\n        n = ref2[i];\n        el = getHeader(table, rows, n);\n        if (expand === el.hasClass('close')) {\n          el.trigger('click');\n        }\n      }\n      return null;\n    };\n    getExpandHandler = function(keys, rows, handler) {\n      return function(ev) {\n        var match;\n        match = ev.target.className.match(rows ? /row(\\d+)/ : /col(\\d+)/);\n        if (match) {\n          return handler(ev.target, rows, keys, +match[1]);\n        }\n      };\n    };\n    getExpandAllHandler = function(pivotData, level, rows) {\n      return function(ev) {\n        expandAll(pivotData, $(ev.target).closest('table'), level + 1, rows, $(ev.target).hasClass('close'));\n        return $(ev.target).toggleClass('open close');\n      };\n    };\n\n    /*\n    Default Renderer for hierarchical table layout\n     */\n    pivotTableRenderer = function(pivotData, opts) {\n      var aggregator, c, colAttrs, colKey, colKeys, colsExpandHandler, compactLayout, defaults, getClickHandler, i, j, r, ref, result, rowAttrs, rowExpandHandler, rowGap, rowKey, rowKeys, rowsExpandHandler, spanSize, tbody, td, th, thead, totalAggregator, tr, txt, val, x;\n      defaults = {\n        table: {\n          clickCallback: null,\n          rowTotals: true,\n          colTotals: true\n        },\n        localeStrings: {\n          totals: \"Totals\"\n        }\n      };\n      opts = $.extend(true, {}, defaults, opts);\n      colAttrs = pivotData.colAttrs;\n      rowAttrs = pivotData.rowAttrs;\n      rowKeys = pivotData.getRowKeys(true);\n      colKeys = pivotData.getColKeys(true);\n      if (opts.table.clickCallback) {\n        getClickHandler = function(value, rowValues, colValues) {\n          var attr, filters, i;\n          filters = {};\n          for (i in colAttrs) {\n            if (!hasProp.call(colAttrs, i)) continue;\n            attr = colAttrs[i];\n            if (colValues[i] != null) {\n              filters[attr] = colValues[i];\n            }\n          }\n          for (i in rowAttrs) {\n            if (!hasProp.call(rowAttrs, i)) continue;\n            attr = rowAttrs[i];\n            if (rowValues[i] != null) {\n              filters[attr] = rowValues[i];\n            }\n          }\n          return function(e) {\n            return opts.table.clickCallback(e, value, filters, pivotData);\n          };\n        };\n      }\n      compactLayout = ((ref = opts.table.compactLayout) != null ? ref : true) && pivotData.grouping;\n      rowExpandHandler = compactLayout ? expandRowCol : pivotData.rowGroupBefore ? expandWithSpan : expandRowsGroupAfter;\n      rowsExpandHandler = getExpandHandler(rowKeys, true, rowExpandHandler);\n      colsExpandHandler = getExpandHandler(colKeys, false, expandWithSpan);\n      result = document.createElement(\"table\");\n      result.className = \"pvtTable\";\n      result.pivotData = pivotData;\n      spanSize = function(arr, i, j) {\n        var len, noDraw, o, ref1, ref2, stop, t, x;\n        if (i !== 0) {\n          noDraw = true;\n          for (x = o = 0, ref1 = j; 0 <= ref1 ? o <= ref1 : o >= ref1; x = 0 <= ref1 ? ++o : --o) {\n            if (arr[i - 1][x] !== arr[i][x]) {\n              noDraw = false;\n            }\n          }\n          if (noDraw) {\n            return -1;\n          }\n        }\n        len = 0;\n        while (i + len < arr.length) {\n          stop = false;\n          for (x = t = 0, ref2 = j; 0 <= ref2 ? t <= ref2 : t >= ref2; x = 0 <= ref2 ? ++t : --t) {\n            if (arr[i][x] !== arr[i + len][x]) {\n              stop = true;\n            }\n          }\n          if (stop) {\n            break;\n          }\n          len++;\n        }\n        return len;\n      };\n      thead = document.createElement(\"thead\");\n      for (j in colAttrs) {\n        if (!hasProp.call(colAttrs, j)) continue;\n        c = colAttrs[j];\n        tr = document.createElement(\"tr\");\n        if (parseInt(j) === 0 && rowAttrs.length !== 0) {\n          th = document.createElement(\"th\");\n          th.setAttribute(\"colspan\", rowAttrs.length);\n          th.setAttribute(\"rowspan\", colAttrs.length);\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        th.className = \"pvtAxisLabel\";\n        th.textContent = c;\n        if (j < colAttrs.length - 1) {\n          th.onclick = getExpandAllHandler(pivotData, +j, false);\n          th.className += \" open level\" + j;\n        }\n        tr.appendChild(th);\n        for (i in colKeys) {\n          if (!hasProp.call(colKeys, i)) continue;\n          colKey = colKeys[i];\n          x = spanSize(colKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtColLabel\";\n            th.className += \" col\" + (pivotData.colGroupBefore ? +i : +i + x - 1);\n            th.textContent = colKey[j];\n            th.setAttribute(\"colspan\", x);\n            if (parseInt(j) === colAttrs.length - 1 && rowAttrs.length !== 0) {\n              th.setAttribute(\"rowspan\", 2);\n            }\n            if (j < colAttrs.length - 1 && colKey[j]) {\n              th.className += \" pvtSubtotal open\";\n              th.onclick = colsExpandHandler;\n            }\n            tr.appendChild(th);\n          }\n        }\n        if (parseInt(j) === 0 && opts.table.rowTotals) {\n          th = document.createElement(\"th\");\n          th.className = \"pvtTotalLabel pvtRowTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          th.setAttribute(\"rowspan\", colAttrs.length + (rowAttrs.length === 0 ? 0 : 1));\n          tr.appendChild(th);\n        }\n        thead.appendChild(tr);\n      }\n      if (rowAttrs.length !== 0) {\n        tr = document.createElement(\"tr\");\n        for (i in rowAttrs) {\n          if (!hasProp.call(rowAttrs, i)) continue;\n          r = rowAttrs[i];\n          th = document.createElement(\"th\");\n          th.className = \"pvtAxisLabel\";\n          th.textContent = r;\n          if (i < rowAttrs.length - 1) {\n            th.className += \" open level\" + i;\n            th.onclick = getExpandAllHandler(pivotData, +i, true);\n          }\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        if (colAttrs.length === 0) {\n          th.className = \"pvtTotalLabel pvtRowTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n        }\n        tr.appendChild(th);\n        thead.appendChild(tr);\n      }\n      result.appendChild(thead);\n      tbody = document.createElement(\"tbody\");\n      for (i in rowKeys) {\n        if (!hasProp.call(rowKeys, i)) continue;\n        rowKey = rowKeys[i];\n        tr = document.createElement(\"tr\");\n        rowGap = rowAttrs.length - rowKey.length;\n        tr.className = rowGap ? \"pvtSubtotal level\" + rowKey.length : \"pvtData\";\n        for (j in rowKey) {\n          if (!hasProp.call(rowKey, j)) continue;\n          txt = rowKey[j];\n          if (compactLayout && j < rowKey.length - 1) {\n            continue;\n          }\n          x = compactLayout ? 1 : spanSize(rowKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtRowLabel\";\n            th.className += \" row\" + (pivotData.rowGroupBefore ? +i : +i + x - 1);\n            th.textContent = txt;\n            th.setAttribute(\"rowspan\", x);\n            if (compactLayout) {\n              th.colSpan = rowAttrs.length;\n              th.style.paddingLeft = 5 + parseInt(j) * 20 + 'px';\n            }\n            if (j < rowAttrs.length - 1) {\n              th.className += \" open\";\n              th.onclick = rowsExpandHandler;\n            }\n            tr.appendChild(th);\n          }\n        }\n        if (!compactLayout && rowGap) {\n          th = document.createElement(\"th\");\n          th.colSpan = rowGap;\n          th.textContent = \"Total (\" + rowKey[j] + \")\";\n          tr.appendChild(th);\n        }\n        if (colAttrs.length) {\n          th.colSpan++;\n        }\n        for (j in colKeys) {\n          if (!hasProp.call(colKeys, j)) continue;\n          colKey = colKeys[j];\n          aggregator = pivotData.getAggregator(rowKey, colKey);\n          val = aggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtVal row\" + i + \" col\" + j;\n          if (colAttrs.length - colKey.length) {\n            td.className = \"pvtSubtotal level\" + colKey.length + \" row\" + i + \" col\" + j;\n          }\n          td.textContent = aggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, rowKey, colKey);\n          }\n          tr.appendChild(td);\n        }\n        if (opts.table.rowTotals || colAttrs.length === 0) {\n          totalAggregator = pivotData.getAggregator(rowKey, []);\n          val = totalAggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtTotal rowTotal\";\n          td.textContent = totalAggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, rowKey, []);\n          }\n          td.setAttribute(\"data-for\", \"row\" + i);\n          tr.appendChild(td);\n        }\n        tbody.appendChild(tr);\n      }\n      if (opts.table.colTotals || rowAttrs.length === 0) {\n        tr = document.createElement(\"tr\");\n        if (opts.table.colTotals || rowAttrs.length === 0) {\n          th = document.createElement(\"th\");\n          th.className = \"pvtTotalLabel pvtColTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          th.setAttribute(\"colspan\", rowAttrs.length + (colAttrs.length === 0 ? 0 : 1));\n          tr.appendChild(th);\n        }\n        for (j in colKeys) {\n          if (!hasProp.call(colKeys, j)) continue;\n          colKey = colKeys[j];\n          totalAggregator = pivotData.getAggregator([], colKey);\n          val = totalAggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtTotal colTotal col\" + j;\n          if (colKey.length !== colAttrs.length) {\n            td.className += \" pvtSubtotal level\" + colKey.length;\n          }\n          td.textContent = totalAggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, [], colKey);\n          }\n          td.setAttribute(\"data-for\", \"col\" + j);\n          tr.appendChild(td);\n        }\n        if (opts.table.rowTotals || colAttrs.length === 0) {\n          totalAggregator = pivotData.getAggregator([], []);\n          val = totalAggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtGrandTotal\";\n          td.textContent = totalAggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, [], []);\n          }\n          tr.appendChild(td);\n        }\n        tbody.appendChild(tr);\n      }\n      result.appendChild(tbody);\n      result.setAttribute(\"data-numrows\", rowKeys.length);\n      result.setAttribute(\"data-numcols\", colKeys.length);\n      return result;\n    };\n\n    /*\n    Pivot Table core: create PivotData object and call Renderer on it\n     */\n    $.fn.pivot = function(input, inputOpts, locale) {\n      var defaults, e, localeDefaults, localeStrings, opts, pivotData, result, x;\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        cols: [],\n        rows: [],\n        vals: [],\n        rowOrder: \"key_a_to_z\",\n        colOrder: \"key_a_to_z\",\n        dataClass: PivotData,\n        filter: function() {\n          return true;\n        },\n        aggregator: aggregatorTemplates.count()(),\n        aggregatorName: \"Count\",\n        sorters: {},\n        derivedAttributes: {},\n        renderer: pivotTableRenderer\n      };\n      localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings);\n      localeDefaults = {\n        rendererOptions: {\n          localeStrings: localeStrings\n        },\n        localeStrings: localeStrings\n      };\n      opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts));\n      result = null;\n      try {\n        pivotData = new opts.dataClass(input, opts);\n        try {\n          result = opts.renderer(pivotData, opts.rendererOptions);\n        } catch (error) {\n          e = error;\n          if (typeof console !== \"undefined\" && console !== null) {\n            console.error(e.stack);\n          }\n          result = $(\"<span>\").html(opts.localeStrings.renderError);\n        }\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        result = $(\"<span>\").html(opts.localeStrings.computeError);\n      }\n      x = this[0];\n      while (x.hasChildNodes()) {\n        x.removeChild(x.lastChild);\n      }\n      return this.append(result);\n    };\n\n    /*\n    Pivot Table UI: calls Pivot Table core above with options set by user\n     */\n    $.fn.pivotUI = function(input, inputOpts, overwrite, locale) {\n      var a, aggregator, attr, attrLength, attrValues, c, colOrderArrow, defaults, e, existingOpts, fn1, i, initialRender, len1, len2, len3, localeDefaults, localeStrings, materializedInput, o, opts, ordering, pivotTable, recordsProcessed, ref, ref1, ref2, ref3, refresh, refreshDelayed, renderer, rendererControl, rowOrderArrow, shownAttributes, shownInAggregators, shownInDragDrop, t, tr1, tr2, u, uiTable, unused, unusedAttrsVerticalAutoCutoff, unusedAttrsVerticalAutoOverride, x;\n      if (overwrite == null) {\n        overwrite = false;\n      }\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        derivedAttributes: {},\n        aggregators: locales[locale].aggregators,\n        renderers: locales[locale].renderers,\n        hiddenAttributes: [],\n        hiddenFromAggregators: [],\n        hiddenFromDragDrop: [],\n        menuLimit: 500,\n        cols: [],\n        rows: [],\n        vals: [],\n        rowOrder: \"key_a_to_z\",\n        colOrder: \"key_a_to_z\",\n        dataClass: PivotData,\n        exclusions: {},\n        inclusions: {},\n        unusedAttrsVertical: 85,\n        autoSortUnusedAttrs: false,\n        onRefresh: null,\n        showUI: true,\n        filter: function() {\n          return true;\n        },\n        sorters: {}\n      };\n      localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings);\n      localeDefaults = {\n        rendererOptions: {\n          localeStrings: localeStrings\n        },\n        localeStrings: localeStrings\n      };\n      existingOpts = this.data(\"pivotUIOptions\");\n      if ((existingOpts == null) || overwrite) {\n        opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts));\n      } else {\n        opts = existingOpts;\n      }\n      try {\n        attrValues = {};\n        materializedInput = [];\n        recordsProcessed = 0;\n        PivotData.forEachRecord(input, opts.derivedAttributes, function(record) {\n          var attr, base, ref, value;\n          if (!opts.filter(record)) {\n            return;\n          }\n          materializedInput.push(record);\n          for (attr in record) {\n            if (!hasProp.call(record, attr)) continue;\n            if (attrValues[attr] == null) {\n              attrValues[attr] = {};\n              if (recordsProcessed > 0) {\n                attrValues[attr][\"null\"] = recordsProcessed;\n              }\n            }\n          }\n          for (attr in attrValues) {\n            value = (ref = record[attr]) != null ? ref : \"null\";\n            if ((base = attrValues[attr])[value] == null) {\n              base[value] = 0;\n            }\n            attrValues[attr][value]++;\n          }\n          return recordsProcessed++;\n        });\n        uiTable = $(\"<table>\", {\n          \"class\": \"pvtUi\"\n        }).attr(\"cellpadding\", 5);\n        rendererControl = $(\"<td>\").addClass(\"pvtUiCell\");\n        renderer = $(\"<select>\").addClass('pvtRenderer').appendTo(rendererControl).bind(\"change\", function() {\n          return refresh();\n        });\n        ref = opts.renderers;\n        for (x in ref) {\n          if (!hasProp.call(ref, x)) continue;\n          $(\"<option>\").val(x).html(x).appendTo(renderer);\n        }\n        unused = $(\"<td>\").addClass('pvtAxisContainer pvtUnused pvtUiCell');\n        shownAttributes = (function() {\n          var results;\n          results = [];\n          for (a in attrValues) {\n            if (indexOf.call(opts.hiddenAttributes, a) < 0) {\n              results.push(a);\n            }\n          }\n          return results;\n        })();\n        shownInAggregators = (function() {\n          var len1, o, results;\n          results = [];\n          for (o = 0, len1 = shownAttributes.length; o < len1; o++) {\n            c = shownAttributes[o];\n            if (indexOf.call(opts.hiddenFromAggregators, c) < 0) {\n              results.push(c);\n            }\n          }\n          return results;\n        })();\n        shownInDragDrop = (function() {\n          var len1, o, results;\n          results = [];\n          for (o = 0, len1 = shownAttributes.length; o < len1; o++) {\n            c = shownAttributes[o];\n            if (indexOf.call(opts.hiddenFromDragDrop, c) < 0) {\n              results.push(c);\n            }\n          }\n          return results;\n        })();\n        unusedAttrsVerticalAutoOverride = false;\n        if (opts.unusedAttrsVertical === \"auto\") {\n          unusedAttrsVerticalAutoCutoff = 120;\n        } else {\n          unusedAttrsVerticalAutoCutoff = parseInt(opts.unusedAttrsVertical);\n        }\n        if (!isNaN(unusedAttrsVerticalAutoCutoff)) {\n          attrLength = 0;\n          for (o = 0, len1 = shownInDragDrop.length; o < len1; o++) {\n            a = shownInDragDrop[o];\n            attrLength += a.length;\n          }\n          unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff;\n        }\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          unused.addClass('pvtVertList');\n        } else {\n          unused.addClass('pvtHorizList');\n        }\n        fn1 = function(attr) {\n          var attrElem, checkContainer, closeFilterBox, controls, filterItem, filterItemExcluded, finalButtons, hasExcludedItem, len2, placeholder, ref1, sorter, t, triangleLink, v, value, valueCount, valueList, values;\n          values = (function() {\n            var results;\n            results = [];\n            for (v in attrValues[attr]) {\n              results.push(v);\n            }\n            return results;\n          })();\n          hasExcludedItem = false;\n          valueList = $(\"<div>\").addClass('pvtFilterBox').hide();\n          valueList.append($(\"<h4>\").append($(\"<span>\").text(attr), $(\"<span>\").addClass(\"count\").text(\"(\" + values.length + \")\")));\n          if (values.length > opts.menuLimit) {\n            valueList.append($(\"<p>\").html(opts.localeStrings.tooMany));\n          } else {\n            if (values.length > 5) {\n              controls = $(\"<p>\").appendTo(valueList);\n              sorter = getSort(opts.sorters, attr);\n              placeholder = opts.localeStrings.filterResults;\n              $(\"<input>\", {\n                type: \"text\"\n              }).appendTo(controls).attr({\n                placeholder: placeholder,\n                \"class\": \"pvtSearch\"\n              }).bind(\"keyup\", function() {\n                var accept, accept_gen, filter;\n                filter = $(this).val().toLowerCase().trim();\n                accept_gen = function(prefix, accepted) {\n                  return function(v) {\n                    var real_filter, ref1;\n                    real_filter = filter.substring(prefix.length).trim();\n                    if (real_filter.length === 0) {\n                      return true;\n                    }\n                    return ref1 = Math.sign(sorter(v.toLowerCase(), real_filter)), indexOf.call(accepted, ref1) >= 0;\n                  };\n                };\n                accept = filter.indexOf(\">=\") === 0 ? accept_gen(\">=\", [1, 0]) : filter.indexOf(\"<=\") === 0 ? accept_gen(\"<=\", [-1, 0]) : filter.indexOf(\">\") === 0 ? accept_gen(\">\", [1]) : filter.indexOf(\"<\") === 0 ? accept_gen(\"<\", [-1]) : filter.indexOf(\"~\") === 0 ? function(v) {\n                  if (filter.substring(1).trim().length === 0) {\n                    return true;\n                  }\n                  return v.toLowerCase().match(filter.substring(1));\n                } : function(v) {\n                  return v.toLowerCase().indexOf(filter) !== -1;\n                };\n                return valueList.find('.pvtCheckContainer p label span.value').each(function() {\n                  if (accept($(this).text())) {\n                    return $(this).parent().parent().show();\n                  } else {\n                    return $(this).parent().parent().hide();\n                  }\n                });\n              });\n              controls.append($(\"<br>\"));\n              $(\"<button>\", {\n                type: \"button\"\n              }).appendTo(controls).html(opts.localeStrings.selectAll).bind(\"click\", function() {\n                valueList.find(\"input:visible:not(:checked)\").prop(\"checked\", true).toggleClass(\"changed\");\n                return false;\n              });\n              $(\"<button>\", {\n                type: \"button\"\n              }).appendTo(controls).html(opts.localeStrings.selectNone).bind(\"click\", function() {\n                valueList.find(\"input:visible:checked\").prop(\"checked\", false).toggleClass(\"changed\");\n                return false;\n              });\n            }\n            checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList);\n            ref1 = values.sort(getSort(opts.sorters, attr));\n            for (t = 0, len2 = ref1.length; t < len2; t++) {\n              value = ref1[t];\n              valueCount = attrValues[attr][value];\n              filterItem = $(\"<label>\");\n              filterItemExcluded = false;\n              if (opts.inclusions[attr]) {\n                filterItemExcluded = (indexOf.call(opts.inclusions[attr], value) < 0);\n              } else if (opts.exclusions[attr]) {\n                filterItemExcluded = (indexOf.call(opts.exclusions[attr], value) >= 0);\n              }\n              hasExcludedItem || (hasExcludedItem = filterItemExcluded);\n              $(\"<input>\").attr(\"type\", \"checkbox\").addClass('pvtFilter').attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr, value]).appendTo(filterItem).bind(\"change\", function() {\n                return $(this).toggleClass(\"changed\");\n              });\n              filterItem.append($(\"<span>\").addClass(\"value\").text(value));\n              filterItem.append($(\"<span>\").addClass(\"count\").text(\"(\" + valueCount + \")\"));\n              checkContainer.append($(\"<p>\").append(filterItem));\n            }\n          }\n          closeFilterBox = function() {\n            if (valueList.find(\"[type='checkbox']\").length > valueList.find(\"[type='checkbox']:checked\").length) {\n              attrElem.addClass(\"pvtFilteredAttribute\");\n            } else {\n              attrElem.removeClass(\"pvtFilteredAttribute\");\n            }\n            valueList.find('.pvtSearch').val('');\n            valueList.find('.pvtCheckContainer p').show();\n            return valueList.hide();\n          };\n          finalButtons = $(\"<p>\").appendTo(valueList);\n          if (values.length <= opts.menuLimit) {\n            $(\"<button>\", {\n              type: \"button\"\n            }).text(opts.localeStrings.apply).appendTo(finalButtons).bind(\"click\", function() {\n              if (valueList.find(\".changed\").removeClass(\"changed\").length) {\n                refresh();\n              }\n              return closeFilterBox();\n            });\n          }\n          $(\"<button>\", {\n            type: \"button\"\n          }).text(opts.localeStrings.cancel).appendTo(finalButtons).bind(\"click\", function() {\n            valueList.find(\".changed:checked\").removeClass(\"changed\").prop(\"checked\", false);\n            valueList.find(\".changed:not(:checked)\").removeClass(\"changed\").prop(\"checked\", true);\n            return closeFilterBox();\n          });\n          triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" &#x25BE;\").bind(\"click\", function(e) {\n            var left, ref2, top;\n            ref2 = $(e.currentTarget).position(), left = ref2.left, top = ref2.top;\n            return valueList.css({\n              left: left + 10,\n              top: top + 10\n            }).show();\n          });\n          attrElem = $(\"<li>\").addClass(\"axis_\" + i).append($(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink));\n          if (hasExcludedItem) {\n            attrElem.addClass('pvtFilteredAttribute');\n          }\n          return unused.append(attrElem).append(valueList);\n        };\n        for (i in shownInDragDrop) {\n          if (!hasProp.call(shownInDragDrop, i)) continue;\n          attr = shownInDragDrop[i];\n          fn1(attr);\n        }\n        tr1 = $(\"<tr>\").appendTo(uiTable);\n        aggregator = $(\"<select>\").addClass('pvtAggregator').bind(\"change\", function() {\n          return refresh();\n        });\n        ref1 = opts.aggregators;\n        for (x in ref1) {\n          if (!hasProp.call(ref1, x)) continue;\n          aggregator.append($(\"<option>\").val(x).html(x));\n        }\n        ordering = {\n          key_a_to_z: {\n            rowSymbol: \"&varr;\",\n            colSymbol: \"&harr;\",\n            next: \"value_a_to_z\"\n          },\n          value_a_to_z: {\n            rowSymbol: \"&darr;\",\n            colSymbol: \"&rarr;\",\n            next: \"value_z_to_a\"\n          },\n          value_z_to_a: {\n            rowSymbol: \"&uarr;\",\n            colSymbol: \"&larr;\",\n            next: \"key_a_to_z\"\n          }\n        };\n        rowOrderArrow = $(\"<a>\", {\n          role: \"button\"\n        }).addClass(\"pvtRowOrder\").data(\"order\", opts.rowOrder).html(ordering[opts.rowOrder].rowSymbol).bind(\"click\", function() {\n          $(this).data(\"order\", ordering[$(this).data(\"order\")].next);\n          $(this).html(ordering[$(this).data(\"order\")].rowSymbol);\n          return refresh();\n        });\n        colOrderArrow = $(\"<a>\", {\n          role: \"button\"\n        }).addClass(\"pvtColOrder\").data(\"order\", opts.colOrder).html(ordering[opts.colOrder].colSymbol).bind(\"click\", function() {\n          $(this).data(\"order\", ordering[$(this).data(\"order\")].next);\n          $(this).html(ordering[$(this).data(\"order\")].colSymbol);\n          return refresh();\n        });\n        $(\"<td>\").addClass('pvtVals pvtUiCell').appendTo(tr1).append(aggregator).append(rowOrderArrow).append(colOrderArrow).append($(\"<br>\"));\n        $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols pvtUiCell').appendTo(tr1);\n        tr2 = $(\"<tr>\").appendTo(uiTable);\n        tr2.append($(\"<td>\").addClass('pvtAxisContainer pvtRows pvtUiCell').attr(\"valign\", \"top\"));\n        pivotTable = $(\"<td>\").attr(\"valign\", \"top\").addClass('pvtRendererArea').appendTo(tr2);\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          uiTable.find('tr:nth-child(1)').prepend(rendererControl);\n          uiTable.find('tr:nth-child(2)').prepend(unused);\n        } else {\n          uiTable.prepend($(\"<tr>\").append(rendererControl).append(unused));\n        }\n        this.html(uiTable);\n        ref2 = opts.cols;\n        for (t = 0, len2 = ref2.length; t < len2; t++) {\n          x = ref2[t];\n          this.find(\".pvtCols\").append(this.find(\".axis_\" + ($.inArray(x, shownInDragDrop))));\n        }\n        ref3 = opts.rows;\n        for (u = 0, len3 = ref3.length; u < len3; u++) {\n          x = ref3[u];\n          this.find(\".pvtRows\").append(this.find(\".axis_\" + ($.inArray(x, shownInDragDrop))));\n        }\n        if (opts.aggregatorName != null) {\n          this.find(\".pvtAggregator\").val(opts.aggregatorName);\n        }\n        if (opts.rendererName != null) {\n          this.find(\".pvtRenderer\").val(opts.rendererName);\n        }\n        if (!opts.showUI) {\n          this.find(\".pvtUiCell\").hide();\n        }\n        initialRender = true;\n        refreshDelayed = (function(_this) {\n          return function() {\n            var exclusions, inclusions, len4, newDropdown, numInputsToProcess, pivotUIOptions, pvtVals, ref4, ref5, subopts, unusedAttrsContainer, vals, w, y;\n            subopts = {\n              derivedAttributes: opts.derivedAttributes,\n              localeStrings: opts.localeStrings,\n              rendererOptions: opts.rendererOptions,\n              sorters: opts.sorters,\n              cols: [],\n              rows: [],\n              dataClass: opts.dataClass\n            };\n            numInputsToProcess = (ref4 = opts.aggregators[aggregator.val()]([])().numInputs) != null ? ref4 : 0;\n            vals = [];\n            _this.find(\".pvtRows li span.pvtAttr\").each(function() {\n              return subopts.rows.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtCols li span.pvtAttr\").each(function() {\n              return subopts.cols.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n              if (numInputsToProcess === 0) {\n                return $(this).remove();\n              } else {\n                numInputsToProcess--;\n                if ($(this).val() !== \"\") {\n                  return vals.push($(this).val());\n                }\n              }\n            });\n            if (numInputsToProcess !== 0) {\n              pvtVals = _this.find(\".pvtVals\");\n              for (x = w = 0, ref5 = numInputsToProcess; 0 <= ref5 ? w < ref5 : w > ref5; x = 0 <= ref5 ? ++w : --w) {\n                newDropdown = $(\"<select>\").addClass('pvtAttrDropdown').append($(\"<option>\")).bind(\"change\", function() {\n                  return refresh();\n                });\n                for (y = 0, len4 = shownInAggregators.length; y < len4; y++) {\n                  attr = shownInAggregators[y];\n                  newDropdown.append($(\"<option>\").val(attr).text(attr));\n                }\n                pvtVals.append(newDropdown);\n              }\n            }\n            if (initialRender) {\n              vals = opts.vals;\n              i = 0;\n              _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n                $(this).val(vals[i]);\n                return i++;\n              });\n              initialRender = false;\n            }\n            subopts.aggregatorName = aggregator.val();\n            subopts.vals = vals;\n            subopts.aggregator = opts.aggregators[aggregator.val()](vals);\n            subopts.renderer = opts.renderers[renderer.val()];\n            subopts.rowOrder = rowOrderArrow.data(\"order\");\n            subopts.colOrder = colOrderArrow.data(\"order\");\n            exclusions = {};\n            _this.find('input.pvtFilter').not(':checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                return exclusions[filter[0]].push(filter[1]);\n              } else {\n                return exclusions[filter[0]] = [filter[1]];\n              }\n            });\n            inclusions = {};\n            _this.find('input.pvtFilter:checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                if (inclusions[filter[0]] != null) {\n                  return inclusions[filter[0]].push(filter[1]);\n                } else {\n                  return inclusions[filter[0]] = [filter[1]];\n                }\n              }\n            });\n            subopts.filter = function(record) {\n              var excludedItems, k, ref6, ref7;\n              if (!opts.filter(record)) {\n                return false;\n              }\n              for (k in exclusions) {\n                excludedItems = exclusions[k];\n                if (ref6 = \"\" + ((ref7 = record[k]) != null ? ref7 : 'null'), indexOf.call(excludedItems, ref6) >= 0) {\n                  return false;\n                }\n              }\n              return true;\n            };\n            pivotTable.pivot(materializedInput, subopts);\n            pivotUIOptions = $.extend({}, opts, {\n              cols: subopts.cols,\n              rows: subopts.rows,\n              colOrder: subopts.colOrder,\n              rowOrder: subopts.rowOrder,\n              vals: vals,\n              exclusions: exclusions,\n              inclusions: inclusions,\n              inclusionsInfo: inclusions,\n              aggregatorName: aggregator.val(),\n              rendererName: renderer.val()\n            });\n            _this.data(\"pivotUIOptions\", pivotUIOptions);\n            if (opts.autoSortUnusedAttrs) {\n              unusedAttrsContainer = _this.find(\"td.pvtUnused.pvtAxisContainer\");\n              $(unusedAttrsContainer).children(\"li\").sort(function(a, b) {\n                return naturalSort($(a).text(), $(b).text());\n              }).appendTo(unusedAttrsContainer);\n            }\n            pivotTable.css(\"opacity\", 1);\n            if (opts.onRefresh != null) {\n              return opts.onRefresh(pivotUIOptions);\n            }\n          };\n        })(this);\n        refresh = (function(_this) {\n          return function() {\n            pivotTable.css(\"opacity\", 0.5);\n            return setTimeout(refreshDelayed, 10);\n          };\n        })(this);\n        refresh();\n        this.find(\".pvtAxisContainer\").sortable({\n          update: function(e, ui) {\n            if (ui.sender == null) {\n              return refresh();\n            }\n          },\n          connectWith: this.find(\".pvtAxisContainer\"),\n          items: 'li',\n          placeholder: 'pvtPlaceholder'\n        });\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        this.html(opts.localeStrings.uiRenderError);\n      }\n      return this;\n    };\n\n    /*\n    Heatmap post-processing\n     */\n    $.fn.heatmap = function(scope, opts) {\n      var colorScaleGenerator, heatmapper, i, j, numCols, numRows, o, ref, ref1, ref2, t;\n      if (scope == null) {\n        scope = \"heatmap\";\n      }\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      colorScaleGenerator = opts != null ? (ref = opts.heatmap) != null ? ref.colorScaleGenerator : void 0 : void 0;\n      if (colorScaleGenerator == null) {\n        colorScaleGenerator = function(values) {\n          var max, min;\n          min = Math.min.apply(Math, values);\n          max = Math.max.apply(Math, values);\n          return function(x) {\n            var nonRed;\n            nonRed = 255 - Math.round(255 * (x - min) / (max - min));\n            return \"rgb(255,\" + nonRed + \",\" + nonRed + \")\";\n          };\n        };\n      }\n      heatmapper = (function(_this) {\n        return function(scope) {\n          var colorScale, forEachCell, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          colorScale = colorScaleGenerator(values);\n          return forEachCell(function(x, elem) {\n            return elem.css(\"background-color\", colorScale(x));\n          });\n        };\n      })(this);\n      switch (scope) {\n        case \"heatmap\":\n          heatmapper(\".pvtVal\");\n          break;\n        case \"rowheatmap\":\n          for (i = o = 0, ref1 = numRows; 0 <= ref1 ? o < ref1 : o > ref1; i = 0 <= ref1 ? ++o : --o) {\n            heatmapper(\".pvtVal.row\" + i);\n          }\n          break;\n        case \"colheatmap\":\n          for (j = t = 0, ref2 = numCols; 0 <= ref2 ? t < ref2 : t > ref2; j = 0 <= ref2 ? ++t : --t) {\n            heatmapper(\".pvtVal.col\" + j);\n          }\n      }\n      heatmapper(\".pvtTotal.rowTotal\");\n      heatmapper(\".pvtTotal.colTotal\");\n      return this;\n    };\n\n    /*\n    Barchart post-processing\n     */\n    return $.fn.barchart = function(opts) {\n      var barcharter, i, numCols, numRows, o, ref;\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      barcharter = (function(_this) {\n        return function(scope) {\n          var forEachCell, max, min, range, scaler, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          max = Math.max.apply(Math, values);\n          if (max < 0) {\n            max = 0;\n          }\n          range = max;\n          min = Math.min.apply(Math, values);\n          if (min < 0) {\n            range = max - min;\n          }\n          scaler = function(x) {\n            return 100 * x / (1.4 * range);\n          };\n          return forEachCell(function(x, elem) {\n            var bBase, bgColor, text, wrapper;\n            text = elem.text();\n            wrapper = $(\"<div>\").css({\n              \"position\": \"relative\",\n              \"height\": \"55px\"\n            });\n            bgColor = \"gray\";\n            bBase = 0;\n            if (min < 0) {\n              bBase = scaler(-min);\n            }\n            if (x < 0) {\n              bBase += scaler(x);\n              bgColor = \"darkred\";\n              x = -x;\n            }\n            wrapper.append($(\"<div>\").css({\n              \"position\": \"absolute\",\n              \"bottom\": bBase + \"%\",\n              \"left\": 0,\n              \"right\": 0,\n              \"height\": scaler(x) + \"%\",\n              \"background-color\": bgColor\n            }));\n            wrapper.append($(\"<div>\").text(text).css({\n              \"position\": \"relative\",\n              \"padding-left\": \"5px\",\n              \"padding-right\": \"5px\"\n            }));\n            return elem.css({\n              \"padding\": 0,\n              \"padding-top\": \"5px\",\n              \"text-align\": \"center\"\n            }).html(wrapper);\n          });\n        };\n      })(this);\n      for (i = o = 0, ref = numRows; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n        barcharter(\".pvtVal.row\" + i);\n      }\n      barcharter(\".pvtTotal.colTotal\");\n      return this;\n    };\n  });\n\n}).call(this);\n\n//# sourceMappingURL=pivot.js.map\n"]}