{"version":3,"sources":["pivot.coffee","pivot.min.js"],"names":["callWithJQuery","indexOf","item","i","l","this","length","slice","bind","fn","me","apply","arguments","hasProp","hasOwnProperty","pivotModule","exports","module","require","define","amd","jQuery","$","PivotData","addSeparators","aggregatorTemplates","aggregators","childIndex","childKeysIndices","colGetter","dayNamesEn","derivers","expandAll","expandRowCol","expandRowsGroupAfter","expandWithSpan","getAxis","getExpandAllHandler","getExpandHandler","getHeader","getSort","levelKeysIndices","locales","mthNamesEn","naturalSort","numberFormat","parentKeysIndices","pivotTableRenderer","rd","renderers","rowGetter","rx","rz","showHide","sortAs","usFmt","usFmtInt","usFmtPct","zeroPad","nStr","thousandsSep","decimalSep","rgx","x","x1","x2","split","test","replace","opts","defaults","digitsAfterDecimal","scaler","prefix","suffix","extend","result","isNaN","isFinite","toFixed","count","formatter","data","rowKey","colKey","push","value","format","uniques","arg","attr","uniq","record","ref","call","numInputs","sum","parseFloat","extremes","mode","val","sorter","sorters","ref1","ref2","Math","quantile","q","vals","sort","a","b","floor","ceil","runningStat","ddof","n","m","s","m_new","sqrt","sumOverSum","denom","num","sumNum","sumDenom","sumOverSumBound80","upper","sign","fractionOf","wrapped","type","selector","total","row","col","inner","getAggregator","countUnique","f","listUnique","join","max","min","first","last","median","average","stdev","tpl","Count","Count Unique Values","List Unique Values","Sum","Integer Sum","Average","Median","Sample Variance","Sample Standard Deviation","Minimum","Maximum","First","Last","Sum over Sum","80% Upper Bound","80% Lower Bound","Sum as Fraction of Total","Sum as Fraction of Rows","Sum as Fraction of Columns","Count as Fraction of Total","Count as Fraction of Rows","Count as Fraction of Columns","Table","Table Barchart","barchart","Heatmap","heatmap","Row Heatmap","Col Heatmap","en","localeStrings","renderError","computeError","uiRenderError","selectAll","selectNone","tooMany","filterResults","cancel","totals","vs","by","number","substr","bin","binWidth","dateFormat","formatString","utcOutput","mthNames","dayNames","utc","date","Date","parse","p","_this","as","bs","nulls_first","a1","b1","nas","nbs","nf","String","match","shift","order","l_mapping","mapping","toLowerCase","isFunction","input","ref10","ref11","ref12","ref13","ref14","ref3","ref4","ref5","ref6","ref7","ref8","ref9","getRowKeys","getColKeys","filterByLength","sortKeys","arrSort","aggregator","aggregatorName","colAttrs","cols","rowAttrs","rows","valAttrs","rowOrder","colOrder","derivedAttributes","filter","tree","rowKeys","colKeys","rowTotals","colTotals","allTotal","sorted","grouping","rowGroupBefore","colGroupBefore","forEachRecord","processRecord","addRecord","compactRecord","j","k","len1","results","results1","tblCols","isEmptyObject","v","isArray","each","text","Error","prototype","forEachMatchingRecord","criteria","callback","attrs","sortersArr","comparison","r","c","keys","all_keys","subarrays","map","d","flatColKey","flatRowKey","len2","o","fromCharCode","agg","pivotUtilities","pivotData","colsExpandHandler","compactLayout","getClickHandler","rowExpandHandler","rowGap","rowsExpandHandler","spanSize","tbody","td","th","thead","totalAggregator","tr","txt","table","clickCallback","rowValues","colValues","filters","e","document","createElement","className","arr","len","noDraw","stop","parseInt","setAttribute","appendChild","textContent","onclick","innerHTML","colSpan","style","paddingLeft","pivot","inputOpts","locale","localeDefaults","dataClass","renderer","rendererOptions","error","console","stack","html","hasChildNodes","removeChild","lastChild","append","pivotUI","overwrite","attrLength","attrValues","colOrderArrow","existingOpts","fn1","initialRender","len3","materializedInput","ordering","pivotTable","recordsProcessed","refresh","refreshDelayed","rendererControl","rowOrderArrow","shownAttributes","shownInAggregators","shownInDragDrop","t","tr1","tr2","uiTable","unused","unusedAttrsVerticalAutoCutoff","unusedAttrsVerticalAutoOverride","hiddenAttributes","hiddenFromAggregators","hiddenFromDragDrop","menuLimit","exclusions","inclusions","unusedAttrsVertical","autoSortUnusedAttrs","onRefresh","showUI","base","class","addClass","appendTo","attrElem","checkContainer","closeFilterBox","controls","filterItem","filterItemExcluded","finalButtons","hasExcludedItem","placeholder","triangleLink","valueCount","valueList","values","hide","accept","accept_gen","trim","accepted","real_filter","substring","find","parent","show","prop","toggleClass","removeClass","left","top","currentTarget","position","css","key_a_to_z","rowSymbol","colSymbol","next","value_a_to_z","value_z_to_a","role","prepend","inArray","rendererName","len4","newDropdown","numInputsToProcess","pivotUIOptions","pvtVals","subopts","u","unusedAttrsContainer","w","remove","not","excludedItems","inclusionsInfo","children","setTimeout","sortable","update","ui","sender","connectWith","items","scope","colorScaleGenerator","heatmapper","numCols","numRows","nonRed","round","colorScale","forEachCell","elem","barcharter","range","bBase","bgColor","wrapper","height","bottom","right","background-color","padding-left","padding-right","padding","padding-top","text-align","el","Array","parentNode","key","up","level","selecttion","getter","nth","hasClass","cell","initIndex","insertPoint","parentIndex","closest","_old","rowSpan","change","span","_span","expand","levels","trigger","handler","ev","target"],"mappings":"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","file":"pivot.min.js","sourcesContent":["callWithJQuery = (pivotModule) ->\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\n        pivotModule require(\"jquery\")\n    else if typeof define is \"function\" and define.amd # AMD\n        define [\"jquery\"], pivotModule\n    # Plain browser env\n    else\n        pivotModule jQuery\n\ncallWithJQuery ($) ->\n\n    ###\n    Utilities\n    ###\n\n    addSeparators = (nStr, thousandsSep, decimalSep) ->\n        nStr += ''\n        x = nStr.split('.')\n        x1 = x[0]\n        x2 = if x.length > 1 then  decimalSep + x[1] else ''\n        rgx = /(\\d+)(\\d{3})/\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2') while rgx.test(x1)\n        return x1 + x2\n\n    numberFormat = (opts) ->\n        defaults =\n            digitsAfterDecimal: 2, scaler: 1,\n            thousandsSep: \",\", decimalSep: \".\"\n            prefix: \"\", suffix: \"\"\n        opts = $.extend({}, defaults, opts)\n        (x) ->\n            return \"\" if isNaN(x) or not isFinite(x)\n            result = addSeparators (opts.scaler*x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep\n            return \"\"+opts.prefix+result+opts.suffix\n\n    #aggregator templates default to US number formatting but this is overrideable\n    usFmt = numberFormat()\n    usFmtInt = numberFormat(digitsAfterDecimal: 0)\n    usFmtPct = numberFormat(digitsAfterDecimal:1, scaler: 100, suffix: \"%\")\n\n    aggregatorTemplates =\n        count: (formatter=usFmtInt) -> () -> (data, rowKey, colKey) ->\n            count: 0\n            push:  -> @count++\n            value: -> @count\n            format: formatter\n\n        uniques: (fn, formatter=usFmtInt) -> ([attr]) -> (data, rowKey, colKey) ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> fn(@uniq)\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        sum: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            push: (record) -> @sum += parseFloat(record[attr]) if not isNaN parseFloat(record[attr])\n            value: -> @sum\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        extremes: (mode, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            sorter: getSort(data?.sorters, attr)\n            push: (record) ->\n                x = record[attr]\n                if mode in [\"min\", \"max\"]\n                    x = parseFloat(x)\n                    if not isNaN x then @val = Math[mode](x, @val ? x)\n                if mode == \"first\" then @val = x if @sorter(x, @val ? x) <= 0\n                if mode == \"last\"  then @val = x if @sorter(x, @val ? x) >= 0\n            value: -> @val\n            format: (x) -> if isNaN(x) then x else formatter(x)\n            numInputs: if attr? then 0 else 1\n\n        quantile: (q, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            vals: []\n            push: (record) ->\n                x = parseFloat(record[attr])\n                @vals.push(x) if not isNaN(x)\n            value: ->\n                return null if @vals.length == 0\n                @vals.sort((a,b) -> a-b)\n                i = (@vals.length-1)*q\n                return (@vals[Math.floor(i)] + @vals[Math.ceil(i)])/2.0\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        runningStat: (mode=\"mean\", ddof=1, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            n: 0.0, m: 0.0, s: 0.0\n            push: (record) ->\n                x = parseFloat(record[attr])\n                return if isNaN(x)\n                @n += 1.0\n                if @n == 1.0\n                    @m = x\n                else\n                    m_new = @m + (x - @m)/@n\n                    @s = @s + (x - @m)*(x - m_new)\n                    @m = m_new\n            value: ->\n                if mode == \"mean\"\n                    return if @n == 0 then 0/0 else @m\n                return 0 if @n <= ddof\n                switch mode\n                    when \"var\"   then @s/(@n-ddof)\n                    when \"stdev\" then Math.sqrt(@s/(@n-ddof))\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        sumOverSum: (formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: -> @sumNum/@sumDenom\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        sumOverSumBound80: (upper=true, formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: ->\n                sign = if upper then 1 else -1\n                (0.821187207574908/@sumDenom + @sumNum/@sumDenom + 1.2815515655446004*sign*\n                    Math.sqrt(0.410593603787454/ (@sumDenom*@sumDenom) + (@sumNum*(1 - @sumNum/ @sumDenom))/ (@sumDenom*@sumDenom)))/\n                    (1 + 1.642374415149816/@sumDenom)\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        fractionOf: (wrapped, type=\"total\", formatter=usFmtPct) -> (x...) -> (data, rowKey, colKey) ->\n            selector: {total:[[],[]],row:[rowKey,[]],col:[[],colKey]}[type]\n            inner: wrapped(x...)(data, rowKey, colKey)\n            push: (record) -> @inner.push record\n            format: formatter\n            value: -> @inner.value() / data.getAggregator(@selector...).inner.value()\n            numInputs: wrapped(x...)().numInputs\n\n    aggregatorTemplates.countUnique = (f) -> aggregatorTemplates.uniques(((x) -> x.length), f)\n    aggregatorTemplates.listUnique =  (s) -> aggregatorTemplates.uniques(((x) -> x.sort(naturalSort).join(s)), ((x)->x))\n    aggregatorTemplates.max =         (f) -> aggregatorTemplates.extremes('max', f)\n    aggregatorTemplates.min =         (f) -> aggregatorTemplates.extremes('min', f)\n    aggregatorTemplates.first =       (f) -> aggregatorTemplates.extremes('first', f)\n    aggregatorTemplates.last =        (f) -> aggregatorTemplates.extremes('last', f)\n    aggregatorTemplates.median =      (f) -> aggregatorTemplates.quantile(0.5, f)\n    aggregatorTemplates.average =     (f) -> aggregatorTemplates.runningStat(\"mean\", 1, f)\n    aggregatorTemplates.var =         (ddof, f) -> aggregatorTemplates.runningStat(\"var\", ddof, f)\n    aggregatorTemplates.stdev =       (ddof, f) -> aggregatorTemplates.runningStat(\"stdev\", ddof, f)\n\n    #default aggregators & renderers use US naming and number formatting\n    aggregators = do (tpl = aggregatorTemplates) ->\n        \"Count\":                tpl.count(usFmtInt)\n        \"Count Unique Values\":  tpl.countUnique(usFmtInt)\n        \"List Unique Values\":   tpl.listUnique(\", \")\n        \"Sum\":                  tpl.sum(usFmt)\n        \"Integer Sum\":          tpl.sum(usFmtInt)\n        \"Average\":              tpl.average(usFmt)\n        \"Median\":               tpl.median(usFmt)\n        \"Sample Variance\":      tpl.var(1, usFmt)\n        \"Sample Standard Deviation\": tpl.stdev(1, usFmt)\n        \"Minimum\":              tpl.min(usFmt)\n        \"Maximum\":              tpl.max(usFmt)\n        \"First\":                tpl.first(usFmt)\n        \"Last\":                 tpl.last(usFmt)\n        \"Sum over Sum\":         tpl.sumOverSum(usFmt)\n        \"80% Upper Bound\":      tpl.sumOverSumBound80(true, usFmt)\n        \"80% Lower Bound\":      tpl.sumOverSumBound80(false, usFmt)\n        \"Sum as Fraction of Total\":     tpl.fractionOf(tpl.sum(),   \"total\", usFmtPct)\n        \"Sum as Fraction of Rows\":      tpl.fractionOf(tpl.sum(),   \"row\",   usFmtPct)\n        \"Sum as Fraction of Columns\":   tpl.fractionOf(tpl.sum(),   \"col\",   usFmtPct)\n        \"Count as Fraction of Total\":   tpl.fractionOf(tpl.count(), \"total\", usFmtPct)\n        \"Count as Fraction of Rows\":    tpl.fractionOf(tpl.count(), \"row\",   usFmtPct)\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\",   usFmtPct)\n\n    renderers =\n        \"Table\":          (data, opts) ->   pivotTableRenderer(data, opts)\n        \"Table Barchart\": (data, opts) -> $(pivotTableRenderer(data, opts)).barchart()\n        \"Heatmap\":        (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\",    opts)\n        \"Row Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts)\n        \"Col Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts)\n\n    locales =\n        en:\n            aggregators: aggregators\n            renderers: renderers\n            localeStrings:\n                renderError: \"An error occurred rendering the PivotTable results.\"\n                computeError: \"An error occurred computing the PivotTable results.\"\n                uiRenderError: \"An error occurred rendering the PivotTable UI.\"\n                selectAll: \"Select All\"\n                selectNone: \"Select None\"\n                tooMany: \"(too many to list)\"\n                filterResults: \"Filter values\"\n                apply: \"Apply\"\n                cancel: \"Cancel\"\n                totals: \"Totals\" #for table renderer\n                vs: \"vs\" #for gchart renderer\n                by: \"by\" #for gchart renderer\n\n    #dateFormat deriver l10n requires month and day names to be passed in directly\n    mthNamesEn = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\n    dayNamesEn = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\n    zeroPad = (number) -> (\"0\"+number).substr(-2,2)\n\n    derivers =\n        bin: (col, binWidth) -> (record) -> record[col] - record[col] % binWidth\n        dateFormat: (col, formatString, utcOutput=false, mthNames=mthNamesEn, dayNames=dayNamesEn) ->\n            utc = if utcOutput then \"UTC\" else \"\"\n            (record) -> #thanks http://stackoverflow.com/a/12213072/112871\n                date = new Date(Date.parse(record[col]))\n                if isNaN(date) then return \"\"\n                formatString.replace /%(.)/g, (m, p) ->\n                    switch p\n                        when \"y\" then date[\"get#{utc}FullYear\"]()\n                        when \"m\" then zeroPad(date[\"get#{utc}Month\"]()+1)\n                        when \"n\" then mthNames[date[\"get#{utc}Month\"]()]\n                        when \"d\" then zeroPad(date[\"get#{utc}Date\"]())\n                        when \"w\" then dayNames[date[\"get#{utc}Day\"]()]\n                        when \"x\" then date[\"get#{utc}Day\"]()\n                        when \"H\" then zeroPad(date[\"get#{utc}Hours\"]())\n                        when \"M\" then zeroPad(date[\"get#{utc}Minutes\"]())\n                        when \"S\" then zeroPad(date[\"get#{utc}Seconds\"]())\n                        else \"%\" + p\n\n    rx = /(\\d+)|(\\D+)/g\n    rd = /\\d/\n    rz = /^0/\n    naturalSort = (as, bs, nulls_first=true) =>\n        #nulls first\n        nf = if nulls_first then 1 else -1\n        return -1*nf if bs? and not as?\n        return  1*nf if as? and not bs?\n\n        #then raw NaNs\n        return -1 if typeof as == \"number\" and isNaN(as)\n        return  1 if typeof bs == \"number\" and isNaN(bs)\n\n        #numbers and numbery strings group together\n        nas = +as\n        nbs = +bs\n        return -1 if nas < nbs\n        return  1 if nas > nbs\n\n        #within that, true numbers before numbery strings\n        return -1 if typeof as == \"number\" and typeof bs != \"number\"\n        return  1 if typeof bs == \"number\" and typeof as != \"number\"\n        return  0 if typeof as == \"number\" and typeof bs == \"number\"\n\n        # 'Infinity' is a textual number, so less than 'A'\n        return -1 if isNaN(nbs) and not isNaN(nas)\n        return  1 if isNaN(nas) and not isNaN(nbs)\n\n        #finally, \"smart\" string sorting per http://stackoverflow.com/a/4373421/112871\n        a = String(as)\n        b = String(bs)\n        return 0 if a == b\n        return (if a > b then 1 else -1) unless rd.test(a) and rd.test(b)\n\n        #special treatment for strings containing digits\n        a = a.match(rx) #create digits vs non-digit chunks and iterate through\n        b = b.match(rx)\n        while a.length and b.length\n            a1 = a.shift()\n            b1 = b.shift()\n            if a1 != b1\n                if rd.test(a1) and rd.test(b1) #both are digit chunks\n                    return a1.replace(rz, \".0\") - b1.replace(rz, \".0\")\n                else\n                    return (if a1 > b1 then 1 else -1)\n        return a.length - b.length\n\n    sortAs = (order) ->\n        mapping = {}\n        l_mapping = {} # sort lowercased keys similarly\n        for i, x of order\n            mapping[x] = i\n            l_mapping[x.toLowerCase()] = i if typeof x == \"string\"\n        (a, b) ->\n            if mapping[a]? and mapping[b]? then mapping[a] - mapping[b]\n            else if mapping[a]? then -1\n            else if mapping[b]? then 1\n            else if l_mapping[a]? and l_mapping[b]? then l_mapping[a] - l_mapping[b]\n            else if l_mapping[a]? then -1\n            else if l_mapping[b]? then 1\n            else naturalSort(a,b)\n\n    getSort = (sorters, attr) ->\n        if sorters?\n            if $.isFunction(sorters)\n                sort = sorters(attr)\n                return sort if $.isFunction(sort)\n            else if sorters[attr]?\n                return sorters[attr]\n        return naturalSort\n\n    ###\n    Data Model class\n    ###\n\n    class PivotData\n        constructor: (input, opts = {}) ->\n            @input = input\n            @aggregator = opts.aggregator ? aggregatorTemplates.count()()\n            @aggregatorName = opts.aggregatorName ? \"Count\"\n            @colAttrs = opts.cols ? []\n            @rowAttrs = opts.rows ? []\n            @valAttrs = opts.vals ? []\n            @sorters = opts.sorters ? {}\n            @rowOrder = opts.rowOrder ? \"key_a_to_z\"\n            @colOrder = opts.colOrder ? \"key_a_to_z\"\n            @derivedAttributes = opts.derivedAttributes ? {}\n            @filter = opts.filter ? (-> true)\n            @tree = {}\n            @rowKeys = []\n            @colKeys = []\n            @rowTotals = {}\n            @colTotals = {}\n            @allTotal = @aggregator(this, [], [])\n            @sorted = false\n            @grouping = opts.grouping ? false\n            @rowGroupBefore = opts.grouping?.rowGroupBefore ? true\n            @colGroupBefore = opts.grouping?.colGroupBefore ? false\n\n            # iterate through input, accumulating data for cells\n            PivotData.forEachRecord @input, @derivedAttributes, (record) =>\n                @processRecord(record) if @filter(record)\n\n        #can handle arrays or jQuery selections of tables\n        @forEachRecord = (input, derivedAttributes, f) ->\n            if $.isEmptyObject derivedAttributes\n                addRecord = f\n            else\n                addRecord = (record) ->\n                    record[k] = v(record) ? record[k] for k, v of derivedAttributes\n                    f(record)\n\n            #if it's a function, have it call us back\n            if $.isFunction(input)\n                input(addRecord)\n            else if $.isArray(input)\n                if $.isArray(input[0]) #array of arrays\n                    for own i, compactRecord of input when i > 0\n                        record = {}\n                        record[k] = compactRecord[j] for own j, k of input[0]\n                        addRecord(record)\n                else #array of objects\n                    addRecord(record) for record in input\n            else if input instanceof $\n                tblCols = []\n                $(\"thead > tr > th\", input).each (i) -> tblCols.push $(this).text()\n                $(\"tbody > tr\", input).each (i) ->\n                    record = {}\n                    $(\"td\", this).each (j) -> record[tblCols[j]] = $(this).text()\n                    addRecord(record)\n            else\n                throw new Error(\"unknown input format\")\n\n        forEachMatchingRecord: (criteria, callback) ->\n            PivotData.forEachRecord @input, @derivedAttributes, (record) =>\n                return if not @filter(record)\n                for k, v of criteria\n                    return if v != (record[k] ? \"null\")\n                callback(record)\n\n        arrSort: (attrs, nulls_first) =>\n            sortersArr = (getSort(@sorters, a) for a in attrs)\n            (a,b) ->\n                for own i, sorter of sortersArr\n                    comparison = sorter(a[i], b[i], nulls_first)\n                    return comparison if comparison != 0\n                return 0\n\n        sortKeys: () =>\n            if not @sorted\n                @sorted = true\n                v = (r,c) => @getAggregator(r,c).value()\n                switch @rowOrder\n                    when \"value_a_to_z\"  then @rowKeys.sort (a,b) =>  naturalSort v(a,[]), v(b,[])\n                    when \"value_z_to_a\" then @rowKeys.sort (a,b) => -naturalSort v(a,[]), v(b,[])\n                    else                     @rowKeys.sort @arrSort(@rowAttrs, @rowGroupBefore)\n                switch @colOrder\n                    when \"value_a_to_z\"  then @colKeys.sort (a,b) =>  naturalSort v([],a), v([],b)\n                    when \"value_z_to_a\" then @colKeys.sort (a,b) => -naturalSort v([],a), v([],b)\n                    else                     @colKeys.sort @arrSort(@colAttrs, @colGroupBefore)\n\n        filterByLength: (keys, length) => keys.filter (x) -> x.length == length\n\n        getColKeys: (all_keys=false) =>\n            @sortKeys()\n            return if all_keys then @colKeys else filterByLength @colKeys, @colAttrs.length\n\n        getRowKeys: (all_keys=false) =>\n            @sortKeys()\n            return if all_keys then @rowKeys else filterByLength @rowKeys, @rowAttrs.length\n\n        # subarrays [1,2,3] => [[], [1], [1,2], [1,2,3]]\n        subarrays: (x) -> x.map (d,i) => x.slice(0,i+1)\n\n        processRecord: (record) -> #this code is called in a tight loop\n            colKeys = []\n            rowKeys = []\n            colKeys.push record[x] ? \"null\" for x in @colAttrs\n            rowKeys.push record[x] ? \"null\" for x in @rowAttrs\n            colKeys = if @grouping and colKeys.length then @subarrays colKeys else [ colKeys ]\n            rowKeys = if @grouping and rowKeys.length then @subarrays rowKeys else [ rowKeys ]\n\n            @allTotal.push record\n\n            for j, rowKey of rowKeys\n                flatRowKey = rowKey.join(String.fromCharCode(0))\n\n                for i, colKey of colKeys\n                    flatColKey = colKey.join(String.fromCharCode(0))\n\n                    if rowKey.length != 0\n                        if not @rowTotals[flatRowKey]\n                            @rowKeys.push rowKey\n                            @rowTotals[flatRowKey] = @aggregator(this, rowKey, [])\n                        @rowTotals[flatRowKey].push record unless @grouping and colKey.length\n\n                    if colKey.length != 0\n                        if not @colTotals[flatColKey]\n                            @colKeys.push colKey\n                            @colTotals[flatColKey] = @aggregator(this, [], colKey)\n                        @colTotals[flatColKey].push record unless @grouping and rowKey.length\n\n                    if colKey.length != 0 and rowKey.length != 0\n                        if not @tree[flatRowKey]\n                            @tree[flatRowKey] = {}\n                        if not @tree[flatRowKey][flatColKey]\n                            @tree[flatRowKey][flatColKey] = @aggregator(this, rowKey, colKey)\n                        @tree[flatRowKey][flatColKey].push record\n\n        getAggregator: (rowKey, colKey) =>\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n            if rowKey.length == 0 and colKey.length == 0\n                agg = @allTotal\n            else if rowKey.length == 0\n                agg = @colTotals[flatColKey]\n            else if colKey.length == 0\n                agg = @rowTotals[flatRowKey]\n            else\n                agg = @tree[flatRowKey][flatColKey]\n            return agg ? {value: (-> null), format: -> \"\"}\n\n    #expose these to the outside world\n    $.pivotUtilities = {aggregatorTemplates, aggregators, renderers, derivers, locales,\n        naturalSort, numberFormat, sortAs, PivotData}\n\n    ###\n    Default Renderer for hierarchical table layout\n    ###\n\n    pivotTableRenderer = (pivotData, opts) ->\n\n        defaults =\n            table:\n                clickCallback: null\n                rowTotals: true\n                colTotals: true\n            localeStrings: totals: \"Totals\"\n\n        opts = $.extend(true, {}, defaults, opts)\n\n        colAttrs = pivotData.colAttrs\n        rowAttrs = pivotData.rowAttrs\n        rowKeys = pivotData.getRowKeys(true)\n        colKeys = pivotData.getColKeys(true)\n\n        if opts.table.clickCallback\n            getClickHandler = (value, rowValues, colValues) ->\n                filters = {}\n                filters[attr] = colValues[i] for own i, attr of colAttrs when colValues[i]?\n                filters[attr] = rowValues[i] for own i, attr of rowAttrs when rowValues[i]?\n                return (e) -> opts.table.clickCallback(e, value, filters, pivotData)\n\n        compactLayout = (opts.table.compactLayout ? true) and pivotData.grouping\n        rowExpandHandler = if compactLayout then expandRowCol else if pivotData.rowGroupBefore then expandWithSpan else expandRowsGroupAfter\n\n        rowsExpandHandler = getExpandHandler rowKeys, true,  rowExpandHandler\n        colsExpandHandler = getExpandHandler colKeys, false, expandWithSpan\n\n        #now actually build the output\n        result = document.createElement(\"table\")\n        result.className = \"pvtTable\"\n\n        #helper function for setting row/col-span in pivotTableRenderer\n        spanSize = (arr, i, j) ->\n            if i != 0\n                noDraw = true\n                for x in [0..j]\n                    if arr[i-1][x] != arr[i][x]\n                        noDraw = false\n                if noDraw\n                  return -1 #do not draw cell\n            len = 0\n            while i+len < arr.length\n                stop = false\n                for x in [0..j]\n                    stop = true if arr[i][x] != arr[i+len][x]\n                break if stop\n                len++\n            return len\n\n        #the first few rows are for col headers\n        thead = document.createElement(\"thead\")\n        for own j, c of colAttrs\n            tr = document.createElement(\"tr\")\n            if parseInt(j) == 0 and rowAttrs.length != 0\n                th = document.createElement(\"th\")\n                th.setAttribute(\"colspan\", rowAttrs.length)\n                th.setAttribute(\"rowspan\", colAttrs.length)\n                tr.appendChild th\n            th = document.createElement(\"th\")\n            th.className = \"pvtAxisLabel\"\n            th.textContent = c\n            if pivotData.grouping and j < colAttrs.length - 1\n                th.onclick = getExpandAllHandler pivotData, +j, false\n                th.className += \" open level#{j}\"\n            tr.appendChild th\n            for own i, colKey of colKeys\n                x = spanSize(colKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtColLabel\"\n                    th.className += \" col#{if pivotData.colGroupBefore then +i else +i+x-1}\"\n                    th.textContent = colKey[j]\n                    th.setAttribute(\"colspan\", x)\n                    if parseInt(j) == colAttrs.length-1 and rowAttrs.length != 0\n                        th.setAttribute(\"rowspan\", 2)\n                    if pivotData.grouping and j < colAttrs.length - 1 and colKey[j]\n                        th.className += \" pvtSubtotal open\"\n                        th.onclick = colsExpandHandler\n                    tr.appendChild th\n            if parseInt(j) == 0 && opts.table.rowTotals\n                th = document.createElement(\"th\")\n                th.className = \"pvtTotalLabel pvtRowTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                th.setAttribute(\"rowspan\", colAttrs.length + (if rowAttrs.length ==0 then 0 else 1))\n                tr.appendChild th\n            thead.appendChild tr\n\n        #then a row for row header headers\n        if rowAttrs.length !=0\n            tr = document.createElement(\"tr\")\n            for own i, r of rowAttrs\n                th = document.createElement(\"th\")\n                th.className = \"pvtAxisLabel\"\n                th.textContent = r\n                if pivotData.grouping and i < rowAttrs.length - 1\n                    th.className += \" open level#{i}\"\n                    th.onclick = getExpandAllHandler pivotData, +i, true\n                tr.appendChild th\n            th = document.createElement(\"th\")\n            if colAttrs.length ==0\n                th.className = \"pvtTotalLabel pvtRowTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n            tr.appendChild th\n            thead.appendChild tr\n        result.appendChild thead\n\n        #now the actual data rows, with their row headers and totals\n        tbody = document.createElement(\"tbody\")\n        for own i, rowKey of rowKeys\n            tr = document.createElement(\"tr\")\n            rowGap = rowAttrs.length - rowKey.length\n            tr.className = if rowGap then \"pvtSubtotal level#{rowKey.length}\" else \"pvtData\"\n            for own j, txt of rowKey\n                continue if compactLayout and j < rowKey.length - 1\n                x = if compactLayout then 1 else spanSize(rowKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtRowLabel\"\n                    th.className += \" row#{if pivotData.rowGroupBefore then +i else +i+x-1}\"\n                    th.textContent = txt\n                    th.setAttribute(\"rowspan\", x)\n                    if compactLayout\n                        th.colSpan = rowAttrs.length\n                        th.style.paddingLeft = 5 + parseInt(j) * 20 + 'px'\n                    if pivotData.grouping and j < rowAttrs.length - 1\n                        th.className += \" open\"\n                        th.onclick = rowsExpandHandler\n                    tr.appendChild th\n\n            if !compactLayout and rowGap\n                th = document.createElement(\"th\")\n                th.colSpan = rowGap\n                th.textContent = \"Total (#{rowKey[j]})\"\n                tr.appendChild th\n\n            if colAttrs.length\n                th.colSpan++\n\n            for own j, colKey of colKeys #this is the tight loop\n                aggregator = pivotData.getAggregator(rowKey, colKey)\n                val = aggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtVal \" if not rowGap\n                td.className += \"row#{i} col#{j}\"\n                if colAttrs.length - colKey.length\n                    td.className = \"pvtSubtotal level#{colKey.length} row#{i} col#{j}\"\n                td.textContent = aggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, rowKey, colKey)\n                tr.appendChild td\n\n            if opts.table.rowTotals || colAttrs.length == 0\n                totalAggregator = pivotData.getAggregator(rowKey, [])\n                val = totalAggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtTotal rowTotal\"\n                td.textContent = totalAggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, rowKey, [])\n                td.setAttribute(\"data-for\", \"row\"+i)\n                tr.appendChild td\n            tbody.appendChild tr\n\n        #finally, the row for col totals, and a grand total\n        if opts.table.colTotals || rowAttrs.length == 0\n            tr = document.createElement(\"tr\")\n            if opts.table.colTotals || rowAttrs.length == 0\n                th = document.createElement(\"th\")\n                th.className = \"pvtTotalLabel pvtColTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                th.setAttribute(\"colspan\", rowAttrs.length + (if colAttrs.length == 0 then 0 else 1))\n                tr.appendChild th\n            for own j, colKey of colKeys\n                totalAggregator = pivotData.getAggregator([], colKey)\n                val = totalAggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtTotal colTotal col#{j}\"\n                td.className += \" pvtSubtotal level#{colKey.length}\" if colKey.length != colAttrs.length\n                td.textContent = totalAggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, [], colKey)\n                td.setAttribute(\"data-for\", \"col\"+j)\n                tr.appendChild td\n            if opts.table.rowTotals || colAttrs.length == 0\n                totalAggregator = pivotData.getAggregator([], [])\n                val = totalAggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtGrandTotal\"\n                td.textContent = totalAggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, [], [])\n                tr.appendChild td\n            tbody.appendChild tr\n        result.appendChild tbody\n\n        #squirrel this away for later\n        result.setAttribute(\"data-numrows\", rowKeys.length)\n        result.setAttribute(\"data-numcols\", colKeys.length)\n\n        return result\n\n    ###\n    Pivot Table core: create PivotData object and call Renderer on it\n    ###\n\n    $.fn.pivot = (input, inputOpts, locale=\"en\") ->\n        locale = \"en\" if not locales[locale]?\n        defaults =\n            cols : [], rows: [], vals: []\n            rowOrder: \"key_a_to_z\", colOrder: \"key_a_to_z\"\n            dataClass: PivotData\n            filter: -> true\n            aggregator: aggregatorTemplates.count()()\n            aggregatorName: \"Count\"\n            sorters: {}\n            derivedAttributes: {}\n            renderer: pivotTableRenderer\n\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings)\n        localeDefaults =\n            rendererOptions: {localeStrings}\n            localeStrings: localeStrings\n\n        opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts))\n\n        result = null\n        try\n            pivotData = new opts.dataClass(input, opts)\n            try\n                result = opts.renderer(pivotData, opts.rendererOptions)\n            catch e\n                console.error(e.stack) if console?\n                result = $(\"<span>\").html opts.localeStrings.renderError\n        catch e\n            console.error(e.stack) if console?\n            result = $(\"<span>\").html opts.localeStrings.computeError\n\n        x = this[0]\n        x.removeChild(x.lastChild) while x.hasChildNodes()\n        return @append result\n\n\n    ###\n    Pivot Table UI: calls Pivot Table core above with options set by user\n    ###\n\n    $.fn.pivotUI = (input, inputOpts, overwrite = false, locale=\"en\") ->\n        locale = \"en\" if not locales[locale]?\n        defaults =\n            derivedAttributes: {}\n            aggregators: locales[locale].aggregators\n            renderers: locales[locale].renderers\n            hiddenAttributes: []\n            hiddenFromAggregators: []\n            hiddenFromDragDrop: []\n            menuLimit: 500\n            cols: [], rows: [], vals: []\n            rowOrder: \"key_a_to_z\", colOrder: \"key_a_to_z\"\n            dataClass: PivotData\n            exclusions: {}\n            inclusions: {}\n            unusedAttrsVertical: 85\n            autoSortUnusedAttrs: false\n            onRefresh: null\n            showUI: true\n            filter: -> true\n            sorters: {}\n\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings)\n        localeDefaults =\n            rendererOptions: {localeStrings}\n            localeStrings: localeStrings\n\n        existingOpts = @data \"pivotUIOptions\"\n        if not existingOpts? or overwrite\n            opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts))\n        else\n            opts = existingOpts\n\n        try\n            # do a first pass on the data to cache a materialized copy of any\n            # function-valued inputs and to compute dimension cardinalities\n            attrValues = {}\n            materializedInput = []\n            recordsProcessed = 0\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) ->\n                return unless opts.filter(record)\n                materializedInput.push(record)\n                for own attr of record\n                    if not attrValues[attr]?\n                        attrValues[attr] = {}\n                        if recordsProcessed > 0\n                            attrValues[attr][\"null\"] = recordsProcessed\n                for attr of attrValues\n                    value = record[attr] ? \"null\"\n                    attrValues[attr][value] ?= 0\n                    attrValues[attr][value]++\n                recordsProcessed++\n\n            #start building the output\n            uiTable = $(\"<table>\", \"class\": \"pvtUi\").attr(\"cellpadding\", 5)\n\n            #renderer control\n            rendererControl = $(\"<td>\").addClass(\"pvtUiCell\")\n\n            renderer = $(\"<select>\")\n                .addClass('pvtRenderer')\n                .appendTo(rendererControl)\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.renderers\n                $(\"<option>\").val(x).html(x).appendTo(renderer)\n\n\n            #axis list, including the double-click menu\n            unused = $(\"<td>\").addClass('pvtAxisContainer pvtUnused pvtUiCell')\n            shownAttributes = (a for a of attrValues when a not in opts.hiddenAttributes)\n            shownInAggregators = (c for c in shownAttributes when c not in opts.hiddenFromAggregators)\n            shownInDragDrop = (c for c in shownAttributes when c not in opts.hiddenFromDragDrop)\n\n\n            unusedAttrsVerticalAutoOverride = false\n            if opts.unusedAttrsVertical == \"auto\"\n                unusedAttrsVerticalAutoCutoff = 120 # legacy support\n            else\n                unusedAttrsVerticalAutoCutoff = parseInt opts.unusedAttrsVertical\n\n            if not isNaN(unusedAttrsVerticalAutoCutoff)\n                attrLength = 0\n                attrLength += a.length for a in shownInDragDrop\n                unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff\n\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                unused.addClass('pvtVertList')\n            else\n                unused.addClass('pvtHorizList')\n\n            for own i, attr of shownInDragDrop\n                do (attr) ->\n                    values = (v for v of attrValues[attr])\n                    hasExcludedItem = false\n                    valueList = $(\"<div>\").addClass('pvtFilterBox').hide()\n\n                    valueList.append $(\"<h4>\").append(\n                        $(\"<span>\").text(attr),\n                        $(\"<span>\").addClass(\"count\").text(\"(#{values.length})\"),\n                        )\n                    if values.length > opts.menuLimit\n                        valueList.append $(\"<p>\").html(opts.localeStrings.tooMany)\n                    else\n                        if values.length > 5\n                            controls = $(\"<p>\").appendTo(valueList)\n                            sorter = getSort(opts.sorters, attr)\n                            placeholder = opts.localeStrings.filterResults\n                            $(\"<input>\", {type: \"text\"}).appendTo(controls)\n                                .attr({placeholder: placeholder, class: \"pvtSearch\"})\n                                .bind \"keyup\", ->\n                                    filter = $(this).val().toLowerCase().trim()\n                                    accept_gen = (prefix, accepted) -> (v) ->\n                                        real_filter = filter.substring(prefix.length).trim()\n                                        return true if real_filter.length == 0\n                                        return Math.sign(sorter(v.toLowerCase(), real_filter)) in accepted\n                                    accept =\n                                        if      filter.indexOf(\">=\") == 0 then accept_gen(\">=\", [1,0])\n                                        else if filter.indexOf(\"<=\") == 0 then accept_gen(\"<=\", [-1,0])\n                                        else if filter.indexOf(\">\") == 0  then accept_gen(\">\",  [1])\n                                        else if filter.indexOf(\"<\") == 0  then accept_gen(\"<\",  [-1])\n                                        else if filter.indexOf(\"~\") == 0  then (v) ->\n                                                return true if filter.substring(1).trim().length == 0\n                                                v.toLowerCase().match(filter.substring(1))\n                                        else (v) -> v.toLowerCase().indexOf(filter) != -1\n\n                                    valueList.find('.pvtCheckContainer p label span.value').each ->\n                                        if accept($(this).text())\n                                            $(this).parent().parent().show()\n                                        else\n                                            $(this).parent().parent().hide()\n                            controls.append $(\"<br>\")\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\n                                .html(opts.localeStrings.selectAll)\n                                .bind \"click\", ->\n                                    valueList.find(\"input:visible:not(:checked)\")\n                                        .prop(\"checked\", true).toggleClass(\"changed\")\n                                    return false\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\n                                .html(opts.localeStrings.selectNone)\n                                .bind \"click\", ->\n                                    valueList.find(\"input:visible:checked\")\n                                        .prop(\"checked\", false).toggleClass(\"changed\")\n                                    return false\n\n                        checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList)\n\n                        for value in values.sort(getSort(opts.sorters, attr))\n                             valueCount = attrValues[attr][value]\n                             filterItem = $(\"<label>\")\n                             filterItemExcluded = false\n                             if opts.inclusions[attr]\n                                filterItemExcluded = (value not in opts.inclusions[attr])\n                             else if opts.exclusions[attr]\n                                filterItemExcluded = (value in opts.exclusions[attr])\n                             hasExcludedItem ||= filterItemExcluded\n                             $(\"<input>\")\n                                .attr(\"type\", \"checkbox\").addClass('pvtFilter')\n                                .attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr,value])\n                                .appendTo(filterItem)\n                                .bind \"change\", -> $(this).toggleClass(\"changed\")\n                             filterItem.append $(\"<span>\").addClass(\"value\").text(value)\n                             filterItem.append $(\"<span>\").addClass(\"count\").text(\"(\"+valueCount+\")\")\n                             checkContainer.append $(\"<p>\").append(filterItem)\n\n                    closeFilterBox = ->\n                        if valueList.find(\"[type='checkbox']\").length >\n                               valueList.find(\"[type='checkbox']:checked\").length\n                                attrElem.addClass \"pvtFilteredAttribute\"\n                            else\n                                attrElem.removeClass \"pvtFilteredAttribute\"\n\n                            valueList.find('.pvtSearch').val('')\n                            valueList.find('.pvtCheckContainer p').show()\n                            valueList.hide()\n\n                    finalButtons = $(\"<p>\").appendTo(valueList)\n\n                    if values.length <= opts.menuLimit\n                        $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.apply)\n                            .appendTo(finalButtons).bind \"click\", ->\n                                if valueList.find(\".changed\").removeClass(\"changed\").length\n                                    refresh()\n                                closeFilterBox()\n\n                    $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.cancel)\n                        .appendTo(finalButtons).bind \"click\", ->\n                            valueList.find(\".changed:checked\")\n                                .removeClass(\"changed\").prop(\"checked\", false)\n                            valueList.find(\".changed:not(:checked)\")\n                                .removeClass(\"changed\").prop(\"checked\", true)\n                            closeFilterBox()\n\n                    triangleLink = $(\"<span>\").addClass('pvtTriangle')\n                        .html(\" &#x25BE;\").bind \"click\", (e) ->\n                            {left, top} = $(e.currentTarget).position()\n                            valueList.css(left: left+10, top: top+10).show()\n\n                    attrElem = $(\"<li>\").addClass(\"axis_#{i}\")\n                        .append $(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink)\n\n                    attrElem.addClass('pvtFilteredAttribute') if hasExcludedItem\n                    unused.append(attrElem).append(valueList)\n\n            tr1 = $(\"<tr>\").appendTo(uiTable)\n\n            #aggregator menu and value area\n\n            aggregator = $(\"<select>\").addClass('pvtAggregator')\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.aggregators\n                aggregator.append $(\"<option>\").val(x).html(x)\n\n            ordering =\n                key_a_to_z:   {rowSymbol: \"&varr;\", colSymbol: \"&harr;\", next: \"value_a_to_z\"}\n                value_a_to_z: {rowSymbol: \"&darr;\", colSymbol: \"&rarr;\", next: \"value_z_to_a\"}\n                value_z_to_a: {rowSymbol: \"&uarr;\", colSymbol: \"&larr;\", next: \"key_a_to_z\"}\n\n            rowOrderArrow = $(\"<a>\", role: \"button\").addClass(\"pvtRowOrder\")\n                .data(\"order\", opts.rowOrder).html(ordering[opts.rowOrder].rowSymbol)\n                .bind \"click\", ->\n                    $(this).data(\"order\", ordering[$(this).data(\"order\")].next)\n                    $(this).html(ordering[$(this).data(\"order\")].rowSymbol)\n                    refresh()\n\n            colOrderArrow = $(\"<a>\", role: \"button\").addClass(\"pvtColOrder\")\n                .data(\"order\", opts.colOrder).html(ordering[opts.colOrder].colSymbol)\n                .bind \"click\", ->\n                    $(this).data(\"order\", ordering[$(this).data(\"order\")].next)\n                    $(this).html(ordering[$(this).data(\"order\")].colSymbol)\n                    refresh()\n\n            $(\"<td>\").addClass('pvtVals pvtUiCell')\n              .appendTo(tr1)\n              .append(aggregator)\n              .append(rowOrderArrow)\n              .append(colOrderArrow)\n              .append($(\"<br>\"))\n\n            #column axes\n            $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols pvtUiCell').appendTo(tr1)\n\n            tr2 = $(\"<tr>\").appendTo(uiTable)\n\n            #row axes\n            tr2.append $(\"<td>\").addClass('pvtAxisContainer pvtRows pvtUiCell').attr(\"valign\", \"top\")\n\n            #the actual pivot table container\n            pivotTable = $(\"<td>\")\n                .attr(\"valign\", \"top\")\n                .addClass('pvtRendererArea')\n                .appendTo(tr2)\n\n            #finally the renderer dropdown and unused attribs are inserted at the requested location\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                uiTable.find('tr:nth-child(1)').prepend rendererControl\n                uiTable.find('tr:nth-child(2)').prepend unused\n            else\n                uiTable.prepend $(\"<tr>\").append(rendererControl).append(unused)\n\n            #render the UI in its default state\n            @html uiTable\n\n            #set up the UI initial state as requested by moving elements around\n\n            for x in opts.cols\n                @find(\".pvtCols\").append @find(\".axis_#{$.inArray(x, shownInDragDrop)}\")\n            for x in opts.rows\n                @find(\".pvtRows\").append @find(\".axis_#{$.inArray(x, shownInDragDrop)}\")\n            if opts.aggregatorName?\n                @find(\".pvtAggregator\").val opts.aggregatorName\n            if opts.rendererName?\n                @find(\".pvtRenderer\").val opts.rendererName\n\n            @find(\".pvtUiCell\").hide() unless opts.showUI\n\n            initialRender = true\n\n            #set up for refreshing\n            refreshDelayed = =>\n                subopts =\n                    derivedAttributes: opts.derivedAttributes\n                    localeStrings: opts.localeStrings\n                    rendererOptions: opts.rendererOptions\n                    sorters: opts.sorters\n                    cols: [], rows: []\n                    dataClass: opts.dataClass\n                    grouping: opts.grouping\n\n                numInputsToProcess = opts.aggregators[aggregator.val()]([])().numInputs ? 0\n                vals = []\n                @find(\".pvtRows li span.pvtAttr\").each -> subopts.rows.push $(this).data(\"attrName\")\n                @find(\".pvtCols li span.pvtAttr\").each -> subopts.cols.push $(this).data(\"attrName\")\n                @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                    if numInputsToProcess == 0\n                        $(this).remove()\n                    else\n                        numInputsToProcess--\n                        vals.push $(this).val() if $(this).val() != \"\"\n\n                if numInputsToProcess != 0\n                    pvtVals = @find(\".pvtVals\")\n                    for x in [0...numInputsToProcess]\n                        newDropdown = $(\"<select>\")\n                            .addClass('pvtAttrDropdown')\n                            .append($(\"<option>\"))\n                            .bind \"change\", -> refresh()\n                        for attr in shownInAggregators\n                            newDropdown.append($(\"<option>\").val(attr).text(attr))\n                        pvtVals.append(newDropdown)\n\n                if initialRender\n                    vals = opts.vals\n                    i = 0\n                    @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                        $(this).val vals[i]\n                        i++\n                    initialRender = false\n\n                subopts.aggregatorName = aggregator.val()\n                subopts.vals = vals\n                subopts.aggregator = opts.aggregators[aggregator.val()](vals)\n                subopts.renderer = opts.renderers[renderer.val()]\n                subopts.rowOrder = rowOrderArrow.data(\"order\")\n                subopts.colOrder = colOrderArrow.data(\"order\")\n                #construct filter here\n                exclusions = {}\n                @find('input.pvtFilter').not(':checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        exclusions[filter[0]].push( filter[1] )\n                    else\n                        exclusions[filter[0]] = [ filter[1] ]\n                #include inclusions when exclusions present\n                inclusions = {}\n                @find('input.pvtFilter:checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        if inclusions[filter[0]]?\n                            inclusions[filter[0]].push( filter[1] )\n                        else\n                            inclusions[filter[0]] = [ filter[1] ]\n\n                subopts.filter = (record) ->\n                    return false if not opts.filter(record)\n                    for k,excludedItems of exclusions\n                        return false if \"\"+(record[k] ? 'null') in excludedItems\n                    return true\n\n                pivotTable.pivot(materializedInput,subopts)\n                pivotUIOptions = $.extend {}, opts,\n                    cols: subopts.cols\n                    rows: subopts.rows\n                    colOrder: subopts.colOrder\n                    rowOrder: subopts.rowOrder\n                    vals: vals\n                    exclusions: exclusions\n                    inclusions: inclusions\n                    inclusionsInfo: inclusions #duplicated for backwards-compatibility\n                    aggregatorName: aggregator.val()\n                    rendererName: renderer.val()\n\n                @data \"pivotUIOptions\", pivotUIOptions\n\n                # if requested make sure unused columns are in alphabetical order\n                if opts.autoSortUnusedAttrs\n                    unusedAttrsContainer = @find(\"td.pvtUnused.pvtAxisContainer\")\n                    $(unusedAttrsContainer).children(\"li\")\n                        .sort((a, b) => naturalSort($(a).text(), $(b).text()))\n                        .appendTo unusedAttrsContainer\n\n                pivotTable.css(\"opacity\", 1)\n                opts.onRefresh(pivotUIOptions) if opts.onRefresh?\n\n            refresh = =>\n                pivotTable.css(\"opacity\", 0.5)\n                setTimeout refreshDelayed, 10\n\n            #the very first refresh will actually display the table\n            refresh()\n\n            @find(\".pvtAxisContainer\").sortable\n                    update: (e, ui) -> refresh() if not ui.sender?\n                    connectWith: @find(\".pvtAxisContainer\")\n                    items: 'li'\n                    placeholder: 'pvtPlaceholder'\n        catch e\n            console.error(e.stack) if console?\n            @html opts.localeStrings.uiRenderError\n        return this\n\n    ###\n    Heatmap post-processing\n    ###\n\n    $.fn.heatmap = (scope = \"heatmap\", opts) ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        # given a series of values\n        # must return a function to map a given value to a CSS color\n        colorScaleGenerator = opts?.heatmap?.colorScaleGenerator\n        colorScaleGenerator ?= (values) ->\n            min = Math.min(values...)\n            max = Math.max(values...)\n            return (x) ->\n                nonRed = 255 - Math.round 255*(x-min)/(max-min)\n                return \"rgb(255,#{nonRed},#{nonRed})\"\n\n        heatmapper = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            colorScale = colorScaleGenerator(values)\n            forEachCell (x, elem) -> elem.css \"background-color\", colorScale(x)\n\n        switch scope\n            when \"heatmap\"    then heatmapper \".pvtVal\"\n            when \"rowheatmap\" then heatmapper \".pvtVal.row#{i}\" for i in [0...numRows]\n            when \"colheatmap\" then heatmapper \".pvtVal.col#{j}\" for j in [0...numCols]\n\n        heatmapper \".pvtTotal.rowTotal\"\n        heatmapper \".pvtTotal.colTotal\"\n\n        return this\n\n    ###\n    Barchart post-processing\n    ###\n\n    $.fn.barchart = (opts) ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        barcharter = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            max = Math.max(values...)\n            if max < 0\n                max = 0\n            range = max;\n            min = Math.min(values...)\n            if min < 0\n                range = max - min\n            scaler = (x) -> 100*x/(1.4*range)\n            forEachCell (x, elem) ->\n                text = elem.text()\n                wrapper = $(\"<div>\").css\n                    \"position\": \"relative\"\n                    \"height\": \"55px\"\n                bgColor = \"gray\"\n                bBase = 0\n                if min < 0\n                    bBase = scaler(-min)\n                if x < 0\n                    bBase += scaler(x)\n                    bgColor = \"darkred\"\n                    x = -x\n                wrapper.append $(\"<div>\").css\n                    \"position\": \"absolute\"\n                    \"bottom\": bBase + \"%\"\n                    \"left\": 0\n                    \"right\": 0\n                    \"height\": scaler(x) + \"%\"\n                    \"background-color\": bgColor\n                wrapper.append $(\"<div>\").text(text).css\n                    \"position\":\"relative\"\n                    \"padding-left\":\"5px\"\n                    \"padding-right\":\"5px\"\n\n                elem.css(\"padding\": 0,\"padding-top\": \"5px\", \"text-align\": \"center\").html wrapper\n\n        barcharter \".pvtVal.row#{i}\" for i in [0...numRows]\n        barcharter \".pvtTotal.colTotal\"\n\n        return this\n\n    ###\n    Grouping fold/expand rows and cols\n    ###\n\n    childIndex = (el) -> Array.prototype.indexOf.call el.parentNode.children, el\n\n    childKeysIndices = (keys, n) ->\n        up = if keys[0].length == 1 then 1 else -1\n        len = keys[n].length\n        while (n = n+up; key = keys[n]) and key.length > len\n            if key.length == len+1 then n else continue\n\n    parentKeysIndices = (keys, n) ->\n        up = if keys[0].length == 1 then 1 else -1\n        while (len = keys[n].length) > 1\n            while (n = n-up; key = keys[n]) and key.length >= len then\n            n\n\n    levelKeysIndices = (keys, level) ->\n        (keys.filter (d) -> d.length == level).map keys.indexOf.bind(keys)\n\n    getAxis = (table, rows, level) ->\n        if rows\n            table.find(\"thead tr:last-child th.pvtAxisLabel:nth-of-type(#{level})\")\n        else\n            table.find(\"thead tr:nth-child(#{level}) th.pvtAxisLabel\")\n\n    getHeader = (table, rows, n) ->\n       table.find(if rows then \"tbody tr th.row#{n}\" else \"thead th.col#{n}\")\n\n    rowGetter = (table) ->\n        selecttion = table.find('tbody tr')\n        (n) -> $(selecttion[n])\n\n    colGetter = (table) ->\n        selecttion = table.find('tr')\n        (n) -> selecttion.find(\".col#{n}\")\n\n    showHide = (getter, keys, nth, show) ->\n        for i, n of childKeysIndices keys, nth\n            row = getter(n)\n            fn = if show then $.fn.show else $.fn.hide\n            fn.call row\n            if not row.hasClass('collapsed')\n                showHide getter, keys, n, show\n        true\n\n    expandRowsGroupAfter = (cell, rows, keys, nth) ->\n        table = $(cell).closest('table')\n        initIndex = childIndex cell.parentNode\n        getter = rowGetter table\n        row = getter nth\n\n        insertPoint = if row.hasClass('collapsed') then getter cell._old else row\n        cell._old = childIndex cell.parentNode if not row.hasClass('collapsed')\n        insertPoint.prepend cell\n\n        for i, p of parentKeysIndices keys, nth\n            parent = (getHeader table, rows, p)[0]\n            parentIndex = childIndex parent.parentNode\n            parent._old = parent._old ? parentIndex\n            if parent._old == initIndex and parent.rowSpan == 1\n                parent._old -= initIndex - childIndex cell.parentNode\n\n            insertPoint.prepend parent if initIndex == parentIndex\n\n        expandWithSpan cell, rows, keys, nth\n\n    expandWithSpan = (cell, rows, keys, nth) ->\n        table = $(cell).closest('table')\n        span = if rows then 'rowSpan' else 'colSpan'\n\n        [ cell._span, cell[span] ] = [ cell[span], cell._span ? 1 ]\n        change = cell[span] - cell._span\n\n        for i, p of parentKeysIndices keys, nth\n            parent = (getHeader table, rows, p)[0]\n            if parent[span] == 1\n                parent._span += change\n                break\n            parent[span] += change\n\n        expandRowCol cell, rows, keys, nth, parent\n\n    expandRowCol = (cell, rows, keys, nth, parent) ->\n        table = $(cell).closest('table')\n        getter = if rows then rowGetter table else colGetter table\n        span = if rows then 'rowSpan' else 'colSpan'\n\n        showHide getter, keys, nth, getter(nth).hasClass('collapsed') unless parent?[span] == 1\n        getter(nth).toggleClass 'collapsed'\n        $(cell).toggleClass 'open close'\n\n    expandAll = (pivotData, table, level, rows, expand) ->\n        if expand and level > 1\n            getAxis(table, rows, level-1).removeClass('close').addClass('open')\n            expandAll pivotData, table, level-1, rows, expand\n\n        levels = (if rows then pivotData.rowAttrs else pivotData.colAttrs).length - 1\n        if not expand and (level < levels)\n            getAxis(table, rows, i).removeClass('open').addClass('close') for i in [level+1..levels]\n\n        keys = if rows then pivotData.rowKeys else pivotData.colKeys\n        for i, n of levelKeysIndices keys, level\n            el = getHeader table, rows, n\n            el.trigger 'click' if expand == el.hasClass('close')\n        null\n\n    getExpandHandler = (keys, rows, handler) ->\n        (ev) ->\n            match = ev.target.className.match if rows then /row(\\d+)/ else /col(\\d+)/\n            handler ev.target, rows, keys, +match[1] if match\n\n    getExpandAllHandler = (pivotData, level, rows) ->\n        (ev) ->\n            expandAll pivotData, $(ev.target).closest('table'), level+1, rows, $(ev.target).hasClass('close')\n            $(ev.target).toggleClass('open close')\n","(function() {\n  var callWithJQuery,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n    slice = [].slice,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    hasProp = {}.hasOwnProperty;\n\n  callWithJQuery = function(pivotModule) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return pivotModule(require(\"jquery\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\"], pivotModule);\n    } else {\n      return pivotModule(jQuery);\n    }\n  };\n\n  callWithJQuery(function($) {\n\n    /*\n    Utilities\n     */\n    var PivotData, addSeparators, aggregatorTemplates, aggregators, childIndex, childKeysIndices, colGetter, dayNamesEn, derivers, expandAll, expandRowCol, expandRowsGroupAfter, expandWithSpan, getAxis, getExpandAllHandler, getExpandHandler, getHeader, getSort, levelKeysIndices, locales, mthNamesEn, naturalSort, numberFormat, parentKeysIndices, pivotTableRenderer, rd, renderers, rowGetter, rx, rz, showHide, sortAs, usFmt, usFmtInt, usFmtPct, zeroPad;\n    addSeparators = function(nStr, thousandsSep, decimalSep) {\n      var rgx, x, x1, x2;\n      nStr += '';\n      x = nStr.split('.');\n      x1 = x[0];\n      x2 = x.length > 1 ? decimalSep + x[1] : '';\n      rgx = /(\\d+)(\\d{3})/;\n      while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2');\n      }\n      return x1 + x2;\n    };\n    numberFormat = function(opts) {\n      var defaults;\n      defaults = {\n        digitsAfterDecimal: 2,\n        scaler: 1,\n        thousandsSep: \",\",\n        decimalSep: \".\",\n        prefix: \"\",\n        suffix: \"\"\n      };\n      opts = $.extend({}, defaults, opts);\n      return function(x) {\n        var result;\n        if (isNaN(x) || !isFinite(x)) {\n          return \"\";\n        }\n        result = addSeparators((opts.scaler * x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep);\n        return \"\" + opts.prefix + result + opts.suffix;\n      };\n    };\n    usFmt = numberFormat();\n    usFmtInt = numberFormat({\n      digitsAfterDecimal: 0\n    });\n    usFmtPct = numberFormat({\n      digitsAfterDecimal: 1,\n      scaler: 100,\n      suffix: \"%\"\n    });\n    aggregatorTemplates = {\n      count: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function() {\n          return function(data, rowKey, colKey) {\n            return {\n              count: 0,\n              push: function() {\n                return this.count++;\n              },\n              value: function() {\n                return this.count;\n              },\n              format: formatter\n            };\n          };\n        };\n      },\n      uniques: function(fn, formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return fn(this.uniq);\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  return this.sum += parseFloat(record[attr]);\n                }\n              },\n              value: function() {\n                return this.sum;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      extremes: function(mode, formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              sorter: getSort(data != null ? data.sorters : void 0, attr),\n              push: function(record) {\n                var ref, ref1, ref2, x;\n                x = record[attr];\n                if (mode === \"min\" || mode === \"max\") {\n                  x = parseFloat(x);\n                  if (!isNaN(x)) {\n                    this.val = Math[mode](x, (ref = this.val) != null ? ref : x);\n                  }\n                }\n                if (mode === \"first\") {\n                  if (this.sorter(x, (ref1 = this.val) != null ? ref1 : x) <= 0) {\n                    this.val = x;\n                  }\n                }\n                if (mode === \"last\") {\n                  if (this.sorter(x, (ref2 = this.val) != null ? ref2 : x) >= 0) {\n                    return this.val = x;\n                  }\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: function(x) {\n                if (isNaN(x)) {\n                  return x;\n                } else {\n                  return formatter(x);\n                }\n              },\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      quantile: function(q, formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              vals: [],\n              push: function(record) {\n                var x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.vals.push(x);\n                }\n              },\n              value: function() {\n                var i;\n                if (this.vals.length === 0) {\n                  return null;\n                }\n                this.vals.sort(function(a, b) {\n                  return a - b;\n                });\n                i = (this.vals.length - 1) * q;\n                return (this.vals[Math.floor(i)] + this.vals[Math.ceil(i)]) / 2.0;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      runningStat: function(mode, ddof, formatter) {\n        if (mode == null) {\n          mode = \"mean\";\n        }\n        if (ddof == null) {\n          ddof = 1;\n        }\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              n: 0.0,\n              m: 0.0,\n              s: 0.0,\n              push: function(record) {\n                var m_new, x;\n                x = parseFloat(record[attr]);\n                if (isNaN(x)) {\n                  return;\n                }\n                this.n += 1.0;\n                if (this.n === 1.0) {\n                  return this.m = x;\n                } else {\n                  m_new = this.m + (x - this.m) / this.n;\n                  this.s = this.s + (x - this.m) * (x - m_new);\n                  return this.m = m_new;\n                }\n              },\n              value: function() {\n                if (mode === \"mean\") {\n                  if (this.n === 0) {\n                    return 0 / 0;\n                  } else {\n                    return this.m;\n                  }\n                }\n                if (this.n <= ddof) {\n                  return 0;\n                }\n                switch (mode) {\n                  case \"var\":\n                    return this.s / (this.n - ddof);\n                  case \"stdev\":\n                    return Math.sqrt(this.s / (this.n - ddof));\n                }\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sumOverSum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                return this.sumNum / this.sumDenom;\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      sumOverSumBound80: function(upper, formatter) {\n        if (upper == null) {\n          upper = true;\n        }\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                var sign;\n                sign = upper ? 1 : -1;\n                return (0.821187207574908 / this.sumDenom + this.sumNum / this.sumDenom + 1.2815515655446004 * sign * Math.sqrt(0.410593603787454 / (this.sumDenom * this.sumDenom) + (this.sumNum * (1 - this.sumNum / this.sumDenom)) / (this.sumDenom * this.sumDenom))) / (1 + 1.642374415149816 / this.sumDenom);\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      fractionOf: function(wrapped, type, formatter) {\n        if (type == null) {\n          type = \"total\";\n        }\n        if (formatter == null) {\n          formatter = usFmtPct;\n        }\n        return function() {\n          var x;\n          x = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return function(data, rowKey, colKey) {\n            return {\n              selector: {\n                total: [[], []],\n                row: [rowKey, []],\n                col: [[], colKey]\n              }[type],\n              inner: wrapped.apply(null, x)(data, rowKey, colKey),\n              push: function(record) {\n                return this.inner.push(record);\n              },\n              format: formatter,\n              value: function() {\n                return this.inner.value() / data.getAggregator.apply(data, this.selector).inner.value();\n              },\n              numInputs: wrapped.apply(null, x)().numInputs\n            };\n          };\n        };\n      }\n    };\n    aggregatorTemplates.countUnique = function(f) {\n      return aggregatorTemplates.uniques((function(x) {\n        return x.length;\n      }), f);\n    };\n    aggregatorTemplates.listUnique = function(s) {\n      return aggregatorTemplates.uniques((function(x) {\n        return x.sort(naturalSort).join(s);\n      }), (function(x) {\n        return x;\n      }));\n    };\n    aggregatorTemplates.max = function(f) {\n      return aggregatorTemplates.extremes('max', f);\n    };\n    aggregatorTemplates.min = function(f) {\n      return aggregatorTemplates.extremes('min', f);\n    };\n    aggregatorTemplates.first = function(f) {\n      return aggregatorTemplates.extremes('first', f);\n    };\n    aggregatorTemplates.last = function(f) {\n      return aggregatorTemplates.extremes('last', f);\n    };\n    aggregatorTemplates.median = function(f) {\n      return aggregatorTemplates.quantile(0.5, f);\n    };\n    aggregatorTemplates.average = function(f) {\n      return aggregatorTemplates.runningStat(\"mean\", 1, f);\n    };\n    aggregatorTemplates[\"var\"] = function(ddof, f) {\n      return aggregatorTemplates.runningStat(\"var\", ddof, f);\n    };\n    aggregatorTemplates.stdev = function(ddof, f) {\n      return aggregatorTemplates.runningStat(\"stdev\", ddof, f);\n    };\n    aggregators = (function(tpl) {\n      return {\n        \"Count\": tpl.count(usFmtInt),\n        \"Count Unique Values\": tpl.countUnique(usFmtInt),\n        \"List Unique Values\": tpl.listUnique(\", \"),\n        \"Sum\": tpl.sum(usFmt),\n        \"Integer Sum\": tpl.sum(usFmtInt),\n        \"Average\": tpl.average(usFmt),\n        \"Median\": tpl.median(usFmt),\n        \"Sample Variance\": tpl[\"var\"](1, usFmt),\n        \"Sample Standard Deviation\": tpl.stdev(1, usFmt),\n        \"Minimum\": tpl.min(usFmt),\n        \"Maximum\": tpl.max(usFmt),\n        \"First\": tpl.first(usFmt),\n        \"Last\": tpl.last(usFmt),\n        \"Sum over Sum\": tpl.sumOverSum(usFmt),\n        \"80% Upper Bound\": tpl.sumOverSumBound80(true, usFmt),\n        \"80% Lower Bound\": tpl.sumOverSumBound80(false, usFmt),\n        \"Sum as Fraction of Total\": tpl.fractionOf(tpl.sum(), \"total\", usFmtPct),\n        \"Sum as Fraction of Rows\": tpl.fractionOf(tpl.sum(), \"row\", usFmtPct),\n        \"Sum as Fraction of Columns\": tpl.fractionOf(tpl.sum(), \"col\", usFmtPct),\n        \"Count as Fraction of Total\": tpl.fractionOf(tpl.count(), \"total\", usFmtPct),\n        \"Count as Fraction of Rows\": tpl.fractionOf(tpl.count(), \"row\", usFmtPct),\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\", usFmtPct)\n      };\n    })(aggregatorTemplates);\n    renderers = {\n      \"Table\": function(data, opts) {\n        return pivotTableRenderer(data, opts);\n      },\n      \"Table Barchart\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).barchart();\n      },\n      \"Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\", opts);\n      },\n      \"Row Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts);\n      },\n      \"Col Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts);\n      }\n    };\n    locales = {\n      en: {\n        aggregators: aggregators,\n        renderers: renderers,\n        localeStrings: {\n          renderError: \"An error occurred rendering the PivotTable results.\",\n          computeError: \"An error occurred computing the PivotTable results.\",\n          uiRenderError: \"An error occurred rendering the PivotTable UI.\",\n          selectAll: \"Select All\",\n          selectNone: \"Select None\",\n          tooMany: \"(too many to list)\",\n          filterResults: \"Filter values\",\n          apply: \"Apply\",\n          cancel: \"Cancel\",\n          totals: \"Totals\",\n          vs: \"vs\",\n          by: \"by\"\n        }\n      }\n    };\n    mthNamesEn = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    dayNamesEn = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    zeroPad = function(number) {\n      return (\"0\" + number).substr(-2, 2);\n    };\n    derivers = {\n      bin: function(col, binWidth) {\n        return function(record) {\n          return record[col] - record[col] % binWidth;\n        };\n      },\n      dateFormat: function(col, formatString, utcOutput, mthNames, dayNames) {\n        var utc;\n        if (utcOutput == null) {\n          utcOutput = false;\n        }\n        if (mthNames == null) {\n          mthNames = mthNamesEn;\n        }\n        if (dayNames == null) {\n          dayNames = dayNamesEn;\n        }\n        utc = utcOutput ? \"UTC\" : \"\";\n        return function(record) {\n          var date;\n          date = new Date(Date.parse(record[col]));\n          if (isNaN(date)) {\n            return \"\";\n          }\n          return formatString.replace(/%(.)/g, function(m, p) {\n            switch (p) {\n              case \"y\":\n                return date[\"get\" + utc + \"FullYear\"]();\n              case \"m\":\n                return zeroPad(date[\"get\" + utc + \"Month\"]() + 1);\n              case \"n\":\n                return mthNames[date[\"get\" + utc + \"Month\"]()];\n              case \"d\":\n                return zeroPad(date[\"get\" + utc + \"Date\"]());\n              case \"w\":\n                return dayNames[date[\"get\" + utc + \"Day\"]()];\n              case \"x\":\n                return date[\"get\" + utc + \"Day\"]();\n              case \"H\":\n                return zeroPad(date[\"get\" + utc + \"Hours\"]());\n              case \"M\":\n                return zeroPad(date[\"get\" + utc + \"Minutes\"]());\n              case \"S\":\n                return zeroPad(date[\"get\" + utc + \"Seconds\"]());\n              default:\n                return \"%\" + p;\n            }\n          });\n        };\n      }\n    };\n    rx = /(\\d+)|(\\D+)/g;\n    rd = /\\d/;\n    rz = /^0/;\n    naturalSort = (function(_this) {\n      return function(as, bs, nulls_first) {\n        var a, a1, b, b1, nas, nbs, nf;\n        if (nulls_first == null) {\n          nulls_first = true;\n        }\n        nf = nulls_first ? 1 : -1;\n        if ((bs != null) && (as == null)) {\n          return -1 * nf;\n        }\n        if ((as != null) && (bs == null)) {\n          return 1 * nf;\n        }\n        if (typeof as === \"number\" && isNaN(as)) {\n          return -1;\n        }\n        if (typeof bs === \"number\" && isNaN(bs)) {\n          return 1;\n        }\n        nas = +as;\n        nbs = +bs;\n        if (nas < nbs) {\n          return -1;\n        }\n        if (nas > nbs) {\n          return 1;\n        }\n        if (typeof as === \"number\" && typeof bs !== \"number\") {\n          return -1;\n        }\n        if (typeof bs === \"number\" && typeof as !== \"number\") {\n          return 1;\n        }\n        if (typeof as === \"number\" && typeof bs === \"number\") {\n          return 0;\n        }\n        if (isNaN(nbs) && !isNaN(nas)) {\n          return -1;\n        }\n        if (isNaN(nas) && !isNaN(nbs)) {\n          return 1;\n        }\n        a = String(as);\n        b = String(bs);\n        if (a === b) {\n          return 0;\n        }\n        if (!(rd.test(a) && rd.test(b))) {\n          return (a > b ? 1 : -1);\n        }\n        a = a.match(rx);\n        b = b.match(rx);\n        while (a.length && b.length) {\n          a1 = a.shift();\n          b1 = b.shift();\n          if (a1 !== b1) {\n            if (rd.test(a1) && rd.test(b1)) {\n              return a1.replace(rz, \".0\") - b1.replace(rz, \".0\");\n            } else {\n              return (a1 > b1 ? 1 : -1);\n            }\n          }\n        }\n        return a.length - b.length;\n      };\n    })(this);\n    sortAs = function(order) {\n      var i, l_mapping, mapping, x;\n      mapping = {};\n      l_mapping = {};\n      for (i in order) {\n        x = order[i];\n        mapping[x] = i;\n        if (typeof x === \"string\") {\n          l_mapping[x.toLowerCase()] = i;\n        }\n      }\n      return function(a, b) {\n        if ((mapping[a] != null) && (mapping[b] != null)) {\n          return mapping[a] - mapping[b];\n        } else if (mapping[a] != null) {\n          return -1;\n        } else if (mapping[b] != null) {\n          return 1;\n        } else if ((l_mapping[a] != null) && (l_mapping[b] != null)) {\n          return l_mapping[a] - l_mapping[b];\n        } else if (l_mapping[a] != null) {\n          return -1;\n        } else if (l_mapping[b] != null) {\n          return 1;\n        } else {\n          return naturalSort(a, b);\n        }\n      };\n    };\n    getSort = function(sorters, attr) {\n      var sort;\n      if (sorters != null) {\n        if ($.isFunction(sorters)) {\n          sort = sorters(attr);\n          if ($.isFunction(sort)) {\n            return sort;\n          }\n        } else if (sorters[attr] != null) {\n          return sorters[attr];\n        }\n      }\n      return naturalSort;\n    };\n\n    /*\n    Data Model class\n     */\n    PivotData = (function() {\n      function PivotData(input, opts) {\n        var ref, ref1, ref10, ref11, ref12, ref13, ref14, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;\n        if (opts == null) {\n          opts = {};\n        }\n        this.getAggregator = bind(this.getAggregator, this);\n        this.getRowKeys = bind(this.getRowKeys, this);\n        this.getColKeys = bind(this.getColKeys, this);\n        this.filterByLength = bind(this.filterByLength, this);\n        this.sortKeys = bind(this.sortKeys, this);\n        this.arrSort = bind(this.arrSort, this);\n        this.input = input;\n        this.aggregator = (ref = opts.aggregator) != null ? ref : aggregatorTemplates.count()();\n        this.aggregatorName = (ref1 = opts.aggregatorName) != null ? ref1 : \"Count\";\n        this.colAttrs = (ref2 = opts.cols) != null ? ref2 : [];\n        this.rowAttrs = (ref3 = opts.rows) != null ? ref3 : [];\n        this.valAttrs = (ref4 = opts.vals) != null ? ref4 : [];\n        this.sorters = (ref5 = opts.sorters) != null ? ref5 : {};\n        this.rowOrder = (ref6 = opts.rowOrder) != null ? ref6 : \"key_a_to_z\";\n        this.colOrder = (ref7 = opts.colOrder) != null ? ref7 : \"key_a_to_z\";\n        this.derivedAttributes = (ref8 = opts.derivedAttributes) != null ? ref8 : {};\n        this.filter = (ref9 = opts.filter) != null ? ref9 : (function() {\n          return true;\n        });\n        this.tree = {};\n        this.rowKeys = [];\n        this.colKeys = [];\n        this.rowTotals = {};\n        this.colTotals = {};\n        this.allTotal = this.aggregator(this, [], []);\n        this.sorted = false;\n        this.grouping = (ref10 = opts.grouping) != null ? ref10 : false;\n        this.rowGroupBefore = (ref11 = (ref12 = opts.grouping) != null ? ref12.rowGroupBefore : void 0) != null ? ref11 : true;\n        this.colGroupBefore = (ref13 = (ref14 = opts.grouping) != null ? ref14.colGroupBefore : void 0) != null ? ref13 : false;\n        PivotData.forEachRecord(this.input, this.derivedAttributes, (function(_this) {\n          return function(record) {\n            if (_this.filter(record)) {\n              return _this.processRecord(record);\n            }\n          };\n        })(this));\n      }\n\n      PivotData.forEachRecord = function(input, derivedAttributes, f) {\n        var addRecord, compactRecord, i, j, k, l, len1, record, ref, results, results1, tblCols;\n        if ($.isEmptyObject(derivedAttributes)) {\n          addRecord = f;\n        } else {\n          addRecord = function(record) {\n            var k, ref, v;\n            for (k in derivedAttributes) {\n              v = derivedAttributes[k];\n              record[k] = (ref = v(record)) != null ? ref : record[k];\n            }\n            return f(record);\n          };\n        }\n        if ($.isFunction(input)) {\n          return input(addRecord);\n        } else if ($.isArray(input)) {\n          if ($.isArray(input[0])) {\n            results = [];\n            for (i in input) {\n              if (!hasProp.call(input, i)) continue;\n              compactRecord = input[i];\n              if (!(i > 0)) {\n                continue;\n              }\n              record = {};\n              ref = input[0];\n              for (j in ref) {\n                if (!hasProp.call(ref, j)) continue;\n                k = ref[j];\n                record[k] = compactRecord[j];\n              }\n              results.push(addRecord(record));\n            }\n            return results;\n          } else {\n            results1 = [];\n            for (l = 0, len1 = input.length; l < len1; l++) {\n              record = input[l];\n              results1.push(addRecord(record));\n            }\n            return results1;\n          }\n        } else if (input instanceof $) {\n          tblCols = [];\n          $(\"thead > tr > th\", input).each(function(i) {\n            return tblCols.push($(this).text());\n          });\n          return $(\"tbody > tr\", input).each(function(i) {\n            record = {};\n            $(\"td\", this).each(function(j) {\n              return record[tblCols[j]] = $(this).text();\n            });\n            return addRecord(record);\n          });\n        } else {\n          throw new Error(\"unknown input format\");\n        }\n      };\n\n      PivotData.prototype.forEachMatchingRecord = function(criteria, callback) {\n        return PivotData.forEachRecord(this.input, this.derivedAttributes, (function(_this) {\n          return function(record) {\n            var k, ref, v;\n            if (!_this.filter(record)) {\n              return;\n            }\n            for (k in criteria) {\n              v = criteria[k];\n              if (v !== ((ref = record[k]) != null ? ref : \"null\")) {\n                return;\n              }\n            }\n            return callback(record);\n          };\n        })(this));\n      };\n\n      PivotData.prototype.arrSort = function(attrs, nulls_first) {\n        var a, sortersArr;\n        sortersArr = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = attrs.length; l < len1; l++) {\n            a = attrs[l];\n            results.push(getSort(this.sorters, a));\n          }\n          return results;\n        }).call(this);\n        return function(a, b) {\n          var comparison, i, sorter;\n          for (i in sortersArr) {\n            if (!hasProp.call(sortersArr, i)) continue;\n            sorter = sortersArr[i];\n            comparison = sorter(a[i], b[i], nulls_first);\n            if (comparison !== 0) {\n              return comparison;\n            }\n          }\n          return 0;\n        };\n      };\n\n      PivotData.prototype.sortKeys = function() {\n        var v;\n        if (!this.sorted) {\n          this.sorted = true;\n          v = (function(_this) {\n            return function(r, c) {\n              return _this.getAggregator(r, c).value();\n            };\n          })(this);\n          switch (this.rowOrder) {\n            case \"value_a_to_z\":\n              this.rowKeys.sort((function(_this) {\n                return function(a, b) {\n                  return naturalSort(v(a, []), v(b, []));\n                };\n              })(this));\n              break;\n            case \"value_z_to_a\":\n              this.rowKeys.sort((function(_this) {\n                return function(a, b) {\n                  return -naturalSort(v(a, []), v(b, []));\n                };\n              })(this));\n              break;\n            default:\n              this.rowKeys.sort(this.arrSort(this.rowAttrs, this.rowGroupBefore));\n          }\n          switch (this.colOrder) {\n            case \"value_a_to_z\":\n              return this.colKeys.sort((function(_this) {\n                return function(a, b) {\n                  return naturalSort(v([], a), v([], b));\n                };\n              })(this));\n            case \"value_z_to_a\":\n              return this.colKeys.sort((function(_this) {\n                return function(a, b) {\n                  return -naturalSort(v([], a), v([], b));\n                };\n              })(this));\n            default:\n              return this.colKeys.sort(this.arrSort(this.colAttrs, this.colGroupBefore));\n          }\n        }\n      };\n\n      PivotData.prototype.filterByLength = function(keys, length) {\n        return keys.filter(function(x) {\n          return x.length === length;\n        });\n      };\n\n      PivotData.prototype.getColKeys = function(all_keys) {\n        if (all_keys == null) {\n          all_keys = false;\n        }\n        this.sortKeys();\n        if (all_keys) {\n          return this.colKeys;\n        } else {\n          return filterByLength(this.colKeys, this.colAttrs.length);\n        }\n      };\n\n      PivotData.prototype.getRowKeys = function(all_keys) {\n        if (all_keys == null) {\n          all_keys = false;\n        }\n        this.sortKeys();\n        if (all_keys) {\n          return this.rowKeys;\n        } else {\n          return filterByLength(this.rowKeys, this.rowAttrs.length);\n        }\n      };\n\n      PivotData.prototype.subarrays = function(x) {\n        return x.map((function(_this) {\n          return function(d, i) {\n            return x.slice(0, i + 1);\n          };\n        })(this));\n      };\n\n      PivotData.prototype.processRecord = function(record) {\n        var colKey, colKeys, flatColKey, flatRowKey, i, j, l, len1, len2, o, ref, ref1, ref2, ref3, results, rowKey, rowKeys, x;\n        colKeys = [];\n        rowKeys = [];\n        ref = this.colAttrs;\n        for (l = 0, len1 = ref.length; l < len1; l++) {\n          x = ref[l];\n          colKeys.push((ref1 = record[x]) != null ? ref1 : \"null\");\n        }\n        ref2 = this.rowAttrs;\n        for (o = 0, len2 = ref2.length; o < len2; o++) {\n          x = ref2[o];\n          rowKeys.push((ref3 = record[x]) != null ? ref3 : \"null\");\n        }\n        colKeys = this.grouping && colKeys.length ? this.subarrays(colKeys) : [colKeys];\n        rowKeys = this.grouping && rowKeys.length ? this.subarrays(rowKeys) : [rowKeys];\n        this.allTotal.push(record);\n        results = [];\n        for (j in rowKeys) {\n          rowKey = rowKeys[j];\n          flatRowKey = rowKey.join(String.fromCharCode(0));\n          results.push((function() {\n            var results1;\n            results1 = [];\n            for (i in colKeys) {\n              colKey = colKeys[i];\n              flatColKey = colKey.join(String.fromCharCode(0));\n              if (rowKey.length !== 0) {\n                if (!this.rowTotals[flatRowKey]) {\n                  this.rowKeys.push(rowKey);\n                  this.rowTotals[flatRowKey] = this.aggregator(this, rowKey, []);\n                }\n                if (!(this.grouping && colKey.length)) {\n                  this.rowTotals[flatRowKey].push(record);\n                }\n              }\n              if (colKey.length !== 0) {\n                if (!this.colTotals[flatColKey]) {\n                  this.colKeys.push(colKey);\n                  this.colTotals[flatColKey] = this.aggregator(this, [], colKey);\n                }\n                if (!(this.grouping && rowKey.length)) {\n                  this.colTotals[flatColKey].push(record);\n                }\n              }\n              if (colKey.length !== 0 && rowKey.length !== 0) {\n                if (!this.tree[flatRowKey]) {\n                  this.tree[flatRowKey] = {};\n                }\n                if (!this.tree[flatRowKey][flatColKey]) {\n                  this.tree[flatRowKey][flatColKey] = this.aggregator(this, rowKey, colKey);\n                }\n                results1.push(this.tree[flatRowKey][flatColKey].push(record));\n              } else {\n                results1.push(void 0);\n              }\n            }\n            return results1;\n          }).call(this));\n        }\n        return results;\n      };\n\n      PivotData.prototype.getAggregator = function(rowKey, colKey) {\n        var agg, flatColKey, flatRowKey;\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        if (rowKey.length === 0 && colKey.length === 0) {\n          agg = this.allTotal;\n        } else if (rowKey.length === 0) {\n          agg = this.colTotals[flatColKey];\n        } else if (colKey.length === 0) {\n          agg = this.rowTotals[flatRowKey];\n        } else {\n          agg = this.tree[flatRowKey][flatColKey];\n        }\n        return agg != null ? agg : {\n          value: (function() {\n            return null;\n          }),\n          format: function() {\n            return \"\";\n          }\n        };\n      };\n\n      return PivotData;\n\n    })();\n    $.pivotUtilities = {\n      aggregatorTemplates: aggregatorTemplates,\n      aggregators: aggregators,\n      renderers: renderers,\n      derivers: derivers,\n      locales: locales,\n      naturalSort: naturalSort,\n      numberFormat: numberFormat,\n      sortAs: sortAs,\n      PivotData: PivotData\n    };\n\n    /*\n    Default Renderer for hierarchical table layout\n     */\n    pivotTableRenderer = function(pivotData, opts) {\n      var aggregator, c, colAttrs, colKey, colKeys, colsExpandHandler, compactLayout, defaults, getClickHandler, i, j, r, ref, result, rowAttrs, rowExpandHandler, rowGap, rowKey, rowKeys, rowsExpandHandler, spanSize, tbody, td, th, thead, totalAggregator, tr, txt, val, x;\n      defaults = {\n        table: {\n          clickCallback: null,\n          rowTotals: true,\n          colTotals: true\n        },\n        localeStrings: {\n          totals: \"Totals\"\n        }\n      };\n      opts = $.extend(true, {}, defaults, opts);\n      colAttrs = pivotData.colAttrs;\n      rowAttrs = pivotData.rowAttrs;\n      rowKeys = pivotData.getRowKeys(true);\n      colKeys = pivotData.getColKeys(true);\n      if (opts.table.clickCallback) {\n        getClickHandler = function(value, rowValues, colValues) {\n          var attr, filters, i;\n          filters = {};\n          for (i in colAttrs) {\n            if (!hasProp.call(colAttrs, i)) continue;\n            attr = colAttrs[i];\n            if (colValues[i] != null) {\n              filters[attr] = colValues[i];\n            }\n          }\n          for (i in rowAttrs) {\n            if (!hasProp.call(rowAttrs, i)) continue;\n            attr = rowAttrs[i];\n            if (rowValues[i] != null) {\n              filters[attr] = rowValues[i];\n            }\n          }\n          return function(e) {\n            return opts.table.clickCallback(e, value, filters, pivotData);\n          };\n        };\n      }\n      compactLayout = ((ref = opts.table.compactLayout) != null ? ref : true) && pivotData.grouping;\n      rowExpandHandler = compactLayout ? expandRowCol : pivotData.rowGroupBefore ? expandWithSpan : expandRowsGroupAfter;\n      rowsExpandHandler = getExpandHandler(rowKeys, true, rowExpandHandler);\n      colsExpandHandler = getExpandHandler(colKeys, false, expandWithSpan);\n      result = document.createElement(\"table\");\n      result.className = \"pvtTable\";\n      spanSize = function(arr, i, j) {\n        var l, len, noDraw, o, ref1, ref2, stop, x;\n        if (i !== 0) {\n          noDraw = true;\n          for (x = l = 0, ref1 = j; 0 <= ref1 ? l <= ref1 : l >= ref1; x = 0 <= ref1 ? ++l : --l) {\n            if (arr[i - 1][x] !== arr[i][x]) {\n              noDraw = false;\n            }\n          }\n          if (noDraw) {\n            return -1;\n          }\n        }\n        len = 0;\n        while (i + len < arr.length) {\n          stop = false;\n          for (x = o = 0, ref2 = j; 0 <= ref2 ? o <= ref2 : o >= ref2; x = 0 <= ref2 ? ++o : --o) {\n            if (arr[i][x] !== arr[i + len][x]) {\n              stop = true;\n            }\n          }\n          if (stop) {\n            break;\n          }\n          len++;\n        }\n        return len;\n      };\n      thead = document.createElement(\"thead\");\n      for (j in colAttrs) {\n        if (!hasProp.call(colAttrs, j)) continue;\n        c = colAttrs[j];\n        tr = document.createElement(\"tr\");\n        if (parseInt(j) === 0 && rowAttrs.length !== 0) {\n          th = document.createElement(\"th\");\n          th.setAttribute(\"colspan\", rowAttrs.length);\n          th.setAttribute(\"rowspan\", colAttrs.length);\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        th.className = \"pvtAxisLabel\";\n        th.textContent = c;\n        if (pivotData.grouping && j < colAttrs.length - 1) {\n          th.onclick = getExpandAllHandler(pivotData, +j, false);\n          th.className += \" open level\" + j;\n        }\n        tr.appendChild(th);\n        for (i in colKeys) {\n          if (!hasProp.call(colKeys, i)) continue;\n          colKey = colKeys[i];\n          x = spanSize(colKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtColLabel\";\n            th.className += \" col\" + (pivotData.colGroupBefore ? +i : +i + x - 1);\n            th.textContent = colKey[j];\n            th.setAttribute(\"colspan\", x);\n            if (parseInt(j) === colAttrs.length - 1 && rowAttrs.length !== 0) {\n              th.setAttribute(\"rowspan\", 2);\n            }\n            if (pivotData.grouping && j < colAttrs.length - 1 && colKey[j]) {\n              th.className += \" pvtSubtotal open\";\n              th.onclick = colsExpandHandler;\n            }\n            tr.appendChild(th);\n          }\n        }\n        if (parseInt(j) === 0 && opts.table.rowTotals) {\n          th = document.createElement(\"th\");\n          th.className = \"pvtTotalLabel pvtRowTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          th.setAttribute(\"rowspan\", colAttrs.length + (rowAttrs.length === 0 ? 0 : 1));\n          tr.appendChild(th);\n        }\n        thead.appendChild(tr);\n      }\n      if (rowAttrs.length !== 0) {\n        tr = document.createElement(\"tr\");\n        for (i in rowAttrs) {\n          if (!hasProp.call(rowAttrs, i)) continue;\n          r = rowAttrs[i];\n          th = document.createElement(\"th\");\n          th.className = \"pvtAxisLabel\";\n          th.textContent = r;\n          if (pivotData.grouping && i < rowAttrs.length - 1) {\n            th.className += \" open level\" + i;\n            th.onclick = getExpandAllHandler(pivotData, +i, true);\n          }\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        if (colAttrs.length === 0) {\n          th.className = \"pvtTotalLabel pvtRowTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n        }\n        tr.appendChild(th);\n        thead.appendChild(tr);\n      }\n      result.appendChild(thead);\n      tbody = document.createElement(\"tbody\");\n      for (i in rowKeys) {\n        if (!hasProp.call(rowKeys, i)) continue;\n        rowKey = rowKeys[i];\n        tr = document.createElement(\"tr\");\n        rowGap = rowAttrs.length - rowKey.length;\n        tr.className = rowGap ? \"pvtSubtotal level\" + rowKey.length : \"pvtData\";\n        for (j in rowKey) {\n          if (!hasProp.call(rowKey, j)) continue;\n          txt = rowKey[j];\n          if (compactLayout && j < rowKey.length - 1) {\n            continue;\n          }\n          x = compactLayout ? 1 : spanSize(rowKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtRowLabel\";\n            th.className += \" row\" + (pivotData.rowGroupBefore ? +i : +i + x - 1);\n            th.textContent = txt;\n            th.setAttribute(\"rowspan\", x);\n            if (compactLayout) {\n              th.colSpan = rowAttrs.length;\n              th.style.paddingLeft = 5 + parseInt(j) * 20 + 'px';\n            }\n            if (pivotData.grouping && j < rowAttrs.length - 1) {\n              th.className += \" open\";\n              th.onclick = rowsExpandHandler;\n            }\n            tr.appendChild(th);\n          }\n        }\n        if (!compactLayout && rowGap) {\n          th = document.createElement(\"th\");\n          th.colSpan = rowGap;\n          th.textContent = \"Total (\" + rowKey[j] + \")\";\n          tr.appendChild(th);\n        }\n        if (colAttrs.length) {\n          th.colSpan++;\n        }\n        for (j in colKeys) {\n          if (!hasProp.call(colKeys, j)) continue;\n          colKey = colKeys[j];\n          aggregator = pivotData.getAggregator(rowKey, colKey);\n          val = aggregator.value();\n          td = document.createElement(\"td\");\n          if (!rowGap) {\n            td.className = \"pvtVal \";\n          }\n          td.className += \"row\" + i + \" col\" + j;\n          if (colAttrs.length - colKey.length) {\n            td.className = \"pvtSubtotal level\" + colKey.length + \" row\" + i + \" col\" + j;\n          }\n          td.textContent = aggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, rowKey, colKey);\n          }\n          tr.appendChild(td);\n        }\n        if (opts.table.rowTotals || colAttrs.length === 0) {\n          totalAggregator = pivotData.getAggregator(rowKey, []);\n          val = totalAggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtTotal rowTotal\";\n          td.textContent = totalAggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, rowKey, []);\n          }\n          td.setAttribute(\"data-for\", \"row\" + i);\n          tr.appendChild(td);\n        }\n        tbody.appendChild(tr);\n      }\n      if (opts.table.colTotals || rowAttrs.length === 0) {\n        tr = document.createElement(\"tr\");\n        if (opts.table.colTotals || rowAttrs.length === 0) {\n          th = document.createElement(\"th\");\n          th.className = \"pvtTotalLabel pvtColTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          th.setAttribute(\"colspan\", rowAttrs.length + (colAttrs.length === 0 ? 0 : 1));\n          tr.appendChild(th);\n        }\n        for (j in colKeys) {\n          if (!hasProp.call(colKeys, j)) continue;\n          colKey = colKeys[j];\n          totalAggregator = pivotData.getAggregator([], colKey);\n          val = totalAggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtTotal colTotal col\" + j;\n          if (colKey.length !== colAttrs.length) {\n            td.className += \" pvtSubtotal level\" + colKey.length;\n          }\n          td.textContent = totalAggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, [], colKey);\n          }\n          td.setAttribute(\"data-for\", \"col\" + j);\n          tr.appendChild(td);\n        }\n        if (opts.table.rowTotals || colAttrs.length === 0) {\n          totalAggregator = pivotData.getAggregator([], []);\n          val = totalAggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtGrandTotal\";\n          td.textContent = totalAggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, [], []);\n          }\n          tr.appendChild(td);\n        }\n        tbody.appendChild(tr);\n      }\n      result.appendChild(tbody);\n      result.setAttribute(\"data-numrows\", rowKeys.length);\n      result.setAttribute(\"data-numcols\", colKeys.length);\n      return result;\n    };\n\n    /*\n    Pivot Table core: create PivotData object and call Renderer on it\n     */\n    $.fn.pivot = function(input, inputOpts, locale) {\n      var defaults, e, localeDefaults, localeStrings, opts, pivotData, result, x;\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        cols: [],\n        rows: [],\n        vals: [],\n        rowOrder: \"key_a_to_z\",\n        colOrder: \"key_a_to_z\",\n        dataClass: PivotData,\n        filter: function() {\n          return true;\n        },\n        aggregator: aggregatorTemplates.count()(),\n        aggregatorName: \"Count\",\n        sorters: {},\n        derivedAttributes: {},\n        renderer: pivotTableRenderer\n      };\n      localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings);\n      localeDefaults = {\n        rendererOptions: {\n          localeStrings: localeStrings\n        },\n        localeStrings: localeStrings\n      };\n      opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts));\n      result = null;\n      try {\n        pivotData = new opts.dataClass(input, opts);\n        try {\n          result = opts.renderer(pivotData, opts.rendererOptions);\n        } catch (error) {\n          e = error;\n          if (typeof console !== \"undefined\" && console !== null) {\n            console.error(e.stack);\n          }\n          result = $(\"<span>\").html(opts.localeStrings.renderError);\n        }\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        result = $(\"<span>\").html(opts.localeStrings.computeError);\n      }\n      x = this[0];\n      while (x.hasChildNodes()) {\n        x.removeChild(x.lastChild);\n      }\n      return this.append(result);\n    };\n\n    /*\n    Pivot Table UI: calls Pivot Table core above with options set by user\n     */\n    $.fn.pivotUI = function(input, inputOpts, overwrite, locale) {\n      var a, aggregator, attr, attrLength, attrValues, c, colOrderArrow, defaults, e, existingOpts, fn1, i, initialRender, l, len1, len2, len3, localeDefaults, localeStrings, materializedInput, o, opts, ordering, pivotTable, recordsProcessed, ref, ref1, ref2, ref3, refresh, refreshDelayed, renderer, rendererControl, rowOrderArrow, shownAttributes, shownInAggregators, shownInDragDrop, t, tr1, tr2, uiTable, unused, unusedAttrsVerticalAutoCutoff, unusedAttrsVerticalAutoOverride, x;\n      if (overwrite == null) {\n        overwrite = false;\n      }\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        derivedAttributes: {},\n        aggregators: locales[locale].aggregators,\n        renderers: locales[locale].renderers,\n        hiddenAttributes: [],\n        hiddenFromAggregators: [],\n        hiddenFromDragDrop: [],\n        menuLimit: 500,\n        cols: [],\n        rows: [],\n        vals: [],\n        rowOrder: \"key_a_to_z\",\n        colOrder: \"key_a_to_z\",\n        dataClass: PivotData,\n        exclusions: {},\n        inclusions: {},\n        unusedAttrsVertical: 85,\n        autoSortUnusedAttrs: false,\n        onRefresh: null,\n        showUI: true,\n        filter: function() {\n          return true;\n        },\n        sorters: {}\n      };\n      localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings);\n      localeDefaults = {\n        rendererOptions: {\n          localeStrings: localeStrings\n        },\n        localeStrings: localeStrings\n      };\n      existingOpts = this.data(\"pivotUIOptions\");\n      if ((existingOpts == null) || overwrite) {\n        opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts));\n      } else {\n        opts = existingOpts;\n      }\n      try {\n        attrValues = {};\n        materializedInput = [];\n        recordsProcessed = 0;\n        PivotData.forEachRecord(input, opts.derivedAttributes, function(record) {\n          var attr, base, ref, value;\n          if (!opts.filter(record)) {\n            return;\n          }\n          materializedInput.push(record);\n          for (attr in record) {\n            if (!hasProp.call(record, attr)) continue;\n            if (attrValues[attr] == null) {\n              attrValues[attr] = {};\n              if (recordsProcessed > 0) {\n                attrValues[attr][\"null\"] = recordsProcessed;\n              }\n            }\n          }\n          for (attr in attrValues) {\n            value = (ref = record[attr]) != null ? ref : \"null\";\n            if ((base = attrValues[attr])[value] == null) {\n              base[value] = 0;\n            }\n            attrValues[attr][value]++;\n          }\n          return recordsProcessed++;\n        });\n        uiTable = $(\"<table>\", {\n          \"class\": \"pvtUi\"\n        }).attr(\"cellpadding\", 5);\n        rendererControl = $(\"<td>\").addClass(\"pvtUiCell\");\n        renderer = $(\"<select>\").addClass('pvtRenderer').appendTo(rendererControl).bind(\"change\", function() {\n          return refresh();\n        });\n        ref = opts.renderers;\n        for (x in ref) {\n          if (!hasProp.call(ref, x)) continue;\n          $(\"<option>\").val(x).html(x).appendTo(renderer);\n        }\n        unused = $(\"<td>\").addClass('pvtAxisContainer pvtUnused pvtUiCell');\n        shownAttributes = (function() {\n          var results;\n          results = [];\n          for (a in attrValues) {\n            if (indexOf.call(opts.hiddenAttributes, a) < 0) {\n              results.push(a);\n            }\n          }\n          return results;\n        })();\n        shownInAggregators = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = shownAttributes.length; l < len1; l++) {\n            c = shownAttributes[l];\n            if (indexOf.call(opts.hiddenFromAggregators, c) < 0) {\n              results.push(c);\n            }\n          }\n          return results;\n        })();\n        shownInDragDrop = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = shownAttributes.length; l < len1; l++) {\n            c = shownAttributes[l];\n            if (indexOf.call(opts.hiddenFromDragDrop, c) < 0) {\n              results.push(c);\n            }\n          }\n          return results;\n        })();\n        unusedAttrsVerticalAutoOverride = false;\n        if (opts.unusedAttrsVertical === \"auto\") {\n          unusedAttrsVerticalAutoCutoff = 120;\n        } else {\n          unusedAttrsVerticalAutoCutoff = parseInt(opts.unusedAttrsVertical);\n        }\n        if (!isNaN(unusedAttrsVerticalAutoCutoff)) {\n          attrLength = 0;\n          for (l = 0, len1 = shownInDragDrop.length; l < len1; l++) {\n            a = shownInDragDrop[l];\n            attrLength += a.length;\n          }\n          unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff;\n        }\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          unused.addClass('pvtVertList');\n        } else {\n          unused.addClass('pvtHorizList');\n        }\n        fn1 = function(attr) {\n          var attrElem, checkContainer, closeFilterBox, controls, filterItem, filterItemExcluded, finalButtons, hasExcludedItem, len2, o, placeholder, ref1, sorter, triangleLink, v, value, valueCount, valueList, values;\n          values = (function() {\n            var results;\n            results = [];\n            for (v in attrValues[attr]) {\n              results.push(v);\n            }\n            return results;\n          })();\n          hasExcludedItem = false;\n          valueList = $(\"<div>\").addClass('pvtFilterBox').hide();\n          valueList.append($(\"<h4>\").append($(\"<span>\").text(attr), $(\"<span>\").addClass(\"count\").text(\"(\" + values.length + \")\")));\n          if (values.length > opts.menuLimit) {\n            valueList.append($(\"<p>\").html(opts.localeStrings.tooMany));\n          } else {\n            if (values.length > 5) {\n              controls = $(\"<p>\").appendTo(valueList);\n              sorter = getSort(opts.sorters, attr);\n              placeholder = opts.localeStrings.filterResults;\n              $(\"<input>\", {\n                type: \"text\"\n              }).appendTo(controls).attr({\n                placeholder: placeholder,\n                \"class\": \"pvtSearch\"\n              }).bind(\"keyup\", function() {\n                var accept, accept_gen, filter;\n                filter = $(this).val().toLowerCase().trim();\n                accept_gen = function(prefix, accepted) {\n                  return function(v) {\n                    var real_filter, ref1;\n                    real_filter = filter.substring(prefix.length).trim();\n                    if (real_filter.length === 0) {\n                      return true;\n                    }\n                    return ref1 = Math.sign(sorter(v.toLowerCase(), real_filter)), indexOf.call(accepted, ref1) >= 0;\n                  };\n                };\n                accept = filter.indexOf(\">=\") === 0 ? accept_gen(\">=\", [1, 0]) : filter.indexOf(\"<=\") === 0 ? accept_gen(\"<=\", [-1, 0]) : filter.indexOf(\">\") === 0 ? accept_gen(\">\", [1]) : filter.indexOf(\"<\") === 0 ? accept_gen(\"<\", [-1]) : filter.indexOf(\"~\") === 0 ? function(v) {\n                  if (filter.substring(1).trim().length === 0) {\n                    return true;\n                  }\n                  return v.toLowerCase().match(filter.substring(1));\n                } : function(v) {\n                  return v.toLowerCase().indexOf(filter) !== -1;\n                };\n                return valueList.find('.pvtCheckContainer p label span.value').each(function() {\n                  if (accept($(this).text())) {\n                    return $(this).parent().parent().show();\n                  } else {\n                    return $(this).parent().parent().hide();\n                  }\n                });\n              });\n              controls.append($(\"<br>\"));\n              $(\"<button>\", {\n                type: \"button\"\n              }).appendTo(controls).html(opts.localeStrings.selectAll).bind(\"click\", function() {\n                valueList.find(\"input:visible:not(:checked)\").prop(\"checked\", true).toggleClass(\"changed\");\n                return false;\n              });\n              $(\"<button>\", {\n                type: \"button\"\n              }).appendTo(controls).html(opts.localeStrings.selectNone).bind(\"click\", function() {\n                valueList.find(\"input:visible:checked\").prop(\"checked\", false).toggleClass(\"changed\");\n                return false;\n              });\n            }\n            checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList);\n            ref1 = values.sort(getSort(opts.sorters, attr));\n            for (o = 0, len2 = ref1.length; o < len2; o++) {\n              value = ref1[o];\n              valueCount = attrValues[attr][value];\n              filterItem = $(\"<label>\");\n              filterItemExcluded = false;\n              if (opts.inclusions[attr]) {\n                filterItemExcluded = (indexOf.call(opts.inclusions[attr], value) < 0);\n              } else if (opts.exclusions[attr]) {\n                filterItemExcluded = (indexOf.call(opts.exclusions[attr], value) >= 0);\n              }\n              hasExcludedItem || (hasExcludedItem = filterItemExcluded);\n              $(\"<input>\").attr(\"type\", \"checkbox\").addClass('pvtFilter').attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr, value]).appendTo(filterItem).bind(\"change\", function() {\n                return $(this).toggleClass(\"changed\");\n              });\n              filterItem.append($(\"<span>\").addClass(\"value\").text(value));\n              filterItem.append($(\"<span>\").addClass(\"count\").text(\"(\" + valueCount + \")\"));\n              checkContainer.append($(\"<p>\").append(filterItem));\n            }\n          }\n          closeFilterBox = function() {\n            if (valueList.find(\"[type='checkbox']\").length > valueList.find(\"[type='checkbox']:checked\").length) {\n              attrElem.addClass(\"pvtFilteredAttribute\");\n            } else {\n              attrElem.removeClass(\"pvtFilteredAttribute\");\n            }\n            valueList.find('.pvtSearch').val('');\n            valueList.find('.pvtCheckContainer p').show();\n            return valueList.hide();\n          };\n          finalButtons = $(\"<p>\").appendTo(valueList);\n          if (values.length <= opts.menuLimit) {\n            $(\"<button>\", {\n              type: \"button\"\n            }).text(opts.localeStrings.apply).appendTo(finalButtons).bind(\"click\", function() {\n              if (valueList.find(\".changed\").removeClass(\"changed\").length) {\n                refresh();\n              }\n              return closeFilterBox();\n            });\n          }\n          $(\"<button>\", {\n            type: \"button\"\n          }).text(opts.localeStrings.cancel).appendTo(finalButtons).bind(\"click\", function() {\n            valueList.find(\".changed:checked\").removeClass(\"changed\").prop(\"checked\", false);\n            valueList.find(\".changed:not(:checked)\").removeClass(\"changed\").prop(\"checked\", true);\n            return closeFilterBox();\n          });\n          triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" &#x25BE;\").bind(\"click\", function(e) {\n            var left, ref2, top;\n            ref2 = $(e.currentTarget).position(), left = ref2.left, top = ref2.top;\n            return valueList.css({\n              left: left + 10,\n              top: top + 10\n            }).show();\n          });\n          attrElem = $(\"<li>\").addClass(\"axis_\" + i).append($(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink));\n          if (hasExcludedItem) {\n            attrElem.addClass('pvtFilteredAttribute');\n          }\n          return unused.append(attrElem).append(valueList);\n        };\n        for (i in shownInDragDrop) {\n          if (!hasProp.call(shownInDragDrop, i)) continue;\n          attr = shownInDragDrop[i];\n          fn1(attr);\n        }\n        tr1 = $(\"<tr>\").appendTo(uiTable);\n        aggregator = $(\"<select>\").addClass('pvtAggregator').bind(\"change\", function() {\n          return refresh();\n        });\n        ref1 = opts.aggregators;\n        for (x in ref1) {\n          if (!hasProp.call(ref1, x)) continue;\n          aggregator.append($(\"<option>\").val(x).html(x));\n        }\n        ordering = {\n          key_a_to_z: {\n            rowSymbol: \"&varr;\",\n            colSymbol: \"&harr;\",\n            next: \"value_a_to_z\"\n          },\n          value_a_to_z: {\n            rowSymbol: \"&darr;\",\n            colSymbol: \"&rarr;\",\n            next: \"value_z_to_a\"\n          },\n          value_z_to_a: {\n            rowSymbol: \"&uarr;\",\n            colSymbol: \"&larr;\",\n            next: \"key_a_to_z\"\n          }\n        };\n        rowOrderArrow = $(\"<a>\", {\n          role: \"button\"\n        }).addClass(\"pvtRowOrder\").data(\"order\", opts.rowOrder).html(ordering[opts.rowOrder].rowSymbol).bind(\"click\", function() {\n          $(this).data(\"order\", ordering[$(this).data(\"order\")].next);\n          $(this).html(ordering[$(this).data(\"order\")].rowSymbol);\n          return refresh();\n        });\n        colOrderArrow = $(\"<a>\", {\n          role: \"button\"\n        }).addClass(\"pvtColOrder\").data(\"order\", opts.colOrder).html(ordering[opts.colOrder].colSymbol).bind(\"click\", function() {\n          $(this).data(\"order\", ordering[$(this).data(\"order\")].next);\n          $(this).html(ordering[$(this).data(\"order\")].colSymbol);\n          return refresh();\n        });\n        $(\"<td>\").addClass('pvtVals pvtUiCell').appendTo(tr1).append(aggregator).append(rowOrderArrow).append(colOrderArrow).append($(\"<br>\"));\n        $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols pvtUiCell').appendTo(tr1);\n        tr2 = $(\"<tr>\").appendTo(uiTable);\n        tr2.append($(\"<td>\").addClass('pvtAxisContainer pvtRows pvtUiCell').attr(\"valign\", \"top\"));\n        pivotTable = $(\"<td>\").attr(\"valign\", \"top\").addClass('pvtRendererArea').appendTo(tr2);\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          uiTable.find('tr:nth-child(1)').prepend(rendererControl);\n          uiTable.find('tr:nth-child(2)').prepend(unused);\n        } else {\n          uiTable.prepend($(\"<tr>\").append(rendererControl).append(unused));\n        }\n        this.html(uiTable);\n        ref2 = opts.cols;\n        for (o = 0, len2 = ref2.length; o < len2; o++) {\n          x = ref2[o];\n          this.find(\".pvtCols\").append(this.find(\".axis_\" + ($.inArray(x, shownInDragDrop))));\n        }\n        ref3 = opts.rows;\n        for (t = 0, len3 = ref3.length; t < len3; t++) {\n          x = ref3[t];\n          this.find(\".pvtRows\").append(this.find(\".axis_\" + ($.inArray(x, shownInDragDrop))));\n        }\n        if (opts.aggregatorName != null) {\n          this.find(\".pvtAggregator\").val(opts.aggregatorName);\n        }\n        if (opts.rendererName != null) {\n          this.find(\".pvtRenderer\").val(opts.rendererName);\n        }\n        if (!opts.showUI) {\n          this.find(\".pvtUiCell\").hide();\n        }\n        initialRender = true;\n        refreshDelayed = (function(_this) {\n          return function() {\n            var exclusions, inclusions, len4, newDropdown, numInputsToProcess, pivotUIOptions, pvtVals, ref4, ref5, subopts, u, unusedAttrsContainer, vals, w;\n            subopts = {\n              derivedAttributes: opts.derivedAttributes,\n              localeStrings: opts.localeStrings,\n              rendererOptions: opts.rendererOptions,\n              sorters: opts.sorters,\n              cols: [],\n              rows: [],\n              dataClass: opts.dataClass,\n              grouping: opts.grouping\n            };\n            numInputsToProcess = (ref4 = opts.aggregators[aggregator.val()]([])().numInputs) != null ? ref4 : 0;\n            vals = [];\n            _this.find(\".pvtRows li span.pvtAttr\").each(function() {\n              return subopts.rows.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtCols li span.pvtAttr\").each(function() {\n              return subopts.cols.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n              if (numInputsToProcess === 0) {\n                return $(this).remove();\n              } else {\n                numInputsToProcess--;\n                if ($(this).val() !== \"\") {\n                  return vals.push($(this).val());\n                }\n              }\n            });\n            if (numInputsToProcess !== 0) {\n              pvtVals = _this.find(\".pvtVals\");\n              for (x = u = 0, ref5 = numInputsToProcess; 0 <= ref5 ? u < ref5 : u > ref5; x = 0 <= ref5 ? ++u : --u) {\n                newDropdown = $(\"<select>\").addClass('pvtAttrDropdown').append($(\"<option>\")).bind(\"change\", function() {\n                  return refresh();\n                });\n                for (w = 0, len4 = shownInAggregators.length; w < len4; w++) {\n                  attr = shownInAggregators[w];\n                  newDropdown.append($(\"<option>\").val(attr).text(attr));\n                }\n                pvtVals.append(newDropdown);\n              }\n            }\n            if (initialRender) {\n              vals = opts.vals;\n              i = 0;\n              _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n                $(this).val(vals[i]);\n                return i++;\n              });\n              initialRender = false;\n            }\n            subopts.aggregatorName = aggregator.val();\n            subopts.vals = vals;\n            subopts.aggregator = opts.aggregators[aggregator.val()](vals);\n            subopts.renderer = opts.renderers[renderer.val()];\n            subopts.rowOrder = rowOrderArrow.data(\"order\");\n            subopts.colOrder = colOrderArrow.data(\"order\");\n            exclusions = {};\n            _this.find('input.pvtFilter').not(':checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                return exclusions[filter[0]].push(filter[1]);\n              } else {\n                return exclusions[filter[0]] = [filter[1]];\n              }\n            });\n            inclusions = {};\n            _this.find('input.pvtFilter:checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                if (inclusions[filter[0]] != null) {\n                  return inclusions[filter[0]].push(filter[1]);\n                } else {\n                  return inclusions[filter[0]] = [filter[1]];\n                }\n              }\n            });\n            subopts.filter = function(record) {\n              var excludedItems, k, ref6, ref7;\n              if (!opts.filter(record)) {\n                return false;\n              }\n              for (k in exclusions) {\n                excludedItems = exclusions[k];\n                if (ref6 = \"\" + ((ref7 = record[k]) != null ? ref7 : 'null'), indexOf.call(excludedItems, ref6) >= 0) {\n                  return false;\n                }\n              }\n              return true;\n            };\n            pivotTable.pivot(materializedInput, subopts);\n            pivotUIOptions = $.extend({}, opts, {\n              cols: subopts.cols,\n              rows: subopts.rows,\n              colOrder: subopts.colOrder,\n              rowOrder: subopts.rowOrder,\n              vals: vals,\n              exclusions: exclusions,\n              inclusions: inclusions,\n              inclusionsInfo: inclusions,\n              aggregatorName: aggregator.val(),\n              rendererName: renderer.val()\n            });\n            _this.data(\"pivotUIOptions\", pivotUIOptions);\n            if (opts.autoSortUnusedAttrs) {\n              unusedAttrsContainer = _this.find(\"td.pvtUnused.pvtAxisContainer\");\n              $(unusedAttrsContainer).children(\"li\").sort(function(a, b) {\n                return naturalSort($(a).text(), $(b).text());\n              }).appendTo(unusedAttrsContainer);\n            }\n            pivotTable.css(\"opacity\", 1);\n            if (opts.onRefresh != null) {\n              return opts.onRefresh(pivotUIOptions);\n            }\n          };\n        })(this);\n        refresh = (function(_this) {\n          return function() {\n            pivotTable.css(\"opacity\", 0.5);\n            return setTimeout(refreshDelayed, 10);\n          };\n        })(this);\n        refresh();\n        this.find(\".pvtAxisContainer\").sortable({\n          update: function(e, ui) {\n            if (ui.sender == null) {\n              return refresh();\n            }\n          },\n          connectWith: this.find(\".pvtAxisContainer\"),\n          items: 'li',\n          placeholder: 'pvtPlaceholder'\n        });\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        this.html(opts.localeStrings.uiRenderError);\n      }\n      return this;\n    };\n\n    /*\n    Heatmap post-processing\n     */\n    $.fn.heatmap = function(scope, opts) {\n      var colorScaleGenerator, heatmapper, i, j, l, numCols, numRows, o, ref, ref1, ref2;\n      if (scope == null) {\n        scope = \"heatmap\";\n      }\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      colorScaleGenerator = opts != null ? (ref = opts.heatmap) != null ? ref.colorScaleGenerator : void 0 : void 0;\n      if (colorScaleGenerator == null) {\n        colorScaleGenerator = function(values) {\n          var max, min;\n          min = Math.min.apply(Math, values);\n          max = Math.max.apply(Math, values);\n          return function(x) {\n            var nonRed;\n            nonRed = 255 - Math.round(255 * (x - min) / (max - min));\n            return \"rgb(255,\" + nonRed + \",\" + nonRed + \")\";\n          };\n        };\n      }\n      heatmapper = (function(_this) {\n        return function(scope) {\n          var colorScale, forEachCell, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          colorScale = colorScaleGenerator(values);\n          return forEachCell(function(x, elem) {\n            return elem.css(\"background-color\", colorScale(x));\n          });\n        };\n      })(this);\n      switch (scope) {\n        case \"heatmap\":\n          heatmapper(\".pvtVal\");\n          break;\n        case \"rowheatmap\":\n          for (i = l = 0, ref1 = numRows; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {\n            heatmapper(\".pvtVal.row\" + i);\n          }\n          break;\n        case \"colheatmap\":\n          for (j = o = 0, ref2 = numCols; 0 <= ref2 ? o < ref2 : o > ref2; j = 0 <= ref2 ? ++o : --o) {\n            heatmapper(\".pvtVal.col\" + j);\n          }\n      }\n      heatmapper(\".pvtTotal.rowTotal\");\n      heatmapper(\".pvtTotal.colTotal\");\n      return this;\n    };\n\n    /*\n    Barchart post-processing\n     */\n    $.fn.barchart = function(opts) {\n      var barcharter, i, l, numCols, numRows, ref;\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      barcharter = (function(_this) {\n        return function(scope) {\n          var forEachCell, max, min, range, scaler, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          max = Math.max.apply(Math, values);\n          if (max < 0) {\n            max = 0;\n          }\n          range = max;\n          min = Math.min.apply(Math, values);\n          if (min < 0) {\n            range = max - min;\n          }\n          scaler = function(x) {\n            return 100 * x / (1.4 * range);\n          };\n          return forEachCell(function(x, elem) {\n            var bBase, bgColor, text, wrapper;\n            text = elem.text();\n            wrapper = $(\"<div>\").css({\n              \"position\": \"relative\",\n              \"height\": \"55px\"\n            });\n            bgColor = \"gray\";\n            bBase = 0;\n            if (min < 0) {\n              bBase = scaler(-min);\n            }\n            if (x < 0) {\n              bBase += scaler(x);\n              bgColor = \"darkred\";\n              x = -x;\n            }\n            wrapper.append($(\"<div>\").css({\n              \"position\": \"absolute\",\n              \"bottom\": bBase + \"%\",\n              \"left\": 0,\n              \"right\": 0,\n              \"height\": scaler(x) + \"%\",\n              \"background-color\": bgColor\n            }));\n            wrapper.append($(\"<div>\").text(text).css({\n              \"position\": \"relative\",\n              \"padding-left\": \"5px\",\n              \"padding-right\": \"5px\"\n            }));\n            return elem.css({\n              \"padding\": 0,\n              \"padding-top\": \"5px\",\n              \"text-align\": \"center\"\n            }).html(wrapper);\n          });\n        };\n      })(this);\n      for (i = l = 0, ref = numRows; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {\n        barcharter(\".pvtVal.row\" + i);\n      }\n      barcharter(\".pvtTotal.colTotal\");\n      return this;\n    };\n\n    /*\n    Grouping fold/expand rows and cols\n     */\n    childIndex = function(el) {\n      return Array.prototype.indexOf.call(el.parentNode.children, el);\n    };\n    childKeysIndices = function(keys, n) {\n      var key, len, results, up;\n      up = keys[0].length === 1 ? 1 : -1;\n      len = keys[n].length;\n      results = [];\n      while ((n = n + up, key = keys[n]) && key.length > len) {\n        if (key.length === len + 1) {\n          results.push(n);\n        } else {\n          continue;\n        }\n      }\n      return results;\n    };\n    parentKeysIndices = function(keys, n) {\n      var key, len, results, up;\n      up = keys[0].length === 1 ? 1 : -1;\n      results = [];\n      while ((len = keys[n].length) > 1) {\n        while ((n = n - up, key = keys[n]) && key.length >= len) {}\n        results.push(n);\n      }\n      return results;\n    };\n    levelKeysIndices = function(keys, level) {\n      return (keys.filter(function(d) {\n        return d.length === level;\n      })).map(keys.indexOf.bind(keys));\n    };\n    getAxis = function(table, rows, level) {\n      if (rows) {\n        return table.find(\"thead tr:last-child th.pvtAxisLabel:nth-of-type(\" + level + \")\");\n      } else {\n        return table.find(\"thead tr:nth-child(\" + level + \") th.pvtAxisLabel\");\n      }\n    };\n    getHeader = function(table, rows, n) {\n      return table.find(rows ? \"tbody tr th.row\" + n : \"thead th.col\" + n);\n    };\n    rowGetter = function(table) {\n      var selecttion;\n      selecttion = table.find('tbody tr');\n      return function(n) {\n        return $(selecttion[n]);\n      };\n    };\n    colGetter = function(table) {\n      var selecttion;\n      selecttion = table.find('tr');\n      return function(n) {\n        return selecttion.find(\".col\" + n);\n      };\n    };\n    showHide = function(getter, keys, nth, show) {\n      var fn, i, n, ref, row;\n      ref = childKeysIndices(keys, nth);\n      for (i in ref) {\n        n = ref[i];\n        row = getter(n);\n        fn = show ? $.fn.show : $.fn.hide;\n        fn.call(row);\n        if (!row.hasClass('collapsed')) {\n          showHide(getter, keys, n, show);\n        }\n      }\n      return true;\n    };\n    expandRowsGroupAfter = function(cell, rows, keys, nth) {\n      var getter, i, initIndex, insertPoint, p, parent, parentIndex, ref, ref1, row, table;\n      table = $(cell).closest('table');\n      initIndex = childIndex(cell.parentNode);\n      getter = rowGetter(table);\n      row = getter(nth);\n      insertPoint = row.hasClass('collapsed') ? getter(cell._old) : row;\n      if (!row.hasClass('collapsed')) {\n        cell._old = childIndex(cell.parentNode);\n      }\n      insertPoint.prepend(cell);\n      ref = parentKeysIndices(keys, nth);\n      for (i in ref) {\n        p = ref[i];\n        parent = (getHeader(table, rows, p))[0];\n        parentIndex = childIndex(parent.parentNode);\n        parent._old = (ref1 = parent._old) != null ? ref1 : parentIndex;\n        if (parent._old === initIndex && parent.rowSpan === 1) {\n          parent._old -= initIndex - childIndex(cell.parentNode);\n        }\n        if (initIndex === parentIndex) {\n          insertPoint.prepend(parent);\n        }\n      }\n      return expandWithSpan(cell, rows, keys, nth);\n    };\n    expandWithSpan = function(cell, rows, keys, nth) {\n      var change, i, p, parent, ref, ref1, ref2, span, table;\n      table = $(cell).closest('table');\n      span = rows ? 'rowSpan' : 'colSpan';\n      ref1 = [cell[span], (ref = cell._span) != null ? ref : 1], cell._span = ref1[0], cell[span] = ref1[1];\n      change = cell[span] - cell._span;\n      ref2 = parentKeysIndices(keys, nth);\n      for (i in ref2) {\n        p = ref2[i];\n        parent = (getHeader(table, rows, p))[0];\n        if (parent[span] === 1) {\n          parent._span += change;\n          break;\n        }\n        parent[span] += change;\n      }\n      return expandRowCol(cell, rows, keys, nth, parent);\n    };\n    expandRowCol = function(cell, rows, keys, nth, parent) {\n      var getter, span, table;\n      table = $(cell).closest('table');\n      getter = rows ? rowGetter(table) : colGetter(table);\n      span = rows ? 'rowSpan' : 'colSpan';\n      if ((parent != null ? parent[span] : void 0) !== 1) {\n        showHide(getter, keys, nth, getter(nth).hasClass('collapsed'));\n      }\n      getter(nth).toggleClass('collapsed');\n      return $(cell).toggleClass('open close');\n    };\n    expandAll = function(pivotData, table, level, rows, expand) {\n      var el, i, keys, l, levels, n, ref, ref1, ref2;\n      if (expand && level > 1) {\n        getAxis(table, rows, level - 1).removeClass('close').addClass('open');\n        expandAll(pivotData, table, level - 1, rows, expand);\n      }\n      levels = (rows ? pivotData.rowAttrs : pivotData.colAttrs).length - 1;\n      if (!expand && (level < levels)) {\n        for (i = l = ref = level + 1, ref1 = levels; ref <= ref1 ? l <= ref1 : l >= ref1; i = ref <= ref1 ? ++l : --l) {\n          getAxis(table, rows, i).removeClass('open').addClass('close');\n        }\n      }\n      keys = rows ? pivotData.rowKeys : pivotData.colKeys;\n      ref2 = levelKeysIndices(keys, level);\n      for (i in ref2) {\n        n = ref2[i];\n        el = getHeader(table, rows, n);\n        if (expand === el.hasClass('close')) {\n          el.trigger('click');\n        }\n      }\n      return null;\n    };\n    getExpandHandler = function(keys, rows, handler) {\n      return function(ev) {\n        var match;\n        match = ev.target.className.match(rows ? /row(\\d+)/ : /col(\\d+)/);\n        if (match) {\n          return handler(ev.target, rows, keys, +match[1]);\n        }\n      };\n    };\n    return getExpandAllHandler = function(pivotData, level, rows) {\n      return function(ev) {\n        expandAll(pivotData, $(ev.target).closest('table'), level + 1, rows, $(ev.target).hasClass('close'));\n        return $(ev.target).toggleClass('open close');\n      };\n    };\n  });\n\n}).call(this);\n\n//# sourceMappingURL=pivot.js.map\n"]}