{"version":3,"sources":["pivot.coffee","pivot.min.js"],"names":["callWithJQuery","indexOf","item","i","l","this","length","slice","bind","fn","me","apply","arguments","hasProp","hasOwnProperty","pivotModule","exports","module","require","define","amd","jQuery","$","PivotData","addSeparators","aggregatorTemplates","aggregators","dayNamesEn","derivers","getSort","locales","mthNamesEn","naturalSort","numberFormat","pivotTableRenderer","rd","renderers","rx","rz","sortAs","usFmt","usFmtInt","usFmtPct","zeroPad","nStr","thousandsSep","decimalSep","rgx","x","x1","x2","split","test","replace","opts","defaults","digitsAfterDecimal","scaler","prefix","suffix","extend","result","isNaN","isFinite","toFixed","count","formatter","data","rowKey","colKey","push","value","format","uniques","arg","attr","uniq","record","ref","call","numInputs","sum","parseFloat","extremes","mode","val","sorter","sorters","ref1","ref2","Math","quantile","q","vals","sort","a","b","floor","ceil","runningStat","ddof","n","m","s","m_new","sqrt","sumOverSum","denom","num","sumNum","sumDenom","sumOverSumBound80","upper","sign","fractionOf","wrapped","type","selector","total","row","col","inner","getAggregator","countUnique","f","listUnique","join","max","min","first","last","median","average","stdev","tpl","Count","Count Unique Values","List Unique Values","Sum","Integer Sum","Average","Median","Sample Variance","Sample Standard Deviation","Minimum","Maximum","First","Last","Sum over Sum","80% Upper Bound","80% Lower Bound","Sum as Fraction of Total","Sum as Fraction of Rows","Sum as Fraction of Columns","Count as Fraction of Total","Count as Fraction of Rows","Count as Fraction of Columns","Table","Table Barchart","barchart","Heatmap","heatmap","Row Heatmap","Col Heatmap","en","localeStrings","renderError","computeError","uiRenderError","selectAll","selectNone","tooMany","filterResults","cancel","totals","vs","by","number","substr","bin","binWidth","dateFormat","formatString","utcOutput","mthNames","dayNames","utc","date","Date","parse","p","_this","as","bs","nulls_first","a1","b1","nas","nbs","nf","String","match","shift","order","l_mapping","mapping","toLowerCase","isFunction","input","ref3","ref4","ref5","ref6","ref7","ref8","ref9","getRowKeys","getColKeys","sortKeys","arrSort","aggregator","aggregatorName","colAttrs","cols","rowAttrs","rows","valAttrs","rowOrder","colOrder","derivedAttributes","filter","tree","rowKeys","colKeys","rowTotals","colTotals","allTotal","sorted","forEachRecord","processRecord","addRecord","compactRecord","j","k","len1","results","results1","tblCols","isEmptyObject","v","isArray","each","text","Error","prototype","forEachMatchingRecord","criteria","callback","attrs","sortersArr","comparison","r","c","all_keys","subarrays","concat","map","d","flatColKey","flatRowKey","len2","len3","o","t","window","pivotData","len4","u","fromCharCode","agg","pivotUtilities","getClickHandler","spanSize","tbody","td","th","thead","totalAggregator","tr","txt","table","clickCallback","rowValues","colValues","filters","e","document","createElement","className","arr","len","noDraw","stop","parseInt","setAttribute","appendChild","textContent","innerHTML","style","paddingLeft","onclick","pivot","inputOpts","locale","localeDefaults","dataClass","renderer","rendererOptions","error","console","stack","html","hasChildNodes","removeChild","lastChild","append","pivotUI","overwrite","attrLength","attrValues","colOrderArrow","existingOpts","fn1","initialRender","materializedInput","ordering","pivotTable","recordsProcessed","refresh","refreshDelayed","rendererControl","rowOrderArrow","shownAttributes","shownInAggregators","shownInDragDrop","tr1","tr2","uiTable","unused","unusedAttrsVerticalAutoCutoff","unusedAttrsVerticalAutoOverride","hiddenAttributes","hiddenFromAggregators","hiddenFromDragDrop","menuLimit","exclusions","inclusions","unusedAttrsVertical","autoSortUnusedAttrs","onRefresh","showUI","base","class","addClass","appendTo","attrElem","checkContainer","closeFilterBox","controls","filterItem","filterItemExcluded","finalButtons","hasExcludedItem","placeholder","triangleLink","valueCount","valueList","values","hide","accept","accept_gen","trim","accepted","real_filter","substring","find","parent","show","prop","toggleClass","removeClass","left","top","currentTarget","position","css","key_a_to_z","rowSymbol","colSymbol","next","value_a_to_z","value_z_to_a","role","prepend","inArray","rendererName","newDropdown","numInputsToProcess","pivotUIOptions","pvtVals","subopts","unusedAttrsContainer","w","remove","not","excludedItems","inclusionsInfo","children","setTimeout","sortable","update","ui","sender","connectWith","items","scope","colorScaleGenerator","heatmapper","numCols","numRows","nonRed","round","colorScale","forEachCell","elem","barcharter","range","bBase","bgColor","wrapper","height","bottom","right","background-color","padding-left","padding-right","padding","padding-top","text-align"],"mappings":"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","file":"pivot.min.js","sourcesContent":["callWithJQuery = (pivotModule) ->\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\n        pivotModule require(\"jquery\")\n    else if typeof define is \"function\" and define.amd # AMD\n        define [\"jquery\"], pivotModule\n    # Plain browser env\n    else\n        pivotModule jQuery\n\ncallWithJQuery ($) ->\n\n    ###\n    Utilities\n    ###\n\n    addSeparators = (nStr, thousandsSep, decimalSep) ->\n        nStr += ''\n        x = nStr.split('.')\n        x1 = x[0]\n        x2 = if x.length > 1 then  decimalSep + x[1] else ''\n        rgx = /(\\d+)(\\d{3})/\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2') while rgx.test(x1)\n        return x1 + x2\n\n    numberFormat = (opts) ->\n        defaults =\n            digitsAfterDecimal: 2, scaler: 1,\n            thousandsSep: \",\", decimalSep: \".\"\n            prefix: \"\", suffix: \"\"\n        opts = $.extend({}, defaults, opts)\n        (x) ->\n            return \"\" if isNaN(x) or not isFinite(x)\n            result = addSeparators (opts.scaler*x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep\n            return \"\"+opts.prefix+result+opts.suffix\n\n    #aggregator templates default to US number formatting but this is overrideable\n    usFmt = numberFormat()\n    usFmtInt = numberFormat(digitsAfterDecimal: 0)\n    usFmtPct = numberFormat(digitsAfterDecimal:1, scaler: 100, suffix: \"%\")\n\n    aggregatorTemplates =\n        count: (formatter=usFmtInt) -> () -> (data, rowKey, colKey) ->\n            count: 0\n            push:  -> @count++\n            value: -> @count\n            format: formatter\n\n        uniques: (fn, formatter=usFmtInt) -> ([attr]) -> (data, rowKey, colKey) ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> fn(@uniq)\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        sum: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            push: (record) -> @sum += parseFloat(record[attr]) if not isNaN parseFloat(record[attr])\n            value: -> @sum\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        extremes: (mode, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            sorter: getSort(data?.sorters, attr)\n            push: (record) ->\n                x = record[attr]\n                if mode in [\"min\", \"max\"]\n                    x = parseFloat(x)\n                    if not isNaN x then @val = Math[mode](x, @val ? x)\n                if mode == \"first\" then @val = x if @sorter(x, @val ? x) <= 0\n                if mode == \"last\"  then @val = x if @sorter(x, @val ? x) >= 0\n            value: -> @val\n            format: (x) -> if isNaN(x) then x else formatter(x)\n            numInputs: if attr? then 0 else 1\n\n        quantile: (q, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            vals: []\n            push: (record) ->\n                x = parseFloat(record[attr])\n                @vals.push(x) if not isNaN(x)\n            value: ->\n                return null if @vals.length == 0\n                @vals.sort((a,b) -> a-b)\n                i = (@vals.length-1)*q\n                return (@vals[Math.floor(i)] + @vals[Math.ceil(i)])/2.0\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        runningStat: (mode=\"mean\", ddof=1, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            n: 0.0, m: 0.0, s: 0.0\n            push: (record) ->\n                x = parseFloat(record[attr])\n                return if isNaN(x)\n                @n += 1.0\n                if @n == 1.0\n                    @m = x\n                else\n                    m_new = @m + (x - @m)/@n\n                    @s = @s + (x - @m)*(x - m_new)\n                    @m = m_new\n            value: ->\n                if mode == \"mean\"\n                    return if @n == 0 then 0/0 else @m\n                return 0 if @n <= ddof\n                switch mode\n                    when \"var\"   then @s/(@n-ddof)\n                    when \"stdev\" then Math.sqrt(@s/(@n-ddof))\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        sumOverSum: (formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: -> @sumNum/@sumDenom\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        sumOverSumBound80: (upper=true, formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: ->\n                sign = if upper then 1 else -1\n                (0.821187207574908/@sumDenom + @sumNum/@sumDenom + 1.2815515655446004*sign*\n                    Math.sqrt(0.410593603787454/ (@sumDenom*@sumDenom) + (@sumNum*(1 - @sumNum/ @sumDenom))/ (@sumDenom*@sumDenom)))/\n                    (1 + 1.642374415149816/@sumDenom)\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        fractionOf: (wrapped, type=\"total\", formatter=usFmtPct) -> (x...) -> (data, rowKey, colKey) ->\n            selector: {total:[[],[]],row:[rowKey,[]],col:[[],colKey]}[type]\n            inner: wrapped(x...)(data, rowKey, colKey)\n            push: (record) -> @inner.push record\n            format: formatter\n            value: -> @inner.value() / data.getAggregator(@selector...).inner.value()\n            numInputs: wrapped(x...)().numInputs\n\n    aggregatorTemplates.countUnique = (f) -> aggregatorTemplates.uniques(((x) -> x.length), f)\n    aggregatorTemplates.listUnique =  (s) -> aggregatorTemplates.uniques(((x) -> x.sort(naturalSort).join(s)), ((x)->x))\n    aggregatorTemplates.max =         (f) -> aggregatorTemplates.extremes('max', f)\n    aggregatorTemplates.min =         (f) -> aggregatorTemplates.extremes('min', f)\n    aggregatorTemplates.first =       (f) -> aggregatorTemplates.extremes('first', f)\n    aggregatorTemplates.last =        (f) -> aggregatorTemplates.extremes('last', f)\n    aggregatorTemplates.median =      (f) -> aggregatorTemplates.quantile(0.5, f)\n    aggregatorTemplates.average =     (f) -> aggregatorTemplates.runningStat(\"mean\", 1, f)\n    aggregatorTemplates.var =         (ddof, f) -> aggregatorTemplates.runningStat(\"var\", ddof, f)\n    aggregatorTemplates.stdev =       (ddof, f) -> aggregatorTemplates.runningStat(\"stdev\", ddof, f)\n\n    #default aggregators & renderers use US naming and number formatting\n    aggregators = do (tpl = aggregatorTemplates) ->\n        \"Count\":                tpl.count(usFmtInt)\n        \"Count Unique Values\":  tpl.countUnique(usFmtInt)\n        \"List Unique Values\":   tpl.listUnique(\", \")\n        \"Sum\":                  tpl.sum(usFmt)\n        \"Integer Sum\":          tpl.sum(usFmtInt)\n        \"Average\":              tpl.average(usFmt)\n        \"Median\":               tpl.median(usFmt)\n        \"Sample Variance\":      tpl.var(1, usFmt)\n        \"Sample Standard Deviation\": tpl.stdev(1, usFmt)\n        \"Minimum\":              tpl.min(usFmt)\n        \"Maximum\":              tpl.max(usFmt)\n        \"First\":                tpl.first(usFmt)\n        \"Last\":                 tpl.last(usFmt)\n        \"Sum over Sum\":         tpl.sumOverSum(usFmt)\n        \"80% Upper Bound\":      tpl.sumOverSumBound80(true, usFmt)\n        \"80% Lower Bound\":      tpl.sumOverSumBound80(false, usFmt)\n        \"Sum as Fraction of Total\":     tpl.fractionOf(tpl.sum(),   \"total\", usFmtPct)\n        \"Sum as Fraction of Rows\":      tpl.fractionOf(tpl.sum(),   \"row\",   usFmtPct)\n        \"Sum as Fraction of Columns\":   tpl.fractionOf(tpl.sum(),   \"col\",   usFmtPct)\n        \"Count as Fraction of Total\":   tpl.fractionOf(tpl.count(), \"total\", usFmtPct)\n        \"Count as Fraction of Rows\":    tpl.fractionOf(tpl.count(), \"row\",   usFmtPct)\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\",   usFmtPct)\n\n    renderers =\n        \"Table\":          (data, opts) ->   pivotTableRenderer(data, opts)\n        \"Table Barchart\": (data, opts) -> $(pivotTableRenderer(data, opts)).barchart()\n        \"Heatmap\":        (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\",    opts)\n        \"Row Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts)\n        \"Col Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts)\n\n    locales =\n        en:\n            aggregators: aggregators\n            renderers: renderers\n            localeStrings:\n                renderError: \"An error occurred rendering the PivotTable results.\"\n                computeError: \"An error occurred computing the PivotTable results.\"\n                uiRenderError: \"An error occurred rendering the PivotTable UI.\"\n                selectAll: \"Select All\"\n                selectNone: \"Select None\"\n                tooMany: \"(too many to list)\"\n                filterResults: \"Filter values\"\n                apply: \"Apply\"\n                cancel: \"Cancel\"\n                totals: \"Totals\" #for table renderer\n                vs: \"vs\" #for gchart renderer\n                by: \"by\" #for gchart renderer\n\n    #dateFormat deriver l10n requires month and day names to be passed in directly\n    mthNamesEn = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\n    dayNamesEn = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\n    zeroPad = (number) -> (\"0\"+number).substr(-2,2)\n\n    derivers =\n        bin: (col, binWidth) -> (record) -> record[col] - record[col] % binWidth\n        dateFormat: (col, formatString, utcOutput=false, mthNames=mthNamesEn, dayNames=dayNamesEn) ->\n            utc = if utcOutput then \"UTC\" else \"\"\n            (record) -> #thanks http://stackoverflow.com/a/12213072/112871\n                date = new Date(Date.parse(record[col]))\n                if isNaN(date) then return \"\"\n                formatString.replace /%(.)/g, (m, p) ->\n                    switch p\n                        when \"y\" then date[\"get#{utc}FullYear\"]()\n                        when \"m\" then zeroPad(date[\"get#{utc}Month\"]()+1)\n                        when \"n\" then mthNames[date[\"get#{utc}Month\"]()]\n                        when \"d\" then zeroPad(date[\"get#{utc}Date\"]())\n                        when \"w\" then dayNames[date[\"get#{utc}Day\"]()]\n                        when \"x\" then date[\"get#{utc}Day\"]()\n                        when \"H\" then zeroPad(date[\"get#{utc}Hours\"]())\n                        when \"M\" then zeroPad(date[\"get#{utc}Minutes\"]())\n                        when \"S\" then zeroPad(date[\"get#{utc}Seconds\"]())\n                        else \"%\" + p\n\n    rx = /(\\d+)|(\\D+)/g\n    rd = /\\d/\n    rz = /^0/\n    naturalSort = (as, bs, nulls_first=true) =>\n        #nulls first\n        nf = if nulls_first then 1 else -1\n        return -1*nf if bs? and not as?\n        return  1*nf if as? and not bs?\n\n        #then raw NaNs\n        return -1 if typeof as == \"number\" and isNaN(as)\n        return  1 if typeof bs == \"number\" and isNaN(bs)\n\n        #numbers and numbery strings group together\n        nas = +as\n        nbs = +bs\n        return -1 if nas < nbs\n        return  1 if nas > nbs\n\n        #within that, true numbers before numbery strings\n        return -1 if typeof as == \"number\" and typeof bs != \"number\"\n        return  1 if typeof bs == \"number\" and typeof as != \"number\"\n        return  0 if typeof as == \"number\" and typeof bs == \"number\"\n\n        # 'Infinity' is a textual number, so less than 'A'\n        return -1 if isNaN(nbs) and not isNaN(nas)\n        return  1 if isNaN(nas) and not isNaN(nbs)\n\n        #finally, \"smart\" string sorting per http://stackoverflow.com/a/4373421/112871\n        a = String(as)\n        b = String(bs)\n        return 0 if a == b\n        return (if a > b then 1 else -1) unless rd.test(a) and rd.test(b)\n\n        #special treatment for strings containing digits\n        a = a.match(rx) #create digits vs non-digit chunks and iterate through\n        b = b.match(rx)\n        while a.length and b.length\n            a1 = a.shift()\n            b1 = b.shift()\n            if a1 != b1\n                if rd.test(a1) and rd.test(b1) #both are digit chunks\n                    return a1.replace(rz, \".0\") - b1.replace(rz, \".0\")\n                else\n                    return (if a1 > b1 then 1 else -1)\n        return a.length - b.length\n\n    sortAs = (order) ->\n        mapping = {}\n        l_mapping = {} # sort lowercased keys similarly\n        for i, x of order\n            mapping[x] = i\n            l_mapping[x.toLowerCase()] = i if typeof x == \"string\"\n        (a, b) ->\n            if mapping[a]? and mapping[b]? then mapping[a] - mapping[b]\n            else if mapping[a]? then -1\n            else if mapping[b]? then 1\n            else if l_mapping[a]? and l_mapping[b]? then l_mapping[a] - l_mapping[b]\n            else if l_mapping[a]? then -1\n            else if l_mapping[b]? then 1\n            else naturalSort(a,b)\n\n    getSort = (sorters, attr) ->\n        if sorters?\n            if $.isFunction(sorters)\n                sort = sorters(attr)\n                return sort if $.isFunction(sort)\n            else if sorters[attr]?\n                return sorters[attr]\n        return naturalSort\n\n    ###\n    Data Model class\n    ###\n\n    class PivotData\n        constructor: (input, opts = {}) ->\n            @input = input\n            @aggregator = opts.aggregator ? aggregatorTemplates.count()()\n            @aggregatorName = opts.aggregatorName ? \"Count\"\n            @colAttrs = opts.cols ? []\n            @rowAttrs = opts.rows ? []\n            @valAttrs = opts.vals ? []\n            @sorters = opts.sorters ? {}\n            @rowOrder = opts.rowOrder ? \"key_a_to_z\"\n            @colOrder = opts.colOrder ? \"key_a_to_z\"\n            @derivedAttributes = opts.derivedAttributes ? {}\n            @filter = opts.filter ? (-> true)\n            @tree = {}\n            @rowKeys = []\n            @colKeys = []\n            @rowTotals = {}\n            @colTotals = {}\n            @allTotal = @aggregator(this, [], [])\n            @sorted = false\n\n            # iterate through input, accumulating data for cells\n            PivotData.forEachRecord @input, @derivedAttributes, (record) =>\n                @processRecord(record) if @filter(record)\n\n        #can handle arrays or jQuery selections of tables\n        @forEachRecord = (input, derivedAttributes, f) ->\n            if $.isEmptyObject derivedAttributes\n                addRecord = f\n            else\n                addRecord = (record) ->\n                    record[k] = v(record) ? record[k] for k, v of derivedAttributes\n                    f(record)\n\n            #if it's a function, have it call us back\n            if $.isFunction(input)\n                input(addRecord)\n            else if $.isArray(input)\n                if $.isArray(input[0]) #array of arrays\n                    for own i, compactRecord of input when i > 0\n                        record = {}\n                        record[k] = compactRecord[j] for own j, k of input[0]\n                        addRecord(record)\n                else #array of objects\n                    addRecord(record) for record in input\n            else if input instanceof $\n                tblCols = []\n                $(\"thead > tr > th\", input).each (i) -> tblCols.push $(this).text()\n                $(\"tbody > tr\", input).each (i) ->\n                    record = {}\n                    $(\"td\", this).each (j) -> record[tblCols[j]] = $(this).text()\n                    addRecord(record)\n            else\n                throw new Error(\"unknown input format\")\n\n        forEachMatchingRecord: (criteria, callback) ->\n            PivotData.forEachRecord @input, @derivedAttributes, (record) =>\n                return if not @filter(record)\n                for k, v of criteria\n                    return if v != (record[k] ? \"null\")\n                callback(record)\n\n        arrSort: (attrs, nulls_first) =>\n            sortersArr = (getSort(@sorters, a) for a in attrs)\n            (a,b) ->\n                for own i, sorter of sortersArr\n                    comparison = sorter(a[i], b[i], nulls_first)\n                    return comparison if comparison != 0\n                return 0\n\n        sortKeys: () =>\n            if not @sorted\n                @sorted = true\n                v = (r,c) => @getAggregator(r,c).value()\n                switch @rowOrder\n                    when \"value_a_to_z\" then @rowKeys.sort (a,b) =>  naturalSort v(a,[]), v(b,[])\n                    when \"value_z_to_a\" then @rowKeys.sort (a,b) => -naturalSort v(a,[]), v(b,[])\n                    else                     @rowKeys.sort @arrSort(@rowAttrs, true)\n                switch @colOrder\n                    when \"value_a_to_z\" then @colKeys.sort (a,b) =>  naturalSort v([],a), v([],b)\n                    when \"value_z_to_a\" then @colKeys.sort (a,b) => -naturalSort v([],a), v([],b)\n                    else                     @colKeys.sort @arrSort(@colAttrs, false)\n\n        getColKeys: (all_keys=false) =>\n            @sortKeys()\n            l = @colAttrs.length\n            return if all_keys then @colKeys else @colKeys.filter (x) -> x.length == l\n\n        getRowKeys: (all_keys=false) =>\n            @sortKeys()\n            l = @rowAttrs.length\n            return if all_keys then @rowKeys else @rowKeys.filter (x) -> x.length == l\n\n        # subarays [1,2,3] => [[], [1], [1,2], [1,2,3]]\n        subarrays: (x) -> [[]].concat x.map (d,i) => x.slice(0,i+1)\n\n        processRecord: (record) -> #this code is called in a tight loop\n            window.pivotData = @\n\n            colKeys = []\n            rowKeys = []\n            colKeys.push record[x] ? \"null\" for x in @colAttrs\n            rowKeys.push record[x] ? \"null\" for x in @rowAttrs\n            \n            @allTotal.push record\n\n            for colKey in @subarrays colKeys\n                for rowKey in @subarrays rowKeys\n                    \n                    flatRowKey = rowKey.join(String.fromCharCode(0))\n                    flatColKey = colKey.join(String.fromCharCode(0))\n                \n                    if rowKey.length != 0\n                        if not @rowTotals[flatRowKey]\n                            @rowKeys.push rowKey\n                        if not @rowTotals[flatRowKey+flatColKey]\n                            @rowTotals[flatRowKey+flatColKey] = @aggregator(this, rowKey, [])\n                        @rowTotals[flatRowKey+flatColKey].push record\n\n                    if colKey.length != 0\n                        if not @colTotals[flatColKey]\n                            @colKeys.push colKey\n                        if not @colTotals[flatColKey+flatRowKey]\n                            @colTotals[flatColKey+flatRowKey] = @aggregator(this, [], colKey)\n                        @colTotals[flatColKey+flatRowKey].push record\n\n                    if colKey.length != 0 and rowKey.length != 0\n                        if not @tree[flatRowKey]\n                            @tree[flatRowKey] = {}\n                        if not @tree[flatRowKey][flatColKey]\n                            @tree[flatRowKey][flatColKey] = @aggregator(this, rowKey, colKey)\n                        @tree[flatRowKey][flatColKey].push record\n\n        getAggregator: (rowKey, colKey) =>\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n            if rowKey.length == 0 and colKey.length == 0\n                agg = @allTotal\n            else if rowKey.length == 0\n                agg = @colTotals[flatColKey]\n            else if colKey.length == 0\n                agg = @rowTotals[flatRowKey]\n            else\n                agg = @tree[flatRowKey][flatColKey]\n            return agg ? {value: (-> null), format: -> \"\"}\n\n    #expose these to the outside world\n    $.pivotUtilities = {aggregatorTemplates, aggregators, renderers, derivers, locales,\n        naturalSort, numberFormat, sortAs, PivotData}\n\n    ###\n    Default Renderer for hierarchical table layout\n    ###\n\n    pivotTableRenderer = (pivotData, opts) ->\n\n        defaults =\n            table:\n                clickCallback: null\n                rowTotals: true\n                colTotals: true\n            localeStrings: totals: \"Totals\"\n\n        opts = $.extend(true, {}, defaults, opts)\n\n        colAttrs = pivotData.colAttrs\n        rowAttrs = pivotData.rowAttrs\n        rowKeys = pivotData.getRowKeys(true)\n        colKeys = pivotData.getColKeys(true)\n\n        if opts.table.clickCallback\n            getClickHandler = (value, rowValues, colValues) ->\n                filters = {}\n                filters[attr] = colValues[i] for own i, attr of colAttrs when colValues[i]?\n                filters[attr] = rowValues[i] for own i, attr of rowAttrs when rowValues[i]?\n                return (e) -> opts.table.clickCallback(e, value, filters, pivotData)\n\n        #now actually build the output\n        result = document.createElement(\"table\")\n        result.className = \"pvtTable\"\n\n        #helper function for setting row/col-span in pivotTableRenderer\n        spanSize = (arr, i, j) ->\n            if i != 0\n                noDraw = true\n                for x in [0..j]\n                    if arr[i-1][x] != arr[i][x]\n                        noDraw = false\n                if noDraw\n                  return -1 #do not draw cell\n            len = 0\n            while i+len < arr.length\n                stop = false\n                for x in [0..j]\n                    stop = true if arr[i][x] != arr[i+len][x]\n                break if stop\n                len++\n            return len\n\n        #the first few rows are for col headers\n        thead = document.createElement(\"thead\")\n        for own j, c of colAttrs\n            tr = document.createElement(\"tr\")\n            if parseInt(j) == 0 and rowAttrs.length != 0\n                th = document.createElement(\"th\")\n                th.setAttribute(\"colspan\", rowAttrs.length)\n                th.setAttribute(\"rowspan\", colAttrs.length)\n                tr.appendChild th\n            th = document.createElement(\"th\")\n            th.className = \"pvtAxisLabel\"\n            th.textContent = c\n            tr.appendChild th\n            for own i, colKey of colKeys\n                x = spanSize(colKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtColLabel\"\n                    th.textContent = colKey[j]\n                    th.setAttribute(\"colspan\", x)\n                    if parseInt(j) == colAttrs.length-1 and rowAttrs.length != 0\n                        th.setAttribute(\"rowspan\", 2)\n                    tr.appendChild th\n            if parseInt(j) == 0 && opts.table.rowTotals\n                th = document.createElement(\"th\")\n                th.className = \"pvtTotalLabel pvtRowTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                th.setAttribute(\"rowspan\", colAttrs.length + (if rowAttrs.length ==0 then 0 else 1))\n                tr.appendChild th\n            thead.appendChild tr\n\n        #then a row for row header headers\n        if rowAttrs.length !=0\n            tr = document.createElement(\"tr\")\n            for own i, r of rowAttrs\n                th = document.createElement(\"th\")\n                th.className = \"pvtAxisLabel\"\n                th.textContent = r\n                tr.appendChild th\n            th = document.createElement(\"th\")\n            if colAttrs.length ==0\n                th.className = \"pvtTotalLabel pvtRowTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n            tr.appendChild th\n            thead.appendChild tr\n        result.appendChild thead\n\n        #now the actual data rows, with their row headers and totals\n        tbody = document.createElement(\"tbody\")\n        for own i, rowKey of rowKeys\n            tr = document.createElement(\"tr\")\n            tr.className = if rowKey.length != rowAttrs.length then \"pvtSubtotal level#{rowKey.length}\" else \"pvtData\"\n            \n            # for own j, txt of rowKey\n            #     x = spanSize(rowKeys, parseInt(i), parseInt(j))\n            #     if x != -1\n            j = rowKey.length - 1\n            txt = rowKey[j]\n            th = document.createElement(\"th\")\n            th.className = \"pvtRowLabel\"\n            th.textContent = txt\n            # th.setAttribute(\"rowspan\", x)\n            # if parseInt(j) == rowAttrs.length-1 and colAttrs.length !=0\n            #     th.setAttribute(\"colspan\",2)\n            th.setAttribute 'colspan', rowAttrs.length + if colAttrs.length !=0 then 1 else 0\n            th.style.paddingLeft = 5 + parseInt(j) * 30 + 'px'\n            tr.appendChild th\n\n            for own j, colKey of colKeys #this is the tight loop\n                aggregator = pivotData.getAggregator(rowKey, colKey)\n                val = aggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtVal row#{i} col#{j}\"\n                td.className += \" pvtSubtotal level#{colKey.length}\" if colKey.length != colAttrs.length\n                td.textContent = aggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, rowKey, colKey)\n                tr.appendChild td\n\n            if opts.table.rowTotals || colAttrs.length == 0\n                totalAggregator = pivotData.getAggregator(rowKey, [])\n                val = totalAggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtTotal rowTotal\"\n                td.textContent = totalAggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, rowKey, [])\n                td.setAttribute(\"data-for\", \"row\"+i)\n                tr.appendChild td\n            tbody.appendChild tr\n\n        #finally, the row for col totals, and a grand total\n        if opts.table.colTotals || rowAttrs.length == 0\n            tr = document.createElement(\"tr\")\n            if opts.table.colTotals || rowAttrs.length == 0\n                th = document.createElement(\"th\")\n                th.className = \"pvtTotalLabel pvtColTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                th.setAttribute(\"colspan\", rowAttrs.length + (if colAttrs.length == 0 then 0 else 1))\n                tr.appendChild th\n            for own j, colKey of colKeys\n                totalAggregator = pivotData.getAggregator([], colKey)\n                val = totalAggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtTotal colTotal\"\n                td.textContent = totalAggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, [], colKey)\n                td.setAttribute(\"data-for\", \"col\"+j)\n                tr.appendChild td\n            if opts.table.rowTotals || colAttrs.length == 0\n                totalAggregator = pivotData.getAggregator([], [])\n                val = totalAggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtGrandTotal\"\n                td.textContent = totalAggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, [], [])\n                tr.appendChild td\n            tbody.appendChild tr\n        result.appendChild tbody\n\n        #squirrel this away for later\n        result.setAttribute(\"data-numrows\", rowKeys.length)\n        result.setAttribute(\"data-numcols\", colKeys.length)\n\n        return result\n\n    ###\n    Pivot Table core: create PivotData object and call Renderer on it\n    ###\n\n    $.fn.pivot = (input, inputOpts, locale=\"en\") ->\n        locale = \"en\" if not locales[locale]?\n        defaults =\n            cols : [], rows: [], vals: []\n            rowOrder: \"key_a_to_z\", colOrder: \"key_a_to_z\"\n            dataClass: PivotData\n            filter: -> true\n            aggregator: aggregatorTemplates.count()()\n            aggregatorName: \"Count\"\n            sorters: {}\n            derivedAttributes: {}\n            renderer: pivotTableRenderer\n\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings)\n        localeDefaults =\n            rendererOptions: {localeStrings}\n            localeStrings: localeStrings\n\n        opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts))\n\n        result = null\n        try\n            pivotData = new opts.dataClass(input, opts)\n            try\n                result = opts.renderer(pivotData, opts.rendererOptions)\n            catch e\n                console.error(e.stack) if console?\n                result = $(\"<span>\").html opts.localeStrings.renderError\n        catch e\n            console.error(e.stack) if console?\n            result = $(\"<span>\").html opts.localeStrings.computeError\n\n        x = this[0]\n        x.removeChild(x.lastChild) while x.hasChildNodes()\n        return @append result\n\n\n    ###\n    Pivot Table UI: calls Pivot Table core above with options set by user\n    ###\n\n    $.fn.pivotUI = (input, inputOpts, overwrite = false, locale=\"en\") ->\n        locale = \"en\" if not locales[locale]?\n        defaults =\n            derivedAttributes: {}\n            aggregators: locales[locale].aggregators\n            renderers: locales[locale].renderers\n            hiddenAttributes: []\n            hiddenFromAggregators: []\n            hiddenFromDragDrop: []\n            menuLimit: 500\n            cols: [], rows: [], vals: []\n            rowOrder: \"key_a_to_z\", colOrder: \"key_a_to_z\"\n            dataClass: PivotData\n            exclusions: {}\n            inclusions: {}\n            unusedAttrsVertical: 85\n            autoSortUnusedAttrs: false\n            onRefresh: null\n            showUI: true\n            filter: -> true\n            sorters: {}\n\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings)\n        localeDefaults =\n            rendererOptions: {localeStrings}\n            localeStrings: localeStrings\n\n        existingOpts = @data \"pivotUIOptions\"\n        if not existingOpts? or overwrite\n            opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts))\n        else\n            opts = existingOpts\n\n        try\n            # do a first pass on the data to cache a materialized copy of any\n            # function-valued inputs and to compute dimension cardinalities\n            attrValues = {}\n            materializedInput = []\n            recordsProcessed = 0\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) ->\n                return unless opts.filter(record)\n                materializedInput.push(record)\n                for own attr of record\n                    if not attrValues[attr]?\n                        attrValues[attr] = {}\n                        if recordsProcessed > 0\n                            attrValues[attr][\"null\"] = recordsProcessed\n                for attr of attrValues\n                    value = record[attr] ? \"null\"\n                    attrValues[attr][value] ?= 0\n                    attrValues[attr][value]++\n                recordsProcessed++\n\n            #start building the output\n            uiTable = $(\"<table>\", \"class\": \"pvtUi\").attr(\"cellpadding\", 5)\n\n            #renderer control\n            rendererControl = $(\"<td>\").addClass(\"pvtUiCell\")\n\n            renderer = $(\"<select>\")\n                .addClass('pvtRenderer')\n                .appendTo(rendererControl)\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.renderers\n                $(\"<option>\").val(x).html(x).appendTo(renderer)\n\n\n            #axis list, including the double-click menu\n            unused = $(\"<td>\").addClass('pvtAxisContainer pvtUnused pvtUiCell')\n            shownAttributes = (a for a of attrValues when a not in opts.hiddenAttributes)\n            shownInAggregators = (c for c in shownAttributes when c not in opts.hiddenFromAggregators)\n            shownInDragDrop = (c for c in shownAttributes when c not in opts.hiddenFromDragDrop)\n\n\n            unusedAttrsVerticalAutoOverride = false\n            if opts.unusedAttrsVertical == \"auto\"\n                unusedAttrsVerticalAutoCutoff = 120 # legacy support\n            else\n                unusedAttrsVerticalAutoCutoff = parseInt opts.unusedAttrsVertical\n\n            if not isNaN(unusedAttrsVerticalAutoCutoff)\n                attrLength = 0\n                attrLength += a.length for a in shownInDragDrop\n                unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff\n\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                unused.addClass('pvtVertList')\n            else\n                unused.addClass('pvtHorizList')\n\n            for own i, attr of shownInDragDrop\n                do (attr) ->\n                    values = (v for v of attrValues[attr])\n                    hasExcludedItem = false\n                    valueList = $(\"<div>\").addClass('pvtFilterBox').hide()\n\n                    valueList.append $(\"<h4>\").append(\n                        $(\"<span>\").text(attr),\n                        $(\"<span>\").addClass(\"count\").text(\"(#{values.length})\"),\n                        )\n                    if values.length > opts.menuLimit\n                        valueList.append $(\"<p>\").html(opts.localeStrings.tooMany)\n                    else\n                        if values.length > 5\n                            controls = $(\"<p>\").appendTo(valueList)\n                            sorter = getSort(opts.sorters, attr)\n                            placeholder = opts.localeStrings.filterResults\n                            $(\"<input>\", {type: \"text\"}).appendTo(controls)\n                                .attr({placeholder: placeholder, class: \"pvtSearch\"})\n                                .bind \"keyup\", ->\n                                    filter = $(this).val().toLowerCase().trim()\n                                    accept_gen = (prefix, accepted) -> (v) ->\n                                        real_filter = filter.substring(prefix.length).trim()\n                                        return true if real_filter.length == 0\n                                        return Math.sign(sorter(v.toLowerCase(), real_filter)) in accepted\n                                    accept =\n                                        if      filter.indexOf(\">=\") == 0 then accept_gen(\">=\", [1,0])\n                                        else if filter.indexOf(\"<=\") == 0 then accept_gen(\"<=\", [-1,0])\n                                        else if filter.indexOf(\">\") == 0  then accept_gen(\">\",  [1])\n                                        else if filter.indexOf(\"<\") == 0  then accept_gen(\"<\",  [-1])\n                                        else if filter.indexOf(\"~\") == 0  then (v) ->\n                                                return true if filter.substring(1).trim().length == 0\n                                                v.toLowerCase().match(filter.substring(1))\n                                        else (v) -> v.toLowerCase().indexOf(filter) != -1\n\n                                    valueList.find('.pvtCheckContainer p label span.value').each ->\n                                        if accept($(this).text())\n                                            $(this).parent().parent().show()\n                                        else\n                                            $(this).parent().parent().hide()\n                            controls.append $(\"<br>\")\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\n                                .html(opts.localeStrings.selectAll)\n                                .bind \"click\", ->\n                                    valueList.find(\"input:visible:not(:checked)\")\n                                        .prop(\"checked\", true).toggleClass(\"changed\")\n                                    return false\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\n                                .html(opts.localeStrings.selectNone)\n                                .bind \"click\", ->\n                                    valueList.find(\"input:visible:checked\")\n                                        .prop(\"checked\", false).toggleClass(\"changed\")\n                                    return false\n\n                        checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList)\n\n                        for value in values.sort(getSort(opts.sorters, attr))\n                             valueCount = attrValues[attr][value]\n                             filterItem = $(\"<label>\")\n                             filterItemExcluded = false\n                             if opts.inclusions[attr]\n                                filterItemExcluded = (value not in opts.inclusions[attr])\n                             else if opts.exclusions[attr]\n                                filterItemExcluded = (value in opts.exclusions[attr])\n                             hasExcludedItem ||= filterItemExcluded\n                             $(\"<input>\")\n                                .attr(\"type\", \"checkbox\").addClass('pvtFilter')\n                                .attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr,value])\n                                .appendTo(filterItem)\n                                .bind \"change\", -> $(this).toggleClass(\"changed\")\n                             filterItem.append $(\"<span>\").addClass(\"value\").text(value)\n                             filterItem.append $(\"<span>\").addClass(\"count\").text(\"(\"+valueCount+\")\")\n                             checkContainer.append $(\"<p>\").append(filterItem)\n\n                    closeFilterBox = ->\n                        if valueList.find(\"[type='checkbox']\").length >\n                               valueList.find(\"[type='checkbox']:checked\").length\n                                attrElem.addClass \"pvtFilteredAttribute\"\n                            else\n                                attrElem.removeClass \"pvtFilteredAttribute\"\n\n                            valueList.find('.pvtSearch').val('')\n                            valueList.find('.pvtCheckContainer p').show()\n                            valueList.hide()\n\n                    finalButtons = $(\"<p>\").appendTo(valueList)\n\n                    if values.length <= opts.menuLimit\n                        $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.apply)\n                            .appendTo(finalButtons).bind \"click\", ->\n                                if valueList.find(\".changed\").removeClass(\"changed\").length\n                                    refresh()\n                                closeFilterBox()\n\n                    $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.cancel)\n                        .appendTo(finalButtons).bind \"click\", ->\n                            valueList.find(\".changed:checked\")\n                                .removeClass(\"changed\").prop(\"checked\", false)\n                            valueList.find(\".changed:not(:checked)\")\n                                .removeClass(\"changed\").prop(\"checked\", true)\n                            closeFilterBox()\n\n                    triangleLink = $(\"<span>\").addClass('pvtTriangle')\n                        .html(\" &#x25BE;\").bind \"click\", (e) ->\n                            {left, top} = $(e.currentTarget).position()\n                            valueList.css(left: left+10, top: top+10).show()\n\n                    attrElem = $(\"<li>\").addClass(\"axis_#{i}\")\n                        .append $(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink)\n\n                    attrElem.addClass('pvtFilteredAttribute') if hasExcludedItem\n                    unused.append(attrElem).append(valueList)\n\n            tr1 = $(\"<tr>\").appendTo(uiTable)\n\n            #aggregator menu and value area\n\n            aggregator = $(\"<select>\").addClass('pvtAggregator')\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.aggregators\n                aggregator.append $(\"<option>\").val(x).html(x)\n\n            ordering =\n                key_a_to_z:   {rowSymbol: \"&varr;\", colSymbol: \"&harr;\", next: \"value_a_to_z\"}\n                value_a_to_z: {rowSymbol: \"&darr;\", colSymbol: \"&rarr;\", next: \"value_z_to_a\"}\n                value_z_to_a: {rowSymbol: \"&uarr;\", colSymbol: \"&larr;\", next: \"key_a_to_z\"}\n\n            rowOrderArrow = $(\"<a>\", role: \"button\").addClass(\"pvtRowOrder\")\n                .data(\"order\", opts.rowOrder).html(ordering[opts.rowOrder].rowSymbol)\n                .bind \"click\", ->\n                    $(this).data(\"order\", ordering[$(this).data(\"order\")].next)\n                    $(this).html(ordering[$(this).data(\"order\")].rowSymbol)\n                    refresh()\n\n            colOrderArrow = $(\"<a>\", role: \"button\").addClass(\"pvtColOrder\")\n                .data(\"order\", opts.colOrder).html(ordering[opts.colOrder].colSymbol)\n                .bind \"click\", ->\n                    $(this).data(\"order\", ordering[$(this).data(\"order\")].next)\n                    $(this).html(ordering[$(this).data(\"order\")].colSymbol)\n                    refresh()\n\n            $(\"<td>\").addClass('pvtVals pvtUiCell')\n              .appendTo(tr1)\n              .append(aggregator)\n              .append(rowOrderArrow)\n              .append(colOrderArrow)\n              .append($(\"<br>\"))\n\n            #column axes\n            $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols pvtUiCell').appendTo(tr1)\n\n            tr2 = $(\"<tr>\").appendTo(uiTable)\n\n            #row axes\n            tr2.append $(\"<td>\").addClass('pvtAxisContainer pvtRows pvtUiCell').attr(\"valign\", \"top\")\n\n            #the actual pivot table container\n            pivotTable = $(\"<td>\")\n                .attr(\"valign\", \"top\")\n                .addClass('pvtRendererArea')\n                .appendTo(tr2)\n\n            #finally the renderer dropdown and unused attribs are inserted at the requested location\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                uiTable.find('tr:nth-child(1)').prepend rendererControl\n                uiTable.find('tr:nth-child(2)').prepend unused\n            else\n                uiTable.prepend $(\"<tr>\").append(rendererControl).append(unused)\n\n            #render the UI in its default state\n            @html uiTable\n\n            #set up the UI initial state as requested by moving elements around\n\n            for x in opts.cols\n                @find(\".pvtCols\").append @find(\".axis_#{$.inArray(x, shownInDragDrop)}\")\n            for x in opts.rows\n                @find(\".pvtRows\").append @find(\".axis_#{$.inArray(x, shownInDragDrop)}\")\n            if opts.aggregatorName?\n                @find(\".pvtAggregator\").val opts.aggregatorName\n            if opts.rendererName?\n                @find(\".pvtRenderer\").val opts.rendererName\n\n            @find(\".pvtUiCell\").hide() unless opts.showUI\n\n            initialRender = true\n\n            #set up for refreshing\n            refreshDelayed = =>\n                subopts =\n                    derivedAttributes: opts.derivedAttributes\n                    localeStrings: opts.localeStrings\n                    rendererOptions: opts.rendererOptions\n                    sorters: opts.sorters\n                    cols: [], rows: []\n                    dataClass: opts.dataClass\n\n                numInputsToProcess = opts.aggregators[aggregator.val()]([])().numInputs ? 0\n                vals = []\n                @find(\".pvtRows li span.pvtAttr\").each -> subopts.rows.push $(this).data(\"attrName\")\n                @find(\".pvtCols li span.pvtAttr\").each -> subopts.cols.push $(this).data(\"attrName\")\n                @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                    if numInputsToProcess == 0\n                        $(this).remove()\n                    else\n                        numInputsToProcess--\n                        vals.push $(this).val() if $(this).val() != \"\"\n\n                if numInputsToProcess != 0\n                    pvtVals = @find(\".pvtVals\")\n                    for x in [0...numInputsToProcess]\n                        newDropdown = $(\"<select>\")\n                            .addClass('pvtAttrDropdown')\n                            .append($(\"<option>\"))\n                            .bind \"change\", -> refresh()\n                        for attr in shownInAggregators\n                            newDropdown.append($(\"<option>\").val(attr).text(attr))\n                        pvtVals.append(newDropdown)\n\n                if initialRender\n                    vals = opts.vals\n                    i = 0\n                    @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                        $(this).val vals[i]\n                        i++\n                    initialRender = false\n\n                subopts.aggregatorName = aggregator.val()\n                subopts.vals = vals\n                subopts.aggregator = opts.aggregators[aggregator.val()](vals)\n                subopts.renderer = opts.renderers[renderer.val()]\n                subopts.rowOrder = rowOrderArrow.data(\"order\")\n                subopts.colOrder = colOrderArrow.data(\"order\")\n                #construct filter here\n                exclusions = {}\n                @find('input.pvtFilter').not(':checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        exclusions[filter[0]].push( filter[1] )\n                    else\n                        exclusions[filter[0]] = [ filter[1] ]\n                #include inclusions when exclusions present\n                inclusions = {}\n                @find('input.pvtFilter:checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        if inclusions[filter[0]]?\n                            inclusions[filter[0]].push( filter[1] )\n                        else\n                            inclusions[filter[0]] = [ filter[1] ]\n\n                subopts.filter = (record) ->\n                    return false if not opts.filter(record)\n                    for k,excludedItems of exclusions\n                        return false if \"\"+(record[k] ? 'null') in excludedItems\n                    return true\n\n                pivotTable.pivot(materializedInput,subopts)\n                pivotUIOptions = $.extend {}, opts,\n                    cols: subopts.cols\n                    rows: subopts.rows\n                    colOrder: subopts.colOrder\n                    rowOrder: subopts.rowOrder\n                    vals: vals\n                    exclusions: exclusions\n                    inclusions: inclusions\n                    inclusionsInfo: inclusions #duplicated for backwards-compatibility\n                    aggregatorName: aggregator.val()\n                    rendererName: renderer.val()\n\n                @data \"pivotUIOptions\", pivotUIOptions\n\n                # if requested make sure unused columns are in alphabetical order\n                if opts.autoSortUnusedAttrs\n                    unusedAttrsContainer = @find(\"td.pvtUnused.pvtAxisContainer\")\n                    $(unusedAttrsContainer).children(\"li\")\n                        .sort((a, b) => naturalSort($(a).text(), $(b).text()))\n                        .appendTo unusedAttrsContainer\n\n                pivotTable.css(\"opacity\", 1)\n                opts.onRefresh(pivotUIOptions) if opts.onRefresh?\n\n            refresh = =>\n                pivotTable.css(\"opacity\", 0.5)\n                setTimeout refreshDelayed, 10\n\n            #the very first refresh will actually display the table\n            refresh()\n\n            @find(\".pvtAxisContainer\").sortable\n                    update: (e, ui) -> refresh() if not ui.sender?\n                    connectWith: @find(\".pvtAxisContainer\")\n                    items: 'li'\n                    placeholder: 'pvtPlaceholder'\n        catch e\n            console.error(e.stack) if console?\n            @html opts.localeStrings.uiRenderError\n        return this\n\n    ###\n    Heatmap post-processing\n    ###\n\n    $.fn.heatmap = (scope = \"heatmap\", opts) ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        # given a series of values\n        # must return a function to map a given value to a CSS color\n        colorScaleGenerator = opts?.heatmap?.colorScaleGenerator\n        colorScaleGenerator ?= (values) ->\n            min = Math.min(values...)\n            max = Math.max(values...)\n            return (x) ->\n                nonRed = 255 - Math.round 255*(x-min)/(max-min)\n                return \"rgb(255,#{nonRed},#{nonRed})\"\n\n        heatmapper = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            colorScale = colorScaleGenerator(values)\n            forEachCell (x, elem) -> elem.css \"background-color\", colorScale(x)\n\n        switch scope\n            when \"heatmap\"    then heatmapper \".pvtVal\"\n            when \"rowheatmap\" then heatmapper \".pvtVal.row#{i}\" for i in [0...numRows]\n            when \"colheatmap\" then heatmapper \".pvtVal.col#{j}\" for j in [0...numCols]\n\n        heatmapper \".pvtTotal.rowTotal\"\n        heatmapper \".pvtTotal.colTotal\"\n\n        return this\n\n    ###\n    Barchart post-processing\n    ###\n\n    $.fn.barchart = (opts) ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        barcharter = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            max = Math.max(values...)\n            if max < 0\n                max = 0\n            range = max;\n            min = Math.min(values...)\n            if min < 0\n                range = max - min\n            scaler = (x) -> 100*x/(1.4*range)\n            forEachCell (x, elem) ->\n                text = elem.text()\n                wrapper = $(\"<div>\").css\n                    \"position\": \"relative\"\n                    \"height\": \"55px\"\n                bgColor = \"gray\"\n                bBase = 0\n                if min < 0\n                    bBase = scaler(-min)\n                if x < 0\n                    bBase += scaler(x)\n                    bgColor = \"darkred\"\n                    x = -x\n                wrapper.append $(\"<div>\").css\n                    \"position\": \"absolute\"\n                    \"bottom\": bBase + \"%\"\n                    \"left\": 0\n                    \"right\": 0\n                    \"height\": scaler(x) + \"%\"\n                    \"background-color\": bgColor\n                wrapper.append $(\"<div>\").text(text).css\n                    \"position\":\"relative\"\n                    \"padding-left\":\"5px\"\n                    \"padding-right\":\"5px\"\n\n                elem.css(\"padding\": 0,\"padding-top\": \"5px\", \"text-align\": \"center\").html wrapper\n\n        barcharter \".pvtVal.row#{i}\" for i in [0...numRows]\n        barcharter \".pvtTotal.colTotal\"\n\n        return this\n","(function() {\n  var callWithJQuery,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n    slice = [].slice,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    hasProp = {}.hasOwnProperty;\n\n  callWithJQuery = function(pivotModule) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return pivotModule(require(\"jquery\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\"], pivotModule);\n    } else {\n      return pivotModule(jQuery);\n    }\n  };\n\n  callWithJQuery(function($) {\n\n    /*\n    Utilities\n     */\n    var PivotData, addSeparators, aggregatorTemplates, aggregators, dayNamesEn, derivers, getSort, locales, mthNamesEn, naturalSort, numberFormat, pivotTableRenderer, rd, renderers, rx, rz, sortAs, usFmt, usFmtInt, usFmtPct, zeroPad;\n    addSeparators = function(nStr, thousandsSep, decimalSep) {\n      var rgx, x, x1, x2;\n      nStr += '';\n      x = nStr.split('.');\n      x1 = x[0];\n      x2 = x.length > 1 ? decimalSep + x[1] : '';\n      rgx = /(\\d+)(\\d{3})/;\n      while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2');\n      }\n      return x1 + x2;\n    };\n    numberFormat = function(opts) {\n      var defaults;\n      defaults = {\n        digitsAfterDecimal: 2,\n        scaler: 1,\n        thousandsSep: \",\",\n        decimalSep: \".\",\n        prefix: \"\",\n        suffix: \"\"\n      };\n      opts = $.extend({}, defaults, opts);\n      return function(x) {\n        var result;\n        if (isNaN(x) || !isFinite(x)) {\n          return \"\";\n        }\n        result = addSeparators((opts.scaler * x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep);\n        return \"\" + opts.prefix + result + opts.suffix;\n      };\n    };\n    usFmt = numberFormat();\n    usFmtInt = numberFormat({\n      digitsAfterDecimal: 0\n    });\n    usFmtPct = numberFormat({\n      digitsAfterDecimal: 1,\n      scaler: 100,\n      suffix: \"%\"\n    });\n    aggregatorTemplates = {\n      count: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function() {\n          return function(data, rowKey, colKey) {\n            return {\n              count: 0,\n              push: function() {\n                return this.count++;\n              },\n              value: function() {\n                return this.count;\n              },\n              format: formatter\n            };\n          };\n        };\n      },\n      uniques: function(fn, formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return fn(this.uniq);\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  return this.sum += parseFloat(record[attr]);\n                }\n              },\n              value: function() {\n                return this.sum;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      extremes: function(mode, formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              sorter: getSort(data != null ? data.sorters : void 0, attr),\n              push: function(record) {\n                var ref, ref1, ref2, x;\n                x = record[attr];\n                if (mode === \"min\" || mode === \"max\") {\n                  x = parseFloat(x);\n                  if (!isNaN(x)) {\n                    this.val = Math[mode](x, (ref = this.val) != null ? ref : x);\n                  }\n                }\n                if (mode === \"first\") {\n                  if (this.sorter(x, (ref1 = this.val) != null ? ref1 : x) <= 0) {\n                    this.val = x;\n                  }\n                }\n                if (mode === \"last\") {\n                  if (this.sorter(x, (ref2 = this.val) != null ? ref2 : x) >= 0) {\n                    return this.val = x;\n                  }\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: function(x) {\n                if (isNaN(x)) {\n                  return x;\n                } else {\n                  return formatter(x);\n                }\n              },\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      quantile: function(q, formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              vals: [],\n              push: function(record) {\n                var x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.vals.push(x);\n                }\n              },\n              value: function() {\n                var i;\n                if (this.vals.length === 0) {\n                  return null;\n                }\n                this.vals.sort(function(a, b) {\n                  return a - b;\n                });\n                i = (this.vals.length - 1) * q;\n                return (this.vals[Math.floor(i)] + this.vals[Math.ceil(i)]) / 2.0;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      runningStat: function(mode, ddof, formatter) {\n        if (mode == null) {\n          mode = \"mean\";\n        }\n        if (ddof == null) {\n          ddof = 1;\n        }\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              n: 0.0,\n              m: 0.0,\n              s: 0.0,\n              push: function(record) {\n                var m_new, x;\n                x = parseFloat(record[attr]);\n                if (isNaN(x)) {\n                  return;\n                }\n                this.n += 1.0;\n                if (this.n === 1.0) {\n                  return this.m = x;\n                } else {\n                  m_new = this.m + (x - this.m) / this.n;\n                  this.s = this.s + (x - this.m) * (x - m_new);\n                  return this.m = m_new;\n                }\n              },\n              value: function() {\n                if (mode === \"mean\") {\n                  if (this.n === 0) {\n                    return 0 / 0;\n                  } else {\n                    return this.m;\n                  }\n                }\n                if (this.n <= ddof) {\n                  return 0;\n                }\n                switch (mode) {\n                  case \"var\":\n                    return this.s / (this.n - ddof);\n                  case \"stdev\":\n                    return Math.sqrt(this.s / (this.n - ddof));\n                }\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sumOverSum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                return this.sumNum / this.sumDenom;\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      sumOverSumBound80: function(upper, formatter) {\n        if (upper == null) {\n          upper = true;\n        }\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                var sign;\n                sign = upper ? 1 : -1;\n                return (0.821187207574908 / this.sumDenom + this.sumNum / this.sumDenom + 1.2815515655446004 * sign * Math.sqrt(0.410593603787454 / (this.sumDenom * this.sumDenom) + (this.sumNum * (1 - this.sumNum / this.sumDenom)) / (this.sumDenom * this.sumDenom))) / (1 + 1.642374415149816 / this.sumDenom);\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      fractionOf: function(wrapped, type, formatter) {\n        if (type == null) {\n          type = \"total\";\n        }\n        if (formatter == null) {\n          formatter = usFmtPct;\n        }\n        return function() {\n          var x;\n          x = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return function(data, rowKey, colKey) {\n            return {\n              selector: {\n                total: [[], []],\n                row: [rowKey, []],\n                col: [[], colKey]\n              }[type],\n              inner: wrapped.apply(null, x)(data, rowKey, colKey),\n              push: function(record) {\n                return this.inner.push(record);\n              },\n              format: formatter,\n              value: function() {\n                return this.inner.value() / data.getAggregator.apply(data, this.selector).inner.value();\n              },\n              numInputs: wrapped.apply(null, x)().numInputs\n            };\n          };\n        };\n      }\n    };\n    aggregatorTemplates.countUnique = function(f) {\n      return aggregatorTemplates.uniques((function(x) {\n        return x.length;\n      }), f);\n    };\n    aggregatorTemplates.listUnique = function(s) {\n      return aggregatorTemplates.uniques((function(x) {\n        return x.sort(naturalSort).join(s);\n      }), (function(x) {\n        return x;\n      }));\n    };\n    aggregatorTemplates.max = function(f) {\n      return aggregatorTemplates.extremes('max', f);\n    };\n    aggregatorTemplates.min = function(f) {\n      return aggregatorTemplates.extremes('min', f);\n    };\n    aggregatorTemplates.first = function(f) {\n      return aggregatorTemplates.extremes('first', f);\n    };\n    aggregatorTemplates.last = function(f) {\n      return aggregatorTemplates.extremes('last', f);\n    };\n    aggregatorTemplates.median = function(f) {\n      return aggregatorTemplates.quantile(0.5, f);\n    };\n    aggregatorTemplates.average = function(f) {\n      return aggregatorTemplates.runningStat(\"mean\", 1, f);\n    };\n    aggregatorTemplates[\"var\"] = function(ddof, f) {\n      return aggregatorTemplates.runningStat(\"var\", ddof, f);\n    };\n    aggregatorTemplates.stdev = function(ddof, f) {\n      return aggregatorTemplates.runningStat(\"stdev\", ddof, f);\n    };\n    aggregators = (function(tpl) {\n      return {\n        \"Count\": tpl.count(usFmtInt),\n        \"Count Unique Values\": tpl.countUnique(usFmtInt),\n        \"List Unique Values\": tpl.listUnique(\", \"),\n        \"Sum\": tpl.sum(usFmt),\n        \"Integer Sum\": tpl.sum(usFmtInt),\n        \"Average\": tpl.average(usFmt),\n        \"Median\": tpl.median(usFmt),\n        \"Sample Variance\": tpl[\"var\"](1, usFmt),\n        \"Sample Standard Deviation\": tpl.stdev(1, usFmt),\n        \"Minimum\": tpl.min(usFmt),\n        \"Maximum\": tpl.max(usFmt),\n        \"First\": tpl.first(usFmt),\n        \"Last\": tpl.last(usFmt),\n        \"Sum over Sum\": tpl.sumOverSum(usFmt),\n        \"80% Upper Bound\": tpl.sumOverSumBound80(true, usFmt),\n        \"80% Lower Bound\": tpl.sumOverSumBound80(false, usFmt),\n        \"Sum as Fraction of Total\": tpl.fractionOf(tpl.sum(), \"total\", usFmtPct),\n        \"Sum as Fraction of Rows\": tpl.fractionOf(tpl.sum(), \"row\", usFmtPct),\n        \"Sum as Fraction of Columns\": tpl.fractionOf(tpl.sum(), \"col\", usFmtPct),\n        \"Count as Fraction of Total\": tpl.fractionOf(tpl.count(), \"total\", usFmtPct),\n        \"Count as Fraction of Rows\": tpl.fractionOf(tpl.count(), \"row\", usFmtPct),\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\", usFmtPct)\n      };\n    })(aggregatorTemplates);\n    renderers = {\n      \"Table\": function(data, opts) {\n        return pivotTableRenderer(data, opts);\n      },\n      \"Table Barchart\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).barchart();\n      },\n      \"Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\", opts);\n      },\n      \"Row Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts);\n      },\n      \"Col Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts);\n      }\n    };\n    locales = {\n      en: {\n        aggregators: aggregators,\n        renderers: renderers,\n        localeStrings: {\n          renderError: \"An error occurred rendering the PivotTable results.\",\n          computeError: \"An error occurred computing the PivotTable results.\",\n          uiRenderError: \"An error occurred rendering the PivotTable UI.\",\n          selectAll: \"Select All\",\n          selectNone: \"Select None\",\n          tooMany: \"(too many to list)\",\n          filterResults: \"Filter values\",\n          apply: \"Apply\",\n          cancel: \"Cancel\",\n          totals: \"Totals\",\n          vs: \"vs\",\n          by: \"by\"\n        }\n      }\n    };\n    mthNamesEn = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    dayNamesEn = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    zeroPad = function(number) {\n      return (\"0\" + number).substr(-2, 2);\n    };\n    derivers = {\n      bin: function(col, binWidth) {\n        return function(record) {\n          return record[col] - record[col] % binWidth;\n        };\n      },\n      dateFormat: function(col, formatString, utcOutput, mthNames, dayNames) {\n        var utc;\n        if (utcOutput == null) {\n          utcOutput = false;\n        }\n        if (mthNames == null) {\n          mthNames = mthNamesEn;\n        }\n        if (dayNames == null) {\n          dayNames = dayNamesEn;\n        }\n        utc = utcOutput ? \"UTC\" : \"\";\n        return function(record) {\n          var date;\n          date = new Date(Date.parse(record[col]));\n          if (isNaN(date)) {\n            return \"\";\n          }\n          return formatString.replace(/%(.)/g, function(m, p) {\n            switch (p) {\n              case \"y\":\n                return date[\"get\" + utc + \"FullYear\"]();\n              case \"m\":\n                return zeroPad(date[\"get\" + utc + \"Month\"]() + 1);\n              case \"n\":\n                return mthNames[date[\"get\" + utc + \"Month\"]()];\n              case \"d\":\n                return zeroPad(date[\"get\" + utc + \"Date\"]());\n              case \"w\":\n                return dayNames[date[\"get\" + utc + \"Day\"]()];\n              case \"x\":\n                return date[\"get\" + utc + \"Day\"]();\n              case \"H\":\n                return zeroPad(date[\"get\" + utc + \"Hours\"]());\n              case \"M\":\n                return zeroPad(date[\"get\" + utc + \"Minutes\"]());\n              case \"S\":\n                return zeroPad(date[\"get\" + utc + \"Seconds\"]());\n              default:\n                return \"%\" + p;\n            }\n          });\n        };\n      }\n    };\n    rx = /(\\d+)|(\\D+)/g;\n    rd = /\\d/;\n    rz = /^0/;\n    naturalSort = (function(_this) {\n      return function(as, bs, nulls_first) {\n        var a, a1, b, b1, nas, nbs, nf;\n        if (nulls_first == null) {\n          nulls_first = true;\n        }\n        nf = nulls_first ? 1 : -1;\n        if ((bs != null) && (as == null)) {\n          return -1 * nf;\n        }\n        if ((as != null) && (bs == null)) {\n          return 1 * nf;\n        }\n        if (typeof as === \"number\" && isNaN(as)) {\n          return -1;\n        }\n        if (typeof bs === \"number\" && isNaN(bs)) {\n          return 1;\n        }\n        nas = +as;\n        nbs = +bs;\n        if (nas < nbs) {\n          return -1;\n        }\n        if (nas > nbs) {\n          return 1;\n        }\n        if (typeof as === \"number\" && typeof bs !== \"number\") {\n          return -1;\n        }\n        if (typeof bs === \"number\" && typeof as !== \"number\") {\n          return 1;\n        }\n        if (typeof as === \"number\" && typeof bs === \"number\") {\n          return 0;\n        }\n        if (isNaN(nbs) && !isNaN(nas)) {\n          return -1;\n        }\n        if (isNaN(nas) && !isNaN(nbs)) {\n          return 1;\n        }\n        a = String(as);\n        b = String(bs);\n        if (a === b) {\n          return 0;\n        }\n        if (!(rd.test(a) && rd.test(b))) {\n          return (a > b ? 1 : -1);\n        }\n        a = a.match(rx);\n        b = b.match(rx);\n        while (a.length && b.length) {\n          a1 = a.shift();\n          b1 = b.shift();\n          if (a1 !== b1) {\n            if (rd.test(a1) && rd.test(b1)) {\n              return a1.replace(rz, \".0\") - b1.replace(rz, \".0\");\n            } else {\n              return (a1 > b1 ? 1 : -1);\n            }\n          }\n        }\n        return a.length - b.length;\n      };\n    })(this);\n    sortAs = function(order) {\n      var i, l_mapping, mapping, x;\n      mapping = {};\n      l_mapping = {};\n      for (i in order) {\n        x = order[i];\n        mapping[x] = i;\n        if (typeof x === \"string\") {\n          l_mapping[x.toLowerCase()] = i;\n        }\n      }\n      return function(a, b) {\n        if ((mapping[a] != null) && (mapping[b] != null)) {\n          return mapping[a] - mapping[b];\n        } else if (mapping[a] != null) {\n          return -1;\n        } else if (mapping[b] != null) {\n          return 1;\n        } else if ((l_mapping[a] != null) && (l_mapping[b] != null)) {\n          return l_mapping[a] - l_mapping[b];\n        } else if (l_mapping[a] != null) {\n          return -1;\n        } else if (l_mapping[b] != null) {\n          return 1;\n        } else {\n          return naturalSort(a, b);\n        }\n      };\n    };\n    getSort = function(sorters, attr) {\n      var sort;\n      if (sorters != null) {\n        if ($.isFunction(sorters)) {\n          sort = sorters(attr);\n          if ($.isFunction(sort)) {\n            return sort;\n          }\n        } else if (sorters[attr] != null) {\n          return sorters[attr];\n        }\n      }\n      return naturalSort;\n    };\n\n    /*\n    Data Model class\n     */\n    PivotData = (function() {\n      function PivotData(input, opts) {\n        var ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;\n        if (opts == null) {\n          opts = {};\n        }\n        this.getAggregator = bind(this.getAggregator, this);\n        this.getRowKeys = bind(this.getRowKeys, this);\n        this.getColKeys = bind(this.getColKeys, this);\n        this.sortKeys = bind(this.sortKeys, this);\n        this.arrSort = bind(this.arrSort, this);\n        this.input = input;\n        this.aggregator = (ref = opts.aggregator) != null ? ref : aggregatorTemplates.count()();\n        this.aggregatorName = (ref1 = opts.aggregatorName) != null ? ref1 : \"Count\";\n        this.colAttrs = (ref2 = opts.cols) != null ? ref2 : [];\n        this.rowAttrs = (ref3 = opts.rows) != null ? ref3 : [];\n        this.valAttrs = (ref4 = opts.vals) != null ? ref4 : [];\n        this.sorters = (ref5 = opts.sorters) != null ? ref5 : {};\n        this.rowOrder = (ref6 = opts.rowOrder) != null ? ref6 : \"key_a_to_z\";\n        this.colOrder = (ref7 = opts.colOrder) != null ? ref7 : \"key_a_to_z\";\n        this.derivedAttributes = (ref8 = opts.derivedAttributes) != null ? ref8 : {};\n        this.filter = (ref9 = opts.filter) != null ? ref9 : (function() {\n          return true;\n        });\n        this.tree = {};\n        this.rowKeys = [];\n        this.colKeys = [];\n        this.rowTotals = {};\n        this.colTotals = {};\n        this.allTotal = this.aggregator(this, [], []);\n        this.sorted = false;\n        PivotData.forEachRecord(this.input, this.derivedAttributes, (function(_this) {\n          return function(record) {\n            if (_this.filter(record)) {\n              return _this.processRecord(record);\n            }\n          };\n        })(this));\n      }\n\n      PivotData.forEachRecord = function(input, derivedAttributes, f) {\n        var addRecord, compactRecord, i, j, k, len1, n, record, ref, results, results1, tblCols;\n        if ($.isEmptyObject(derivedAttributes)) {\n          addRecord = f;\n        } else {\n          addRecord = function(record) {\n            var k, ref, v;\n            for (k in derivedAttributes) {\n              v = derivedAttributes[k];\n              record[k] = (ref = v(record)) != null ? ref : record[k];\n            }\n            return f(record);\n          };\n        }\n        if ($.isFunction(input)) {\n          return input(addRecord);\n        } else if ($.isArray(input)) {\n          if ($.isArray(input[0])) {\n            results = [];\n            for (i in input) {\n              if (!hasProp.call(input, i)) continue;\n              compactRecord = input[i];\n              if (!(i > 0)) {\n                continue;\n              }\n              record = {};\n              ref = input[0];\n              for (j in ref) {\n                if (!hasProp.call(ref, j)) continue;\n                k = ref[j];\n                record[k] = compactRecord[j];\n              }\n              results.push(addRecord(record));\n            }\n            return results;\n          } else {\n            results1 = [];\n            for (n = 0, len1 = input.length; n < len1; n++) {\n              record = input[n];\n              results1.push(addRecord(record));\n            }\n            return results1;\n          }\n        } else if (input instanceof $) {\n          tblCols = [];\n          $(\"thead > tr > th\", input).each(function(i) {\n            return tblCols.push($(this).text());\n          });\n          return $(\"tbody > tr\", input).each(function(i) {\n            record = {};\n            $(\"td\", this).each(function(j) {\n              return record[tblCols[j]] = $(this).text();\n            });\n            return addRecord(record);\n          });\n        } else {\n          throw new Error(\"unknown input format\");\n        }\n      };\n\n      PivotData.prototype.forEachMatchingRecord = function(criteria, callback) {\n        return PivotData.forEachRecord(this.input, this.derivedAttributes, (function(_this) {\n          return function(record) {\n            var k, ref, v;\n            if (!_this.filter(record)) {\n              return;\n            }\n            for (k in criteria) {\n              v = criteria[k];\n              if (v !== ((ref = record[k]) != null ? ref : \"null\")) {\n                return;\n              }\n            }\n            return callback(record);\n          };\n        })(this));\n      };\n\n      PivotData.prototype.arrSort = function(attrs, nulls_first) {\n        var a, sortersArr;\n        sortersArr = (function() {\n          var len1, n, results;\n          results = [];\n          for (n = 0, len1 = attrs.length; n < len1; n++) {\n            a = attrs[n];\n            results.push(getSort(this.sorters, a));\n          }\n          return results;\n        }).call(this);\n        return function(a, b) {\n          var comparison, i, sorter;\n          for (i in sortersArr) {\n            if (!hasProp.call(sortersArr, i)) continue;\n            sorter = sortersArr[i];\n            comparison = sorter(a[i], b[i], nulls_first);\n            if (comparison !== 0) {\n              return comparison;\n            }\n          }\n          return 0;\n        };\n      };\n\n      PivotData.prototype.sortKeys = function() {\n        var v;\n        if (!this.sorted) {\n          this.sorted = true;\n          v = (function(_this) {\n            return function(r, c) {\n              return _this.getAggregator(r, c).value();\n            };\n          })(this);\n          switch (this.rowOrder) {\n            case \"value_a_to_z\":\n              this.rowKeys.sort((function(_this) {\n                return function(a, b) {\n                  return naturalSort(v(a, []), v(b, []));\n                };\n              })(this));\n              break;\n            case \"value_z_to_a\":\n              this.rowKeys.sort((function(_this) {\n                return function(a, b) {\n                  return -naturalSort(v(a, []), v(b, []));\n                };\n              })(this));\n              break;\n            default:\n              this.rowKeys.sort(this.arrSort(this.rowAttrs, true));\n          }\n          switch (this.colOrder) {\n            case \"value_a_to_z\":\n              return this.colKeys.sort((function(_this) {\n                return function(a, b) {\n                  return naturalSort(v([], a), v([], b));\n                };\n              })(this));\n            case \"value_z_to_a\":\n              return this.colKeys.sort((function(_this) {\n                return function(a, b) {\n                  return -naturalSort(v([], a), v([], b));\n                };\n              })(this));\n            default:\n              return this.colKeys.sort(this.arrSort(this.colAttrs, false));\n          }\n        }\n      };\n\n      PivotData.prototype.getColKeys = function(all_keys) {\n        var l;\n        if (all_keys == null) {\n          all_keys = false;\n        }\n        this.sortKeys();\n        l = this.colAttrs.length;\n        if (all_keys) {\n          return this.colKeys;\n        } else {\n          return this.colKeys.filter(function(x) {\n            return x.length === l;\n          });\n        }\n      };\n\n      PivotData.prototype.getRowKeys = function(all_keys) {\n        var l;\n        if (all_keys == null) {\n          all_keys = false;\n        }\n        this.sortKeys();\n        l = this.rowAttrs.length;\n        if (all_keys) {\n          return this.rowKeys;\n        } else {\n          return this.rowKeys.filter(function(x) {\n            return x.length === l;\n          });\n        }\n      };\n\n      PivotData.prototype.subarrays = function(x) {\n        return [[]].concat(x.map((function(_this) {\n          return function(d, i) {\n            return x.slice(0, i + 1);\n          };\n        })(this)));\n      };\n\n      PivotData.prototype.processRecord = function(record) {\n        var colKey, colKeys, flatColKey, flatRowKey, len1, len2, len3, n, o, ref, ref1, ref2, ref3, ref4, results, rowKey, rowKeys, t, x;\n        window.pivotData = this;\n        colKeys = [];\n        rowKeys = [];\n        ref = this.colAttrs;\n        for (n = 0, len1 = ref.length; n < len1; n++) {\n          x = ref[n];\n          colKeys.push((ref1 = record[x]) != null ? ref1 : \"null\");\n        }\n        ref2 = this.rowAttrs;\n        for (o = 0, len2 = ref2.length; o < len2; o++) {\n          x = ref2[o];\n          rowKeys.push((ref3 = record[x]) != null ? ref3 : \"null\");\n        }\n        this.allTotal.push(record);\n        ref4 = this.subarrays(colKeys);\n        results = [];\n        for (t = 0, len3 = ref4.length; t < len3; t++) {\n          colKey = ref4[t];\n          results.push((function() {\n            var len4, ref5, results1, u;\n            ref5 = this.subarrays(rowKeys);\n            results1 = [];\n            for (u = 0, len4 = ref5.length; u < len4; u++) {\n              rowKey = ref5[u];\n              flatRowKey = rowKey.join(String.fromCharCode(0));\n              flatColKey = colKey.join(String.fromCharCode(0));\n              if (rowKey.length !== 0) {\n                if (!this.rowTotals[flatRowKey]) {\n                  this.rowKeys.push(rowKey);\n                }\n                if (!this.rowTotals[flatRowKey + flatColKey]) {\n                  this.rowTotals[flatRowKey + flatColKey] = this.aggregator(this, rowKey, []);\n                }\n                this.rowTotals[flatRowKey + flatColKey].push(record);\n              }\n              if (colKey.length !== 0) {\n                if (!this.colTotals[flatColKey]) {\n                  this.colKeys.push(colKey);\n                }\n                if (!this.colTotals[flatColKey + flatRowKey]) {\n                  this.colTotals[flatColKey + flatRowKey] = this.aggregator(this, [], colKey);\n                }\n                this.colTotals[flatColKey + flatRowKey].push(record);\n              }\n              if (colKey.length !== 0 && rowKey.length !== 0) {\n                if (!this.tree[flatRowKey]) {\n                  this.tree[flatRowKey] = {};\n                }\n                if (!this.tree[flatRowKey][flatColKey]) {\n                  this.tree[flatRowKey][flatColKey] = this.aggregator(this, rowKey, colKey);\n                }\n                results1.push(this.tree[flatRowKey][flatColKey].push(record));\n              } else {\n                results1.push(void 0);\n              }\n            }\n            return results1;\n          }).call(this));\n        }\n        return results;\n      };\n\n      PivotData.prototype.getAggregator = function(rowKey, colKey) {\n        var agg, flatColKey, flatRowKey;\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        if (rowKey.length === 0 && colKey.length === 0) {\n          agg = this.allTotal;\n        } else if (rowKey.length === 0) {\n          agg = this.colTotals[flatColKey];\n        } else if (colKey.length === 0) {\n          agg = this.rowTotals[flatRowKey];\n        } else {\n          agg = this.tree[flatRowKey][flatColKey];\n        }\n        return agg != null ? agg : {\n          value: (function() {\n            return null;\n          }),\n          format: function() {\n            return \"\";\n          }\n        };\n      };\n\n      return PivotData;\n\n    })();\n    $.pivotUtilities = {\n      aggregatorTemplates: aggregatorTemplates,\n      aggregators: aggregators,\n      renderers: renderers,\n      derivers: derivers,\n      locales: locales,\n      naturalSort: naturalSort,\n      numberFormat: numberFormat,\n      sortAs: sortAs,\n      PivotData: PivotData\n    };\n\n    /*\n    Default Renderer for hierarchical table layout\n     */\n    pivotTableRenderer = function(pivotData, opts) {\n      var aggregator, c, colAttrs, colKey, colKeys, defaults, getClickHandler, i, j, r, result, rowAttrs, rowKey, rowKeys, spanSize, tbody, td, th, thead, totalAggregator, tr, txt, val, x;\n      defaults = {\n        table: {\n          clickCallback: null,\n          rowTotals: true,\n          colTotals: true\n        },\n        localeStrings: {\n          totals: \"Totals\"\n        }\n      };\n      opts = $.extend(true, {}, defaults, opts);\n      colAttrs = pivotData.colAttrs;\n      rowAttrs = pivotData.rowAttrs;\n      rowKeys = pivotData.getRowKeys(true);\n      colKeys = pivotData.getColKeys(true);\n      if (opts.table.clickCallback) {\n        getClickHandler = function(value, rowValues, colValues) {\n          var attr, filters, i;\n          filters = {};\n          for (i in colAttrs) {\n            if (!hasProp.call(colAttrs, i)) continue;\n            attr = colAttrs[i];\n            if (colValues[i] != null) {\n              filters[attr] = colValues[i];\n            }\n          }\n          for (i in rowAttrs) {\n            if (!hasProp.call(rowAttrs, i)) continue;\n            attr = rowAttrs[i];\n            if (rowValues[i] != null) {\n              filters[attr] = rowValues[i];\n            }\n          }\n          return function(e) {\n            return opts.table.clickCallback(e, value, filters, pivotData);\n          };\n        };\n      }\n      result = document.createElement(\"table\");\n      result.className = \"pvtTable\";\n      spanSize = function(arr, i, j) {\n        var len, n, noDraw, o, ref, ref1, stop, x;\n        if (i !== 0) {\n          noDraw = true;\n          for (x = n = 0, ref = j; 0 <= ref ? n <= ref : n >= ref; x = 0 <= ref ? ++n : --n) {\n            if (arr[i - 1][x] !== arr[i][x]) {\n              noDraw = false;\n            }\n          }\n          if (noDraw) {\n            return -1;\n          }\n        }\n        len = 0;\n        while (i + len < arr.length) {\n          stop = false;\n          for (x = o = 0, ref1 = j; 0 <= ref1 ? o <= ref1 : o >= ref1; x = 0 <= ref1 ? ++o : --o) {\n            if (arr[i][x] !== arr[i + len][x]) {\n              stop = true;\n            }\n          }\n          if (stop) {\n            break;\n          }\n          len++;\n        }\n        return len;\n      };\n      thead = document.createElement(\"thead\");\n      for (j in colAttrs) {\n        if (!hasProp.call(colAttrs, j)) continue;\n        c = colAttrs[j];\n        tr = document.createElement(\"tr\");\n        if (parseInt(j) === 0 && rowAttrs.length !== 0) {\n          th = document.createElement(\"th\");\n          th.setAttribute(\"colspan\", rowAttrs.length);\n          th.setAttribute(\"rowspan\", colAttrs.length);\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        th.className = \"pvtAxisLabel\";\n        th.textContent = c;\n        tr.appendChild(th);\n        for (i in colKeys) {\n          if (!hasProp.call(colKeys, i)) continue;\n          colKey = colKeys[i];\n          x = spanSize(colKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtColLabel\";\n            th.textContent = colKey[j];\n            th.setAttribute(\"colspan\", x);\n            if (parseInt(j) === colAttrs.length - 1 && rowAttrs.length !== 0) {\n              th.setAttribute(\"rowspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        if (parseInt(j) === 0 && opts.table.rowTotals) {\n          th = document.createElement(\"th\");\n          th.className = \"pvtTotalLabel pvtRowTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          th.setAttribute(\"rowspan\", colAttrs.length + (rowAttrs.length === 0 ? 0 : 1));\n          tr.appendChild(th);\n        }\n        thead.appendChild(tr);\n      }\n      if (rowAttrs.length !== 0) {\n        tr = document.createElement(\"tr\");\n        for (i in rowAttrs) {\n          if (!hasProp.call(rowAttrs, i)) continue;\n          r = rowAttrs[i];\n          th = document.createElement(\"th\");\n          th.className = \"pvtAxisLabel\";\n          th.textContent = r;\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        if (colAttrs.length === 0) {\n          th.className = \"pvtTotalLabel pvtRowTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n        }\n        tr.appendChild(th);\n        thead.appendChild(tr);\n      }\n      result.appendChild(thead);\n      tbody = document.createElement(\"tbody\");\n      for (i in rowKeys) {\n        if (!hasProp.call(rowKeys, i)) continue;\n        rowKey = rowKeys[i];\n        tr = document.createElement(\"tr\");\n        tr.className = rowKey.length !== rowAttrs.length ? \"pvtSubtotal level\" + rowKey.length : \"pvtData\";\n        j = rowKey.length - 1;\n        txt = rowKey[j];\n        th = document.createElement(\"th\");\n        th.className = \"pvtRowLabel\";\n        th.textContent = txt;\n        th.setAttribute('colspan', rowAttrs.length + (colAttrs.length !== 0 ? 1 : 0));\n        th.style.paddingLeft = 5 + parseInt(j) * 30 + 'px';\n        tr.appendChild(th);\n        for (j in colKeys) {\n          if (!hasProp.call(colKeys, j)) continue;\n          colKey = colKeys[j];\n          aggregator = pivotData.getAggregator(rowKey, colKey);\n          val = aggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtVal row\" + i + \" col\" + j;\n          if (colKey.length !== colAttrs.length) {\n            td.className += \" pvtSubtotal level\" + colKey.length;\n          }\n          td.textContent = aggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, rowKey, colKey);\n          }\n          tr.appendChild(td);\n        }\n        if (opts.table.rowTotals || colAttrs.length === 0) {\n          totalAggregator = pivotData.getAggregator(rowKey, []);\n          val = totalAggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtTotal rowTotal\";\n          td.textContent = totalAggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, rowKey, []);\n          }\n          td.setAttribute(\"data-for\", \"row\" + i);\n          tr.appendChild(td);\n        }\n        tbody.appendChild(tr);\n      }\n      if (opts.table.colTotals || rowAttrs.length === 0) {\n        tr = document.createElement(\"tr\");\n        if (opts.table.colTotals || rowAttrs.length === 0) {\n          th = document.createElement(\"th\");\n          th.className = \"pvtTotalLabel pvtColTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          th.setAttribute(\"colspan\", rowAttrs.length + (colAttrs.length === 0 ? 0 : 1));\n          tr.appendChild(th);\n        }\n        for (j in colKeys) {\n          if (!hasProp.call(colKeys, j)) continue;\n          colKey = colKeys[j];\n          totalAggregator = pivotData.getAggregator([], colKey);\n          val = totalAggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtTotal colTotal\";\n          td.textContent = totalAggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, [], colKey);\n          }\n          td.setAttribute(\"data-for\", \"col\" + j);\n          tr.appendChild(td);\n        }\n        if (opts.table.rowTotals || colAttrs.length === 0) {\n          totalAggregator = pivotData.getAggregator([], []);\n          val = totalAggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtGrandTotal\";\n          td.textContent = totalAggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, [], []);\n          }\n          tr.appendChild(td);\n        }\n        tbody.appendChild(tr);\n      }\n      result.appendChild(tbody);\n      result.setAttribute(\"data-numrows\", rowKeys.length);\n      result.setAttribute(\"data-numcols\", colKeys.length);\n      return result;\n    };\n\n    /*\n    Pivot Table core: create PivotData object and call Renderer on it\n     */\n    $.fn.pivot = function(input, inputOpts, locale) {\n      var defaults, e, localeDefaults, localeStrings, opts, pivotData, result, x;\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        cols: [],\n        rows: [],\n        vals: [],\n        rowOrder: \"key_a_to_z\",\n        colOrder: \"key_a_to_z\",\n        dataClass: PivotData,\n        filter: function() {\n          return true;\n        },\n        aggregator: aggregatorTemplates.count()(),\n        aggregatorName: \"Count\",\n        sorters: {},\n        derivedAttributes: {},\n        renderer: pivotTableRenderer\n      };\n      localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings);\n      localeDefaults = {\n        rendererOptions: {\n          localeStrings: localeStrings\n        },\n        localeStrings: localeStrings\n      };\n      opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts));\n      result = null;\n      try {\n        pivotData = new opts.dataClass(input, opts);\n        try {\n          result = opts.renderer(pivotData, opts.rendererOptions);\n        } catch (error) {\n          e = error;\n          if (typeof console !== \"undefined\" && console !== null) {\n            console.error(e.stack);\n          }\n          result = $(\"<span>\").html(opts.localeStrings.renderError);\n        }\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        result = $(\"<span>\").html(opts.localeStrings.computeError);\n      }\n      x = this[0];\n      while (x.hasChildNodes()) {\n        x.removeChild(x.lastChild);\n      }\n      return this.append(result);\n    };\n\n    /*\n    Pivot Table UI: calls Pivot Table core above with options set by user\n     */\n    $.fn.pivotUI = function(input, inputOpts, overwrite, locale) {\n      var a, aggregator, attr, attrLength, attrValues, c, colOrderArrow, defaults, e, existingOpts, fn1, i, initialRender, len1, len2, len3, localeDefaults, localeStrings, materializedInput, n, o, opts, ordering, pivotTable, recordsProcessed, ref, ref1, ref2, ref3, refresh, refreshDelayed, renderer, rendererControl, rowOrderArrow, shownAttributes, shownInAggregators, shownInDragDrop, t, tr1, tr2, uiTable, unused, unusedAttrsVerticalAutoCutoff, unusedAttrsVerticalAutoOverride, x;\n      if (overwrite == null) {\n        overwrite = false;\n      }\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        derivedAttributes: {},\n        aggregators: locales[locale].aggregators,\n        renderers: locales[locale].renderers,\n        hiddenAttributes: [],\n        hiddenFromAggregators: [],\n        hiddenFromDragDrop: [],\n        menuLimit: 500,\n        cols: [],\n        rows: [],\n        vals: [],\n        rowOrder: \"key_a_to_z\",\n        colOrder: \"key_a_to_z\",\n        dataClass: PivotData,\n        exclusions: {},\n        inclusions: {},\n        unusedAttrsVertical: 85,\n        autoSortUnusedAttrs: false,\n        onRefresh: null,\n        showUI: true,\n        filter: function() {\n          return true;\n        },\n        sorters: {}\n      };\n      localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings);\n      localeDefaults = {\n        rendererOptions: {\n          localeStrings: localeStrings\n        },\n        localeStrings: localeStrings\n      };\n      existingOpts = this.data(\"pivotUIOptions\");\n      if ((existingOpts == null) || overwrite) {\n        opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts));\n      } else {\n        opts = existingOpts;\n      }\n      try {\n        attrValues = {};\n        materializedInput = [];\n        recordsProcessed = 0;\n        PivotData.forEachRecord(input, opts.derivedAttributes, function(record) {\n          var attr, base, ref, value;\n          if (!opts.filter(record)) {\n            return;\n          }\n          materializedInput.push(record);\n          for (attr in record) {\n            if (!hasProp.call(record, attr)) continue;\n            if (attrValues[attr] == null) {\n              attrValues[attr] = {};\n              if (recordsProcessed > 0) {\n                attrValues[attr][\"null\"] = recordsProcessed;\n              }\n            }\n          }\n          for (attr in attrValues) {\n            value = (ref = record[attr]) != null ? ref : \"null\";\n            if ((base = attrValues[attr])[value] == null) {\n              base[value] = 0;\n            }\n            attrValues[attr][value]++;\n          }\n          return recordsProcessed++;\n        });\n        uiTable = $(\"<table>\", {\n          \"class\": \"pvtUi\"\n        }).attr(\"cellpadding\", 5);\n        rendererControl = $(\"<td>\").addClass(\"pvtUiCell\");\n        renderer = $(\"<select>\").addClass('pvtRenderer').appendTo(rendererControl).bind(\"change\", function() {\n          return refresh();\n        });\n        ref = opts.renderers;\n        for (x in ref) {\n          if (!hasProp.call(ref, x)) continue;\n          $(\"<option>\").val(x).html(x).appendTo(renderer);\n        }\n        unused = $(\"<td>\").addClass('pvtAxisContainer pvtUnused pvtUiCell');\n        shownAttributes = (function() {\n          var results;\n          results = [];\n          for (a in attrValues) {\n            if (indexOf.call(opts.hiddenAttributes, a) < 0) {\n              results.push(a);\n            }\n          }\n          return results;\n        })();\n        shownInAggregators = (function() {\n          var len1, n, results;\n          results = [];\n          for (n = 0, len1 = shownAttributes.length; n < len1; n++) {\n            c = shownAttributes[n];\n            if (indexOf.call(opts.hiddenFromAggregators, c) < 0) {\n              results.push(c);\n            }\n          }\n          return results;\n        })();\n        shownInDragDrop = (function() {\n          var len1, n, results;\n          results = [];\n          for (n = 0, len1 = shownAttributes.length; n < len1; n++) {\n            c = shownAttributes[n];\n            if (indexOf.call(opts.hiddenFromDragDrop, c) < 0) {\n              results.push(c);\n            }\n          }\n          return results;\n        })();\n        unusedAttrsVerticalAutoOverride = false;\n        if (opts.unusedAttrsVertical === \"auto\") {\n          unusedAttrsVerticalAutoCutoff = 120;\n        } else {\n          unusedAttrsVerticalAutoCutoff = parseInt(opts.unusedAttrsVertical);\n        }\n        if (!isNaN(unusedAttrsVerticalAutoCutoff)) {\n          attrLength = 0;\n          for (n = 0, len1 = shownInDragDrop.length; n < len1; n++) {\n            a = shownInDragDrop[n];\n            attrLength += a.length;\n          }\n          unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff;\n        }\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          unused.addClass('pvtVertList');\n        } else {\n          unused.addClass('pvtHorizList');\n        }\n        fn1 = function(attr) {\n          var attrElem, checkContainer, closeFilterBox, controls, filterItem, filterItemExcluded, finalButtons, hasExcludedItem, len2, o, placeholder, ref1, sorter, triangleLink, v, value, valueCount, valueList, values;\n          values = (function() {\n            var results;\n            results = [];\n            for (v in attrValues[attr]) {\n              results.push(v);\n            }\n            return results;\n          })();\n          hasExcludedItem = false;\n          valueList = $(\"<div>\").addClass('pvtFilterBox').hide();\n          valueList.append($(\"<h4>\").append($(\"<span>\").text(attr), $(\"<span>\").addClass(\"count\").text(\"(\" + values.length + \")\")));\n          if (values.length > opts.menuLimit) {\n            valueList.append($(\"<p>\").html(opts.localeStrings.tooMany));\n          } else {\n            if (values.length > 5) {\n              controls = $(\"<p>\").appendTo(valueList);\n              sorter = getSort(opts.sorters, attr);\n              placeholder = opts.localeStrings.filterResults;\n              $(\"<input>\", {\n                type: \"text\"\n              }).appendTo(controls).attr({\n                placeholder: placeholder,\n                \"class\": \"pvtSearch\"\n              }).bind(\"keyup\", function() {\n                var accept, accept_gen, filter;\n                filter = $(this).val().toLowerCase().trim();\n                accept_gen = function(prefix, accepted) {\n                  return function(v) {\n                    var real_filter, ref1;\n                    real_filter = filter.substring(prefix.length).trim();\n                    if (real_filter.length === 0) {\n                      return true;\n                    }\n                    return ref1 = Math.sign(sorter(v.toLowerCase(), real_filter)), indexOf.call(accepted, ref1) >= 0;\n                  };\n                };\n                accept = filter.indexOf(\">=\") === 0 ? accept_gen(\">=\", [1, 0]) : filter.indexOf(\"<=\") === 0 ? accept_gen(\"<=\", [-1, 0]) : filter.indexOf(\">\") === 0 ? accept_gen(\">\", [1]) : filter.indexOf(\"<\") === 0 ? accept_gen(\"<\", [-1]) : filter.indexOf(\"~\") === 0 ? function(v) {\n                  if (filter.substring(1).trim().length === 0) {\n                    return true;\n                  }\n                  return v.toLowerCase().match(filter.substring(1));\n                } : function(v) {\n                  return v.toLowerCase().indexOf(filter) !== -1;\n                };\n                return valueList.find('.pvtCheckContainer p label span.value').each(function() {\n                  if (accept($(this).text())) {\n                    return $(this).parent().parent().show();\n                  } else {\n                    return $(this).parent().parent().hide();\n                  }\n                });\n              });\n              controls.append($(\"<br>\"));\n              $(\"<button>\", {\n                type: \"button\"\n              }).appendTo(controls).html(opts.localeStrings.selectAll).bind(\"click\", function() {\n                valueList.find(\"input:visible:not(:checked)\").prop(\"checked\", true).toggleClass(\"changed\");\n                return false;\n              });\n              $(\"<button>\", {\n                type: \"button\"\n              }).appendTo(controls).html(opts.localeStrings.selectNone).bind(\"click\", function() {\n                valueList.find(\"input:visible:checked\").prop(\"checked\", false).toggleClass(\"changed\");\n                return false;\n              });\n            }\n            checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList);\n            ref1 = values.sort(getSort(opts.sorters, attr));\n            for (o = 0, len2 = ref1.length; o < len2; o++) {\n              value = ref1[o];\n              valueCount = attrValues[attr][value];\n              filterItem = $(\"<label>\");\n              filterItemExcluded = false;\n              if (opts.inclusions[attr]) {\n                filterItemExcluded = (indexOf.call(opts.inclusions[attr], value) < 0);\n              } else if (opts.exclusions[attr]) {\n                filterItemExcluded = (indexOf.call(opts.exclusions[attr], value) >= 0);\n              }\n              hasExcludedItem || (hasExcludedItem = filterItemExcluded);\n              $(\"<input>\").attr(\"type\", \"checkbox\").addClass('pvtFilter').attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr, value]).appendTo(filterItem).bind(\"change\", function() {\n                return $(this).toggleClass(\"changed\");\n              });\n              filterItem.append($(\"<span>\").addClass(\"value\").text(value));\n              filterItem.append($(\"<span>\").addClass(\"count\").text(\"(\" + valueCount + \")\"));\n              checkContainer.append($(\"<p>\").append(filterItem));\n            }\n          }\n          closeFilterBox = function() {\n            if (valueList.find(\"[type='checkbox']\").length > valueList.find(\"[type='checkbox']:checked\").length) {\n              attrElem.addClass(\"pvtFilteredAttribute\");\n            } else {\n              attrElem.removeClass(\"pvtFilteredAttribute\");\n            }\n            valueList.find('.pvtSearch').val('');\n            valueList.find('.pvtCheckContainer p').show();\n            return valueList.hide();\n          };\n          finalButtons = $(\"<p>\").appendTo(valueList);\n          if (values.length <= opts.menuLimit) {\n            $(\"<button>\", {\n              type: \"button\"\n            }).text(opts.localeStrings.apply).appendTo(finalButtons).bind(\"click\", function() {\n              if (valueList.find(\".changed\").removeClass(\"changed\").length) {\n                refresh();\n              }\n              return closeFilterBox();\n            });\n          }\n          $(\"<button>\", {\n            type: \"button\"\n          }).text(opts.localeStrings.cancel).appendTo(finalButtons).bind(\"click\", function() {\n            valueList.find(\".changed:checked\").removeClass(\"changed\").prop(\"checked\", false);\n            valueList.find(\".changed:not(:checked)\").removeClass(\"changed\").prop(\"checked\", true);\n            return closeFilterBox();\n          });\n          triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" &#x25BE;\").bind(\"click\", function(e) {\n            var left, ref2, top;\n            ref2 = $(e.currentTarget).position(), left = ref2.left, top = ref2.top;\n            return valueList.css({\n              left: left + 10,\n              top: top + 10\n            }).show();\n          });\n          attrElem = $(\"<li>\").addClass(\"axis_\" + i).append($(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink));\n          if (hasExcludedItem) {\n            attrElem.addClass('pvtFilteredAttribute');\n          }\n          return unused.append(attrElem).append(valueList);\n        };\n        for (i in shownInDragDrop) {\n          if (!hasProp.call(shownInDragDrop, i)) continue;\n          attr = shownInDragDrop[i];\n          fn1(attr);\n        }\n        tr1 = $(\"<tr>\").appendTo(uiTable);\n        aggregator = $(\"<select>\").addClass('pvtAggregator').bind(\"change\", function() {\n          return refresh();\n        });\n        ref1 = opts.aggregators;\n        for (x in ref1) {\n          if (!hasProp.call(ref1, x)) continue;\n          aggregator.append($(\"<option>\").val(x).html(x));\n        }\n        ordering = {\n          key_a_to_z: {\n            rowSymbol: \"&varr;\",\n            colSymbol: \"&harr;\",\n            next: \"value_a_to_z\"\n          },\n          value_a_to_z: {\n            rowSymbol: \"&darr;\",\n            colSymbol: \"&rarr;\",\n            next: \"value_z_to_a\"\n          },\n          value_z_to_a: {\n            rowSymbol: \"&uarr;\",\n            colSymbol: \"&larr;\",\n            next: \"key_a_to_z\"\n          }\n        };\n        rowOrderArrow = $(\"<a>\", {\n          role: \"button\"\n        }).addClass(\"pvtRowOrder\").data(\"order\", opts.rowOrder).html(ordering[opts.rowOrder].rowSymbol).bind(\"click\", function() {\n          $(this).data(\"order\", ordering[$(this).data(\"order\")].next);\n          $(this).html(ordering[$(this).data(\"order\")].rowSymbol);\n          return refresh();\n        });\n        colOrderArrow = $(\"<a>\", {\n          role: \"button\"\n        }).addClass(\"pvtColOrder\").data(\"order\", opts.colOrder).html(ordering[opts.colOrder].colSymbol).bind(\"click\", function() {\n          $(this).data(\"order\", ordering[$(this).data(\"order\")].next);\n          $(this).html(ordering[$(this).data(\"order\")].colSymbol);\n          return refresh();\n        });\n        $(\"<td>\").addClass('pvtVals pvtUiCell').appendTo(tr1).append(aggregator).append(rowOrderArrow).append(colOrderArrow).append($(\"<br>\"));\n        $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols pvtUiCell').appendTo(tr1);\n        tr2 = $(\"<tr>\").appendTo(uiTable);\n        tr2.append($(\"<td>\").addClass('pvtAxisContainer pvtRows pvtUiCell').attr(\"valign\", \"top\"));\n        pivotTable = $(\"<td>\").attr(\"valign\", \"top\").addClass('pvtRendererArea').appendTo(tr2);\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          uiTable.find('tr:nth-child(1)').prepend(rendererControl);\n          uiTable.find('tr:nth-child(2)').prepend(unused);\n        } else {\n          uiTable.prepend($(\"<tr>\").append(rendererControl).append(unused));\n        }\n        this.html(uiTable);\n        ref2 = opts.cols;\n        for (o = 0, len2 = ref2.length; o < len2; o++) {\n          x = ref2[o];\n          this.find(\".pvtCols\").append(this.find(\".axis_\" + ($.inArray(x, shownInDragDrop))));\n        }\n        ref3 = opts.rows;\n        for (t = 0, len3 = ref3.length; t < len3; t++) {\n          x = ref3[t];\n          this.find(\".pvtRows\").append(this.find(\".axis_\" + ($.inArray(x, shownInDragDrop))));\n        }\n        if (opts.aggregatorName != null) {\n          this.find(\".pvtAggregator\").val(opts.aggregatorName);\n        }\n        if (opts.rendererName != null) {\n          this.find(\".pvtRenderer\").val(opts.rendererName);\n        }\n        if (!opts.showUI) {\n          this.find(\".pvtUiCell\").hide();\n        }\n        initialRender = true;\n        refreshDelayed = (function(_this) {\n          return function() {\n            var exclusions, inclusions, len4, newDropdown, numInputsToProcess, pivotUIOptions, pvtVals, ref4, ref5, subopts, u, unusedAttrsContainer, vals, w;\n            subopts = {\n              derivedAttributes: opts.derivedAttributes,\n              localeStrings: opts.localeStrings,\n              rendererOptions: opts.rendererOptions,\n              sorters: opts.sorters,\n              cols: [],\n              rows: [],\n              dataClass: opts.dataClass\n            };\n            numInputsToProcess = (ref4 = opts.aggregators[aggregator.val()]([])().numInputs) != null ? ref4 : 0;\n            vals = [];\n            _this.find(\".pvtRows li span.pvtAttr\").each(function() {\n              return subopts.rows.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtCols li span.pvtAttr\").each(function() {\n              return subopts.cols.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n              if (numInputsToProcess === 0) {\n                return $(this).remove();\n              } else {\n                numInputsToProcess--;\n                if ($(this).val() !== \"\") {\n                  return vals.push($(this).val());\n                }\n              }\n            });\n            if (numInputsToProcess !== 0) {\n              pvtVals = _this.find(\".pvtVals\");\n              for (x = u = 0, ref5 = numInputsToProcess; 0 <= ref5 ? u < ref5 : u > ref5; x = 0 <= ref5 ? ++u : --u) {\n                newDropdown = $(\"<select>\").addClass('pvtAttrDropdown').append($(\"<option>\")).bind(\"change\", function() {\n                  return refresh();\n                });\n                for (w = 0, len4 = shownInAggregators.length; w < len4; w++) {\n                  attr = shownInAggregators[w];\n                  newDropdown.append($(\"<option>\").val(attr).text(attr));\n                }\n                pvtVals.append(newDropdown);\n              }\n            }\n            if (initialRender) {\n              vals = opts.vals;\n              i = 0;\n              _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n                $(this).val(vals[i]);\n                return i++;\n              });\n              initialRender = false;\n            }\n            subopts.aggregatorName = aggregator.val();\n            subopts.vals = vals;\n            subopts.aggregator = opts.aggregators[aggregator.val()](vals);\n            subopts.renderer = opts.renderers[renderer.val()];\n            subopts.rowOrder = rowOrderArrow.data(\"order\");\n            subopts.colOrder = colOrderArrow.data(\"order\");\n            exclusions = {};\n            _this.find('input.pvtFilter').not(':checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                return exclusions[filter[0]].push(filter[1]);\n              } else {\n                return exclusions[filter[0]] = [filter[1]];\n              }\n            });\n            inclusions = {};\n            _this.find('input.pvtFilter:checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                if (inclusions[filter[0]] != null) {\n                  return inclusions[filter[0]].push(filter[1]);\n                } else {\n                  return inclusions[filter[0]] = [filter[1]];\n                }\n              }\n            });\n            subopts.filter = function(record) {\n              var excludedItems, k, ref6, ref7;\n              if (!opts.filter(record)) {\n                return false;\n              }\n              for (k in exclusions) {\n                excludedItems = exclusions[k];\n                if (ref6 = \"\" + ((ref7 = record[k]) != null ? ref7 : 'null'), indexOf.call(excludedItems, ref6) >= 0) {\n                  return false;\n                }\n              }\n              return true;\n            };\n            pivotTable.pivot(materializedInput, subopts);\n            pivotUIOptions = $.extend({}, opts, {\n              cols: subopts.cols,\n              rows: subopts.rows,\n              colOrder: subopts.colOrder,\n              rowOrder: subopts.rowOrder,\n              vals: vals,\n              exclusions: exclusions,\n              inclusions: inclusions,\n              inclusionsInfo: inclusions,\n              aggregatorName: aggregator.val(),\n              rendererName: renderer.val()\n            });\n            _this.data(\"pivotUIOptions\", pivotUIOptions);\n            if (opts.autoSortUnusedAttrs) {\n              unusedAttrsContainer = _this.find(\"td.pvtUnused.pvtAxisContainer\");\n              $(unusedAttrsContainer).children(\"li\").sort(function(a, b) {\n                return naturalSort($(a).text(), $(b).text());\n              }).appendTo(unusedAttrsContainer);\n            }\n            pivotTable.css(\"opacity\", 1);\n            if (opts.onRefresh != null) {\n              return opts.onRefresh(pivotUIOptions);\n            }\n          };\n        })(this);\n        refresh = (function(_this) {\n          return function() {\n            pivotTable.css(\"opacity\", 0.5);\n            return setTimeout(refreshDelayed, 10);\n          };\n        })(this);\n        refresh();\n        this.find(\".pvtAxisContainer\").sortable({\n          update: function(e, ui) {\n            if (ui.sender == null) {\n              return refresh();\n            }\n          },\n          connectWith: this.find(\".pvtAxisContainer\"),\n          items: 'li',\n          placeholder: 'pvtPlaceholder'\n        });\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        this.html(opts.localeStrings.uiRenderError);\n      }\n      return this;\n    };\n\n    /*\n    Heatmap post-processing\n     */\n    $.fn.heatmap = function(scope, opts) {\n      var colorScaleGenerator, heatmapper, i, j, n, numCols, numRows, o, ref, ref1, ref2;\n      if (scope == null) {\n        scope = \"heatmap\";\n      }\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      colorScaleGenerator = opts != null ? (ref = opts.heatmap) != null ? ref.colorScaleGenerator : void 0 : void 0;\n      if (colorScaleGenerator == null) {\n        colorScaleGenerator = function(values) {\n          var max, min;\n          min = Math.min.apply(Math, values);\n          max = Math.max.apply(Math, values);\n          return function(x) {\n            var nonRed;\n            nonRed = 255 - Math.round(255 * (x - min) / (max - min));\n            return \"rgb(255,\" + nonRed + \",\" + nonRed + \")\";\n          };\n        };\n      }\n      heatmapper = (function(_this) {\n        return function(scope) {\n          var colorScale, forEachCell, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          colorScale = colorScaleGenerator(values);\n          return forEachCell(function(x, elem) {\n            return elem.css(\"background-color\", colorScale(x));\n          });\n        };\n      })(this);\n      switch (scope) {\n        case \"heatmap\":\n          heatmapper(\".pvtVal\");\n          break;\n        case \"rowheatmap\":\n          for (i = n = 0, ref1 = numRows; 0 <= ref1 ? n < ref1 : n > ref1; i = 0 <= ref1 ? ++n : --n) {\n            heatmapper(\".pvtVal.row\" + i);\n          }\n          break;\n        case \"colheatmap\":\n          for (j = o = 0, ref2 = numCols; 0 <= ref2 ? o < ref2 : o > ref2; j = 0 <= ref2 ? ++o : --o) {\n            heatmapper(\".pvtVal.col\" + j);\n          }\n      }\n      heatmapper(\".pvtTotal.rowTotal\");\n      heatmapper(\".pvtTotal.colTotal\");\n      return this;\n    };\n\n    /*\n    Barchart post-processing\n     */\n    return $.fn.barchart = function(opts) {\n      var barcharter, i, n, numCols, numRows, ref;\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      barcharter = (function(_this) {\n        return function(scope) {\n          var forEachCell, max, min, range, scaler, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          max = Math.max.apply(Math, values);\n          if (max < 0) {\n            max = 0;\n          }\n          range = max;\n          min = Math.min.apply(Math, values);\n          if (min < 0) {\n            range = max - min;\n          }\n          scaler = function(x) {\n            return 100 * x / (1.4 * range);\n          };\n          return forEachCell(function(x, elem) {\n            var bBase, bgColor, text, wrapper;\n            text = elem.text();\n            wrapper = $(\"<div>\").css({\n              \"position\": \"relative\",\n              \"height\": \"55px\"\n            });\n            bgColor = \"gray\";\n            bBase = 0;\n            if (min < 0) {\n              bBase = scaler(-min);\n            }\n            if (x < 0) {\n              bBase += scaler(x);\n              bgColor = \"darkred\";\n              x = -x;\n            }\n            wrapper.append($(\"<div>\").css({\n              \"position\": \"absolute\",\n              \"bottom\": bBase + \"%\",\n              \"left\": 0,\n              \"right\": 0,\n              \"height\": scaler(x) + \"%\",\n              \"background-color\": bgColor\n            }));\n            wrapper.append($(\"<div>\").text(text).css({\n              \"position\": \"relative\",\n              \"padding-left\": \"5px\",\n              \"padding-right\": \"5px\"\n            }));\n            return elem.css({\n              \"padding\": 0,\n              \"padding-top\": \"5px\",\n              \"text-align\": \"center\"\n            }).html(wrapper);\n          });\n        };\n      })(this);\n      for (i = n = 0, ref = numRows; 0 <= ref ? n < ref : n > ref; i = 0 <= ref ? ++n : --n) {\n        barcharter(\".pvtVal.row\" + i);\n      }\n      barcharter(\".pvtTotal.colTotal\");\n      return this;\n    };\n  });\n\n}).call(this);\n\n//# sourceMappingURL=pivot.js.map\n"]}